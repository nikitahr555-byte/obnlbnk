/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤
 * –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –º—ã –Ω–∞–ø—Ä—è–º—É—é —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –ø–æ–º–æ—â—å—é ethers.js –¥–ª—è ETH
 * –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è BTC –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç bitcoinjs-lib
 */

import { ethers } from 'ethers';
import { db } from '../server/db.js';
import { cards } from '../shared/schema.js';
import { eq } from 'drizzle-orm';
import { validateCryptoAddress } from '../server/utils/crypto.js';
import { randomBytes } from 'crypto';

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é ethers.js
 */
function generateValidEthAddress(): string {
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ETH –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ ethers.js
    const wallet = ethers.Wallet.createRandom();
    return wallet.address;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ETH –∞–¥—Ä–µ—Å–∞:", error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return `0x${randomBytes(20).toString('hex')}`;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ P2PKH)
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ–π–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 */
function generateValidBtcAddress(): string {
  // Base58 —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é: [a-km-zA-HJ-NP-Z0-9]
  const VALID_CHARS = '0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  function generateValidString(length: number): string {
    let result = '';
    const randomValues = randomBytes(length);
    
    for (let i = 0; i < length; i++) {
      // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–π—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –∏–Ω–¥–µ–∫—Å—É –≤ —Å—Ç—Ä–æ–∫–µ VALID_CHARS
      const randomIndex = randomValues[i] % VALID_CHARS.length;
      result += VALID_CHARS.charAt(randomIndex);
    }
    
    return result;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ P2PKH, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:
  // /^[13][a-km-zA-HJ-NP-Z0-9]{24,33}$/
  const prefixChar = '1'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º '1' –¥–ª—è P2PKH –∞–¥—Ä–µ—Å–æ–≤
  const addressLength = 28; // –í—ã–±–∏—Ä–∞–µ–º –¥–ª–∏–Ω—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 24-33, –∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  let addressBody = generateValidString(addressLength);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "BTC" –∏–ª–∏ "btc" –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä
  while (
    addressBody.includes('BTC') || 
    addressBody.includes('btc') || 
    /^[0-9]+$/.test(addressBody)
  ) {
    addressBody = generateValidString(addressLength);
  }
  
  return `${prefixChar}${addressBody}`;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function fixCryptoAddresses() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã
    const cryptoCards = await db.select().from(cards).where(eq(cards.type, 'crypto'));
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    let updatedCount = 0;
    let alreadyValidCount = 0;
    let errorCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É
    for (const card of cryptoCards) {
      console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}...`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        const isBtcValid = card.btcAddress ? validateCryptoAddress(card.btcAddress, 'btc') : false;
        const isEthValid = card.ethAddress ? validateCryptoAddress(card.ethAddress, 'eth') : false;

        console.log(`–¢–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞:`);
        console.log(`- BTC: ${card.btcAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} (${isBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
        console.log(`- ETH: ${card.ethAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} (${isEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);

        // –ï—Å–ª–∏ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç—É
        if (isBtcValid && isEthValid) {
          console.log(`‚úÖ –ö–∞—Ä—Ç–∞ #${card.id} —É–∂–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          alreadyValidCount++;
          continue;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
        console.log(`üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞...`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const btcAddress = generateValidBtcAddress();
        const ethAddress = generateValidEthAddress();

        // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã
        const isNewBtcValid = validateCryptoAddress(btcAddress, 'btc');
        const isNewEthValid = validateCryptoAddress(ethAddress, 'eth');

        console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:`);
        console.log(`- BTC: ${btcAddress} (${isNewBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
        console.log(`- ETH: ${ethAddress} (${isNewEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);

        if (!isNewBtcValid || !isNewEthValid) {
          console.error(`‚ùå –û—à–∏–±–∫–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç—ã ${card.id}`);
          errorCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
        await db
          .update(cards)
          .set({
            btcAddress: btcAddress,
            ethAddress: ethAddress
          })
          .where(eq(cards.id, card.id));

        console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã #${card.id}:`);
        console.log(`  –°—Ç–∞—Ä—ã–π BTC: ${card.btcAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`  –ù–æ–≤—ã–π BTC: ${btcAddress} ‚úì`);
        console.log(`  –°—Ç–∞—Ä—ã–π ETH: ${card.ethAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`  –ù–æ–≤—ã–π ETH: ${ethAddress} ‚úì`);
        
        updatedCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã ${card.id}:`, error);
        errorCount++;
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –∫–∞—Ä—Ç`);
    console.log(`‚úì –£–∂–µ –≤–∞–ª–∏–¥–Ω—ã—Ö: ${alreadyValidCount} –∫–∞—Ä—Ç`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const checkCards = await db
      .select({ 
        id: cards.id,
        userId: cards.userId,
        btcAddress: cards.btcAddress,
        ethAddress: cards.ethAddress
      })
      .from(cards)
      .where(eq(cards.type, 'crypto'));
      
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:");
    checkCards.forEach(card => {
      const isBtcValid = validateCryptoAddress(card.btcAddress || '', 'btc');
      const isEthValid = validateCryptoAddress(card.ethAddress || '', 'eth');
      
      console.log(`\n–ö–∞—Ä—Ç–∞ #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}:`);
      console.log(`- BTC: ${card.btcAddress} (${isBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
      console.log(`- ETH: ${card.ethAddress} (${isEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
fixCryptoAddresses()
  .then(() => console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error));
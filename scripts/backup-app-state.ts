import fs from 'fs';
import path from 'path';
import { db } from '../server/db.js';
import { cards } from "../shared/schema"';
import { eq } from 'drizzle-orm';
import JSZip from 'jszip';

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç:
 * 1. –í—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º
 * 2. –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
async function backupAppState() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = path.join(process.cwd(), 'backup', timestamp);
  const zip = new JSZip();

  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(path.join(process.cwd(), 'backup'))) {
      fs.mkdirSync(path.join(process.cwd(), 'backup'));
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–¥–∞
    console.log('üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º...');
    const filesToBackup = [
      'server/utils/crypto.ts',
      'scripts/fix-crypto-addresses.ts',
      'scripts/simplify-crypto-addresses.ts',
      'shared/schema.ts',
      'server/db.ts',
      'server/routes.ts',
      'server/storage.ts',
      'drizzle.config.ts',
      'package.json'
    ];

    for (const filePath of filesToBackup) {
      if (fs.existsSync(filePath)) {
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        zip.file(filePath, fileContent);
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
      } else {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      }
    }

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã
    const cryptoCards = await db
      .select()
      .from(cards)
      .where(eq(cards.type, 'crypto'))
      .execute();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –≤ JSON
    const dbBackup = {
      timestamp: new Date().toISOString(),
      cards: cryptoCards,
      version: '1.0.0',
      meta: {
        total_cards: cryptoCards.length,
        backup_type: 'full'
      }
    };

    zip.file('database/crypto_cards.json', JSON.stringify(dbBackup, null, 2));
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç`);

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    console.log('\n‚öôÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');
    if (fs.existsSync('.env')) {
      zip.file('.env.backup', fs.readFileSync('.env', 'utf-8'));
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª .env');
    }

    // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    console.log('\nüì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –±—ç–∫–∞–ø–∞...');
    const zipContent = await zip.generateAsync({ type: 'nodebuffer' });
    const backupPath = path.join(process.cwd(), 'backup', `backup-${timestamp}.zip`);
    fs.writeFileSync(backupPath, zipContent);

    console.log('\n‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    console.log(`üìç –ü—É—Ç—å –∫ –±—ç–∫–∞–ø—É: ${backupPath}`);
    console.log('\n–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç restore-app-state.ts');

    return {
      success: true,
      backupPath,
      timestamp,
      stats: {
        cards: cryptoCards.length,
        files: filesToBackup.length
      }
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
backupAppState()
  .then(result => {
    if (result.success) {
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–∞:');
      console.log(`- –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞—Ä—Ç: ${result.stats.cards}`);
      console.log(`- –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.stats.files}`);
      console.log(`- –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${result.timestamp}`);
    }
  })
  .catch(error => console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error));

import { db } from '../server/db';
import { cards } from '../shared/schema';
import { eq } from 'drizzle-orm';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π TON –∞–¥—Ä–µ—Å
 */
function generateTonAddress(): string {
  // TON –∞–¥—Ä–µ—Å–∞ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'EQ' –∏–ª–∏ 'UQ' –∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 48 —Å–∏–º–≤–æ–ª–æ–≤
  const prefix = Math.random() > 0.5 ? 'EQ' : 'UQ';
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
  let address = prefix;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 46 —Å–∏–º–≤–æ–ª–æ–≤ (48 - 2 –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞)
  for (let i = 0; i < 46; i++) {
    address += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return address;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç KICH COIN
 */
async function fixKichCoinCards() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç KICH COIN...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã
    const cryptoCards = await db.select().from(cards).where(eq(cards.type, 'crypto'));
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let updatedCount = 0;
    let errorCount = 0;
    
    for (const card of cryptoCards) {
      try {
        console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}...`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TON –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let tonAddress = card.tonAddress;
        let needsUpdate = false;
        
        if (!tonAddress || tonAddress.length === 0) {
          tonAddress = generateTonAddress();
          needsUpdate = true;
          console.log(`üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π TON –∞–¥—Ä–µ—Å: ${tonAddress}`);
        } else {
          console.log(`‚úÖ TON –∞–¥—Ä–µ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${tonAddress}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let btcAddress = card.btcAddress;
        let ethAddress = card.ethAddress;
        
        if (!btcAddress || btcAddress.length === 0) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π BTC –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          btcAddress = '1' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
          needsUpdate = true;
          console.log(`üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π BTC –∞–¥—Ä–µ—Å: ${btcAddress}`);
        }
        
        if (!ethAddress || ethAddress.length === 0) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ETH –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          ethAddress = '0x' + Math.random().toString(16).substring(2, 10) + Math.random().toString(16).substring(2, 10) + Math.random().toString(16).substring(2, 10) + Math.random().toString(16).substring(2, 10);
          needsUpdate = true;
          console.log(`üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ETH –∞–¥—Ä–µ—Å: ${ethAddress}`);
        }
        
        if (needsUpdate) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
          await db
            .update(cards)
            .set({
              tonAddress: tonAddress,
              btcAddress: btcAddress,
              ethAddress: ethAddress
            })
            .where(eq(cards.id, card.id));
          
          console.log(`‚úÖ –ö–∞—Ä—Ç–∞ #${card.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`);
          console.log(`  TON: ${tonAddress}`);
          console.log(`  BTC: ${btcAddress}`);
          console.log(`  ETH: ${ethAddress}`);
          
          updatedCount++;
        } else {
          console.log(`‚ÑπÔ∏è –ö–∞—Ä—Ç–∞ #${card.id} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã ${card.id}:`, error);
        errorCount++;
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç KICH COIN:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üì± –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${cryptoCards.length}`);
    
    if (updatedCount > 0) {
      console.log('\nüéâ –í—Å–µ TON –∞–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    } else {
      console.log('\n‚ú® –í—Å–µ –∫–∞—Ä—Ç—ã —É–∂–µ –∏–º–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–¥—Ä–µ—Å–∞');
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixKichCoinCards()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });

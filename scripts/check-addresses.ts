/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { db } from '../server/db.js';
import { cards } from "../shared/schema"';
import { eq } from 'drizzle-orm';
import { validateCryptoAddress } from '../server/utils/crypto.js';

async function checkCryptoAddresses() {
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã
    const cryptoCards = await db.select().from(cards).where(eq(cards.type, 'crypto'));
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    let validBtcCount = 0;
    let validEthCount = 0;
    let invalidBtcCount = 0;
    let invalidEthCount = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
    for (const card of cryptoCards) {
      console.log(`\nüìù –ö–∞—Ä—Ç–∞ #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC –∞–¥—Ä–µ—Å
      const isBtcValid = card.btcAddress ? validateCryptoAddress(card.btcAddress, 'btc') : false;
      console.log(`- BTC: ${card.btcAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} (${isBtcValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
      
      if (isBtcValid) {
        validBtcCount++;
      } else {
        invalidBtcCount++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ETH –∞–¥—Ä–µ—Å
      const isEthValid = card.ethAddress ? validateCryptoAddress(card.ethAddress, 'eth') : false;
      console.log(`- ETH: ${card.ethAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} (${isEthValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'})`);
      
      if (isEthValid) {
        validEthCount++;
      } else {
        invalidEthCount++;
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:');
    console.log(`- BTC: ${validBtcCount} –≤–∞–ª–∏–¥–Ω—ã—Ö, ${invalidBtcCount} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö`);
    console.log(`- ETH: ${validEthCount} –≤–∞–ª–∏–¥–Ω—ã—Ö, ${invalidEthCount} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö`);
    
    // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const allValid = invalidBtcCount === 0 && invalidEthCount === 0;
    if (allValid) {
      console.log('\n‚úÖ –í—Å–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã!');
    } else {
      console.log('\n‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
checkCryptoAddresses()
  .then(() => console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error));
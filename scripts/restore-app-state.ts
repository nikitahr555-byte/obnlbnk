import fs from 'fs';
import path from 'path';
import { db } from '../server/db.js';
import { cards } from "../shared/schema"';
import JSZip from 'jszip';
import { eq } from 'drizzle-orm';
import { fileURLToPath } from 'url';

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 * @param backupPath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 */
async function restoreAppState(backupPath?: string) {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');

  try {
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –±—ç–∫–∞–ø
    if (!backupPath) {
      const backupDir = path.join(process.cwd(), 'backup');
      if (!fs.existsSync(backupDir)) {
        throw new Error('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      const backups = fs.readdirSync(backupDir)
        .filter(file => file.startsWith('backup-') && file.endsWith('.zip'))
        .sort()
        .reverse();

      if (backups.length === 0) {
        throw new Error('–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      backupPath = path.join(backupDir, backups[0]);
    }

    if (!fs.existsSync(backupPath)) {
      throw new Error(`–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
    }

    console.log(`üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: ${backupPath}`);
    const zipContent = fs.readFileSync(backupPath);
    const zip = await JSZip.loadAsync(zipContent);

    // 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º
    console.log('\nüìÅ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º...');
    for (const [filename, file] of Object.entries(zip.files)) {
      if (!file.dir) {
        const content = await file.async('string');
        const targetPath = path.join(process.cwd(), filename);

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const dirname = path.dirname(targetPath);
        if (!fs.existsSync(dirname)) {
          fs.mkdirSync(dirname, { recursive: true });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ .bak –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (fs.existsSync(targetPath)) {
          fs.copyFileSync(targetPath, `${targetPath}.bak`);
        }

        fs.writeFileSync(targetPath, content);
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filename}`);
      }
    }

    // 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã
    console.log('\nüíæ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const dbBackupFile = zip.file('database/crypto_cards.json');
    if (dbBackupFile) {
      const dbBackupContent = await dbBackupFile.async('string');
      const dbBackup = JSON.parse(dbBackupContent);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –±—ç–∫–∞–ø–∞
      if (dbBackup.version !== '1.0.0') {
        console.warn('‚ö†Ô∏è –í–µ—Ä—Å–∏—è –±—ç–∫–∞–ø–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã
      for (const card of dbBackup.cards) {
        await db
          .insert(cards)
          .values(card)
          .onConflictDoUpdate({
            target: cards.id,
            set: {
              btcAddress: card.btcAddress,
              ethAddress: card.ethAddress
            }
          });
      }

      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${dbBackup.cards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç`);
    }

    // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\n‚öôÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    const envFile = zip.file('.env.backup');
    if (envFile) {
      const envContent = await envFile.async('string');
      fs.writeFileSync('.env', envContent);
      console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª .env');
    }

    console.log('\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å–æ–≤');

    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
const isMainModule = process.argv[1] === fileURLToPath(import.meta.url);
if (isMainModule) {
  const backupPath = process.argv[2]; // –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
  restoreAppState(backupPath)
    .then(() => console.log('\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'))
    .catch(error => console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error));
}

export { restoreAppState };
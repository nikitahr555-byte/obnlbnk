import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { toast } from '@/hooks/use-toast';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { apiRequest } from '@/lib/queryClient';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–≤—É–∫–∞, —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç NFTImage
import { playSound } from '../../lib/sound-service';
import { getProxiedImageUrl } from '../../lib/image-utils';
import { NFTImage } from './nft-image';

// Helper function for sound playback
const playSoundWithLog = (sound: string) => {
  console.log(`Playing sound: ${sound}`);
  playSound(sound as any);
};

type NFT = {
  id: number;
  collectionId: number;
  ownerId: number;
  name: string;
  description: string;
  imagePath: string;
  rarity: string;
  mintedAt: string;
  tokenId: string;
  price: string;
  forSale: boolean;
  collectionName?: string; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  owner?: {
    id: number;
    username: string;
  };
  attributes: {
    power: number;
    agility: number;
    wisdom: number;
    luck: number;
  };
};

export const NFTMarketplace: React.FC = () => {
  const [selectedNFT, setSelectedNFT] = useState<NFT | null>(null);
  const [giftRecipient, setGiftRecipient] = useState('');
  const [salePrice, setSalePrice] = useState('');
  const [isGiftDialogOpen, setIsGiftDialogOpen] = useState(false);
  const [isSellDialogOpen, setIsSellDialogOpen] = useState(false);
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc'); // asc = –æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π, desc = –æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedCollection, setSelectedCollection] = useState<string | null>(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const itemsPerPage = 50; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const queryClient = useQueryClient();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const { data: currentUser } = useQuery({
    queryKey: ['/api/user'],
    retry: 1
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ NFT —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { 
    data: myNfts = [], 
    isLoading: isLoadingMyNfts,
    isError: isErrorMyNfts
  } = useQuery<NFT[]>({
    queryKey: ['/api/nft/gallery'],
    retry: 1
  });
  
  // API —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º –≤–µ—Ä—Å–∏–∏ V2 –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  // –ü–æ–ª—É—á–∞–µ–º NFT —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API v2
  const { 
    data: marketplaceData, 
    isLoading: isLoadingMarketplace,
    isError: isErrorMarketplace
  } = useQuery<{
    items: NFT[],
    pagination: {
      page: number;
      limit: number;
      totalItems: number;
      totalPages: number;
    },
    filters: {
      sortBy: string;
      sortOrder: string;
      minPrice?: number;
      maxPrice?: number;
      rarity?: string;
      search?: string;
      collection?: string;
    }
  }>({
    queryKey: ['/api/nft/marketplace/v2', currentPage, sortOrder, selectedCollection],
    queryFn: () => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      let url = `/api/nft/marketplace/v2?page=${currentPage}&limit=${itemsPerPage}&sortBy=price&sortOrder=${sortOrder}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
      if (selectedCollection) {
        url += `&collection=${selectedCollection}`;
        console.log(`–ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${selectedCollection}: ${url}`);
      }
      
      return fetch(url).then(res => {
        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT');
        return res.json();
      }).then(data => {
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${data.items?.length || 0} NFT –æ—Ç API. –§–∏–ª—å—Ç—Ä: ${selectedCollection || '–≤—Å–µ'}`, data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const boredCount = data.items?.filter((nft: any) => 
          nft.collectionName === 'Bored Ape Yacht Club' || 
          nft.imagePath?.includes('/bored_ape_nft/')
        ).length || 0;
        
        const mutantCount = data.items?.filter((nft: any) => 
          nft.collectionName === 'Mutant Ape Yacht Club' || 
          nft.imagePath?.includes('/mutant_ape_nft/') ||
          nft.imagePath?.includes('/mutant_ape_official/')
        ).length || 0;
        
        console.log(`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ API: Bored Ape=${boredCount}, Mutant Ape=${mutantCount}`);
        
        // –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (data.items?.length > 0) {
          const firstFew = data.items.slice(0, 5);
          console.log(`–ü–µ—Ä–≤—ã–µ ${firstFew.length} NFT –∏–∑ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è ${selectedCollection || '–≤—Å–µ'}:`, 
          firstFew.map((nft: any) => ({
            id: nft.id, 
            name: nft.name, 
            collectionName: nft.collectionName,
            imagePath: nft.imagePath,
            collectionId: nft.collectionId,
            forSale: nft.forSale
          })));
        }
        
        return data;
      });
    },
    retry: 3
  });
  
  // –ü–æ–ª—É—á–∞–µ–º NFT –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API v2
  const items = marketplaceData?.items || [];
  const pagination = marketplaceData?.pagination || { 
    page: 1, 
    limit: itemsPerPage, 
    totalItems: 0, 
    totalPages: 0 
  };
  
  // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±–µ–∑—å—è–Ω BAYC –∏ MAYC, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ
  // –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å tokenId
  const marketplaceNfts = React.useMemo(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ NFT –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tokenId
    const uniqueMap = new Map<string, NFT>();
    
    // –í—ã–≤–µ—Å—Ç–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("NFT items:", items.length, "–¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:", items.length > 0 ? typeof items[0] : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (items.length > 0) {
      console.log("–ü–µ—Ä–≤—ã–µ 3 NFT –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞:", items.slice(0, 3));
    }
    
    // –û–°–ù–û–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    // –°–µ—Ä–≤–µ—Ä —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    items.forEach(nft => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (nft.imagePath) {
        console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é NFT:", nft.imagePath);
      }
      
      // –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ - –¥–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä—É –∏ –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      // –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ NFT, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞, —É–±–∏—Ä–∞—è —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø NFT –¥–ª—è –ª–æ–≥–æ–≤ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
      const isMutantApe = nft.collectionId === 2 || 
                         (nft.imagePath && nft.imagePath.includes('/mutant_ape')) ||
                         (nft.name && nft.name.toLowerCase().includes('mutant'));
      
      const isBoredApe = nft.collectionId === 1 || 
                         (nft.imagePath && nft.imagePath.includes('/bored_ape')) ||
                         (nft.name && nft.name.toLowerCase().includes('bored'));
      
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º Mutant Ape
      if (isMutantApe) {
        const isOfficial = nft.imagePath && nft.imagePath.includes('/mutant_ape_official/');
        console.log(
          `${isOfficial ? 'üîµ' : 'üü¢'} Mutant Ape –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:`,
          `ID=${nft.id}`,
          `–ò–º—è=${nft.name}`,
          `–ü—É—Ç—å=${nft.imagePath ? nft.imagePath : '–Ω–µ—Ç –ø—É—Ç–∏'}`
        );
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º NFT –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (nft.forSale) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ tokenId
        const collectionPrefix = isMutantApe ? 'mutant' : (isBoredApe ? 'bored' : 'other');
        const uniqueKey = `${collectionPrefix}_${nft.tokenId}`;
        
        // –ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        uniqueMap.set(uniqueKey, nft);
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
    const result = Array.from(uniqueMap.values());
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${result.length}`);
    
    return result;
  }, [items]);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ API
  const totalItems = pagination.totalItems;
  const totalPages = pagination.totalPages;
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
  const sellNftMutation = useMutation({
    mutationFn: (data: { nftId: number, price: string }) => {
      return fetch(`/api/nft/${data.nftId}/sell`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ price: data.price }),
      }).then(res => {
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É');
        return res.json();
      });
    },
    onSuccess: () => {
      toast({
        title: 'NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É',
        description: '–í–∞—à NFT —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      });
      playSoundWithLog('success');
      queryClient.invalidateQueries({ queryKey: ['/api/nft/gallery'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace/v2'] });
      setIsSellDialogOpen(false);
      setSalePrice('');
    },
    onError: (error: any) => {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É',
        variant: 'destructive',
      });
      playSoundWithLog('error');
    }
  });
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è NFT —Å –ø—Ä–æ–¥–∞–∂–∏
  const cancelSaleMutation = useMutation({
    mutationFn: (nftId: number) => {
      return fetch(`/api/nft/${nftId}/cancel-sale`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      }).then(res => {
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å NFT —Å –ø—Ä–æ–¥–∞–∂–∏');
        return res.json();
      });
    },
    onSuccess: () => {
      toast({
        title: 'NFT —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏',
        description: '–í–∞—à NFT –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏',
      });
      playSoundWithLog('success');
      queryClient.invalidateQueries({ queryKey: ['/api/nft/gallery'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace/v2'] });
    },
    onError: (error: any) => {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å NFT —Å –ø—Ä–æ–¥–∞–∂–∏',
        variant: 'destructive',
      });
      playSoundWithLog('error');
    }
  });
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NFT
  const buyNftMutation = useMutation({
    mutationFn: (nftId: number) => {
      return fetch(`/api/nft/${nftId}/buy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      }).then(res => {
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å NFT');
        return res.json();
      });
    },
    onSuccess: (data) => {
      toast({
        title: 'NFT –∫—É–ø–ª–µ–Ω',
        description: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π! NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é',
      });
      playSoundWithLog('success');
      queryClient.invalidateQueries({ queryKey: ['/api/nft/gallery'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace/v2'] });
      setSelectedNFT(null);
    },
    onError: (error: any) => {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å NFT',
        variant: 'destructive',
      });
      playSoundWithLog('error');
    }
  });
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è NFT
  const giftNftMutation = useMutation({
    mutationFn: (data: { nftId: number, recipientUsername: string }) => {
      return fetch(`/api/nft/${data.nftId}/gift`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ recipientUsername: data.recipientUsername }),
      }).then(res => {
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å NFT');
        return res.json();
      });
    },
    onSuccess: () => {
      toast({
        title: 'NFT –ø–æ–¥–∞—Ä–µ–Ω',
        description: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${giftRecipient}`,
      });
      playSoundWithLog('success');
      queryClient.invalidateQueries({ queryKey: ['/api/nft/gallery'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace'] });
      queryClient.invalidateQueries({ queryKey: ['/api/nft/marketplace/v2'] });
      setIsGiftDialogOpen(false);
      setGiftRecipient('');
    },
    onError: (error: any) => {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å NFT',
        variant: 'destructive',
      });
      playSoundWithLog('error');
    }
  });
  
  const rarityColors: {[key: string]: string} = {
    common: 'bg-slate-500',
    uncommon: 'bg-green-500',
    rare: 'bg-blue-500',
    epic: 'bg-purple-500',
    legendary: 'bg-yellow-500',
  };
  
  const formatDate = (dateString: string | Date) => {
    try {
      const date = dateString instanceof Date ? dateString : new Date(dateString);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (isNaN(date.getTime())) {
        return '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
      }
      
      return new Intl.DateTimeFormat('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).format(date);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
      return '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }
  };
  
  const calculatePower = (nft: NFT) => {
    const { power, agility, wisdom, luck } = nft.attributes || { power: 0, agility: 0, wisdom: 0, luck: 0 };
    return Math.floor((power + agility + wisdom + luck) / 4);
  };
  
  const handleSellNft = () => {
    if (!selectedNFT) return;
    
    if (!salePrice || isNaN(parseFloat(salePrice)) || parseFloat(salePrice) <= 0) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É',
        variant: 'destructive',
      });
      return;
    }
    
    sellNftMutation.mutate({
      nftId: selectedNFT.id,
      price: salePrice
    });
  };
  
  const handleGiftNft = () => {
    if (!selectedNFT) return;
    
    if (!giftRecipient) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
        variant: 'destructive',
      });
      return;
    }
    
    giftNftMutation.mutate({
      nftId: selectedNFT.id,
      recipientUsername: giftRecipient
    });
  };
  
  const handleBuyNft = () => {
    if (!selectedNFT) return;
    
    buyNftMutation.mutate(selectedNFT.id);
  };
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö NFT
  const minMaxPrices = React.useMemo(() => {
    if (!marketplaceNfts.length) return { min: 0, max: 0 };
    
    let min = Infinity;
    let max = 0;
    
    marketplaceNfts.forEach(nft => {
      try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        const price = typeof nft.price === 'string' ? parseFloat(nft.price) : nft.price;
        if (!isNaN(price)) {
          if (price < min) min = price;
          if (price > max) max = price;
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∏–Ω-–º–∞–∫—Å —Ü–µ–Ω:', e);
      }
    });
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö NFT —É –Ω–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω
    if (min === Infinity || max === 0) {
      return { min: 30, max: 20000 }; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    return { 
      min: Math.floor(min), // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤–Ω–∏–∑
      max: Math.ceil(max)   // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤–≤–µ—Ä—Ö
    };
  }, [marketplaceNfts]);

  const isLoading = isLoadingMyNfts || isLoadingMarketplace || sellNftMutation.isPending || buyNftMutation.isPending || giftNftMutation.isPending || cancelSaleMutation.isPending;
  
  if (isErrorMyNfts || isErrorMarketplace) {
    return (
      <Alert variant="destructive">
        <AlertTitle>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</AlertTitle>
        <AlertDescription>
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ NFT. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-10">
      {/* –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å */}
      <div>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
        <div className="flex flex-col gap-3 mb-6">
          <div className="flex justify-between items-center flex-wrap gap-2">
            <h2 className="text-2xl font-bold">NFT –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</h2>
            <div className="text-xs bg-slate-100 dark:bg-slate-800 rounded-full px-3 py-1">
              –í—Å–µ–≥–æ: {totalItems} NFT ‚Ä¢ –¶–µ–Ω—ã: ${minMaxPrices.min} - ${minMaxPrices.max}
            </div>
          </div>
          
          {/* –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º */}
          <div className="flex flex-wrap items-center gap-2 mb-2">
            <span className="text-sm font-medium whitespace-nowrap">–ö–æ–ª–ª–µ–∫—Ü–∏—è:</span>
            <div className="flex flex-grow max-w-lg gap-1">
              <Button
                variant={selectedCollection === null ? "default" : "outline"}
                size="sm"
                onClick={() => {
                  setSelectedCollection(null);
                  setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
                }}
                className="whitespace-nowrap text-xs sm:text-sm px-2 sm:px-3 flex-1"
              >
                –í—Å–µ
              </Button>
              <Button
                variant={selectedCollection === 'bored' ? "default" : "outline"}
                size="sm"
                onClick={() => {
                  setSelectedCollection('bored');
                  setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
                }}
                className="whitespace-nowrap text-xs sm:text-sm px-2 sm:px-3 flex-1"
              >
                Bored Ape
              </Button>
              <Button
                variant={selectedCollection === 'mutant' ? "default" : "outline"}
                size="sm"
                onClick={() => {
                  setSelectedCollection('mutant');
                  setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
                }}
                className="whitespace-nowrap text-xs sm:text-sm px-2 sm:px-3 flex-1"
              >
                Mutant Ape
              </Button>
            </div>
          </div>
        
          {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ - –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ */}
          <div className="flex flex-wrap items-center gap-2">
            <span className="text-sm font-medium whitespace-nowrap">–¶–µ–Ω–∞:</span>
            <div className="flex flex-grow max-w-xs">
              <Button
                variant={sortOrder === 'asc' ? "default" : "outline"}
                size="sm"
                onClick={() => setSortOrder('asc')}
                className="rounded-r-none border-r-0 whitespace-nowrap flex-1 text-xs sm:text-sm px-2 sm:px-3"
              >
                <span className="hidden sm:inline">–û—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π</span>
                <span className="sm:hidden">‚Üë –í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ</span>
              </Button>
              <Button
                variant={sortOrder === 'desc' ? "default" : "outline"}
                size="sm"
                onClick={() => setSortOrder('desc')}
                className="rounded-l-none whitespace-nowrap flex-1 text-xs sm:text-sm px-2 sm:px-3"
              >
                <span className="hidden sm:inline">–û—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π</span>
                <span className="sm:hidden">‚Üì –£–±—ã–≤–∞–Ω–∏–µ</span>
              </Button>
            </div>
          </div>
        </div>
        
        {isLoadingMarketplace ? (
          <div className="flex justify-center items-center h-[200px]">
            <LoadingSpinner size="lg" />
          </div>
        ) : marketplaceNfts.length === 0 ? (
          <Alert>
            <AlertDescription>
              –ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö NFT –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
            </AlertDescription>
          </Alert>
        ) : (
          <div className="space-y-6">
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 sm:gap-4">
              {marketplaceNfts.map((nft) => (
                <Card 
                  key={nft.id} 
                  className="overflow-hidden cursor-pointer hover:shadow-md transition-shadow w-full max-w-full"
                  onClick={() => {
                    setSelectedNFT(nft);
                    playSoundWithLog('click');
                  }}
                >
                  <div className="relative aspect-square">
                    <NFTImage 
                      src={nft.imagePath} 
                      alt={nft.name} 
                      className="w-full h-full object-cover"
                    />
                    <Badge className={`absolute top-1 right-1 text-[10px] px-1 py-0 sm:text-xs sm:px-2 sm:py-0.5 ${rarityColors[nft.rarity]}`}>
                      {nft.rarity}
                    </Badge>
                    <Badge className="absolute top-1 left-1 text-[10px] px-1 py-0 sm:text-xs sm:px-2 sm:py-0.5 bg-amber-500">
                      {(() => {
                        try {
                          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                          const price = typeof nft.price === 'string' ? parseFloat(nft.price) : nft.price;
                          return isNaN(price) ? '30' : price.toFixed(0);
                        } catch (e) {
                          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã:', e);
                          return '30';
                        }
                      })()} USD
                    </Badge>
                    
                    {/* –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è Mutant Ape */}
                    {nft.imagePath && nft.imagePath.includes('mutant_ape') && (
                      <div className="absolute bottom-1 left-1 right-1 bg-black/70 text-white text-[8px] sm:text-xs px-1 py-0.5 flex justify-center">
                        {nft.imagePath.includes('mutant_ape_official') 
                          ? 'üîµ Official Collection' 
                          : 'üü¢ Regular Collection'}
                      </div>
                    )}
                  </div>
                  <CardContent className="p-2 sm:p-3">
                    {/* –°–¢–†–û–ì–ê–Ø –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏–º–µ–Ω–∏ NFT –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π */}
                    <h3 className="font-semibold text-xs sm:text-sm truncate">
                      {nft.imagePath && nft.imagePath.includes('mutant_ape') && nft.collectionName === 'Mutant Ape Yacht Club'
                        ? `Mutant Ape #${nft.tokenId}`
                        : nft.imagePath && nft.imagePath.includes('bored_ape') && nft.collectionName === 'Bored Ape Yacht Club'
                          ? `Bored Ape #${nft.tokenId}`
                          : nft.name}
                    </h3>
                    {/* –°–¢–†–û–ì–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ */}
                    <div className="text-[10px] sm:text-xs text-muted-foreground mt-0.5 mb-0.5 truncate">
                      {nft.imagePath && nft.imagePath.includes('mutant_ape') && !nft.imagePath.includes('bored_ape')
                        ? 'Mutant Ape Yacht Club'
                        : nft.imagePath && nft.imagePath.includes('bored_ape') && !nft.imagePath.includes('mutant_ape')
                          ? 'Bored Ape Yacht Club'
                          : nft.collectionName || ''}
                    </div>
                    <div className="flex justify-between items-center mt-0.5">
                      <span className="text-[10px] sm:text-xs text-muted-foreground">–°–∏–ª–∞: {calculatePower(nft)}</span>
                      <span className="text-[10px] sm:text-xs text-muted-foreground truncate max-w-[70px] sm:max-w-[120px]">
                        {nft.owner ? `@${nft.owner.username}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
            
            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {totalPages > 0 && (
              <div className="flex justify-center items-center gap-2 mt-4">
                <Button 
                  variant="outline" 
                  size="sm"
                  disabled={currentPage === 1}
                  onClick={() => {
                    const newPage = Math.max(currentPage - 1, 1);
                    setCurrentPage(newPage);
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                  }}
                >
                  –ù–∞–∑–∞–¥
                </Button>
                
                <div className="flex items-center gap-1 flex-wrap justify-center">
                  {(() => {
                    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const pageButtons = [];
                    
                    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const maxPageButtons = 5;
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
                    let endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
                    
                    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
                    if (endPage - startPage + 1 < maxPageButtons) {
                      startPage = Math.max(1, endPage - maxPageButtons + 1);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (startPage > 1) {
                      pageButtons.push(
                        <Button
                          key={1}
                          variant={currentPage === 1 ? "default" : "outline"}
                          size="sm"
                          className="w-8 h-8 p-0"
                          onClick={() => {
                            setCurrentPage(1);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                          }}
                        >
                          1
                        </Button>
                      );
                      
                      if (startPage > 2) {
                        pageButtons.push(
                          <span key="ellipsis1" className="px-1">...</span>
                        );
                      }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    for (let page = startPage; page <= endPage; page++) {
                      pageButtons.push(
                        <Button
                          key={page}
                          variant={currentPage === page ? "default" : "outline"}
                          size="sm"
                          className="w-8 h-8 p-0"
                          onClick={() => {
                            setCurrentPage(page);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                          }}
                        >
                          {page}
                        </Button>
                      );
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (endPage < totalPages) {
                      if (endPage < totalPages - 1) {
                        pageButtons.push(
                          <span key="ellipsis2" className="px-1">...</span>
                        );
                      }
                      
                      pageButtons.push(
                        <Button
                          key={totalPages}
                          variant={currentPage === totalPages ? "default" : "outline"}
                          size="sm"
                          className="w-8 h-8 p-0"
                          onClick={() => {
                            setCurrentPage(totalPages);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                          }}
                        >
                          {totalPages}
                        </Button>
                      );
                    }
                    
                    return pageButtons;
                  })()}
                </div>
                
                <Button 
                  variant="outline" 
                  size="sm"
                  disabled={currentPage === totalPages}
                  onClick={() => {
                    const newPage = Math.min(currentPage + 1, totalPages);
                    setCurrentPage(newPage);
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                  }}
                >
                  –í–ø–µ—Ä–µ–¥
                </Button>
                
                <div className="text-xs text-muted-foreground ml-2">
                  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages} ‚Ä¢ {totalItems} NFT
                </div>
              </div>
            )}
          </div>
        )}
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ NFT - –º–æ–±–∏–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      {selectedNFT && (
        <Dialog open={!!selectedNFT} onOpenChange={(open) => !open && setSelectedNFT(null)}>
          <DialogContent className="max-w-[95%] sm:max-w-md max-h-[90vh] overflow-auto p-3 sm:p-6">
            <DialogHeader className="pb-2 sm:pb-4">
              <DialogTitle className="text-base sm:text-lg">
                {selectedNFT.imagePath && selectedNFT.imagePath.includes('mutant_ape') && !selectedNFT.imagePath.includes('bored_ape') && selectedNFT.collectionName === 'Mutant Ape Yacht Club'
                  ? `Mutant Ape #${selectedNFT.tokenId}`
                  : selectedNFT.imagePath && selectedNFT.imagePath.includes('bored_ape') && !selectedNFT.imagePath.includes('mutant_ape') && selectedNFT.collectionName === 'Bored Ape Yacht Club'
                    ? `Bored Ape #${selectedNFT.tokenId}`
                    : selectedNFT.name}
              </DialogTitle>
              <DialogDescription className="text-[10px] sm:text-xs">
                Token ID: {selectedNFT.tokenId}
              </DialogDescription>
            </DialogHeader>
            
            <div className="flex flex-col gap-3 sm:gap-4">
              <div className="relative aspect-square rounded-md overflow-hidden">
                <NFTImage 
                  src={selectedNFT.imagePath} 
                  alt={selectedNFT.name} 
                  className="w-full h-full object-cover"
                />
                <Badge className={`absolute top-2 right-2 text-xs ${rarityColors[selectedNFT.rarity]}`}>
                  {selectedNFT.rarity}
                </Badge>
                {selectedNFT.forSale && (
                  <Badge className="absolute top-2 left-2 text-xs bg-amber-500">
                    {(() => {
                      try {
                        const price = typeof selectedNFT.price === 'string' ? parseFloat(selectedNFT.price) : selectedNFT.price;
                        return isNaN(price) ? '30' : price.toFixed(0);
                      } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', e);
                        return '30';
                      }
                    })()} USD
                  </Badge>
                )}
                
                {/* –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è Mutant Ape */}
                {selectedNFT.imagePath && selectedNFT.imagePath.includes('mutant_ape') && (
                  <div className="absolute bottom-2 left-2 right-2 bg-black/70 text-white text-xs px-1 py-0.5 flex justify-center">
                    {selectedNFT.imagePath.includes('mutant_ape_official') 
                      ? 'üîµ Official Collection' 
                      : 'üü¢ Regular Collection'}
                  </div>
                )}
              </div>
              
              <div className="space-y-3 sm:space-y-4">
                {/* –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ */}
                <div>
                  <h4 className="text-xs sm:text-sm font-medium mb-0.5 sm:mb-1">–ö–æ–ª–ª–µ–∫—Ü–∏—è</h4>
                  <p className="text-xs text-muted-foreground">
                    {selectedNFT.imagePath && selectedNFT.imagePath.includes('mutant_ape') && !selectedNFT.imagePath.includes('bored_ape')
                      ? 'Mutant Ape Yacht Club'
                      : selectedNFT.imagePath && selectedNFT.imagePath.includes('bored_ape') && !selectedNFT.imagePath.includes('mutant_ape')
                        ? 'Bored Ape Yacht Club'
                        : selectedNFT.collectionName || ''}
                  </p>
                </div>
                <div>
                  <h4 className="text-xs sm:text-sm font-medium mb-0.5 sm:mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                  <p className="text-xs text-muted-foreground">{selectedNFT.description}</p>
                </div>
                
                <div>
                  <h4 className="text-xs font-medium mb-0.5 sm:mb-1">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                  <div className="grid grid-cols-2 gap-y-1 gap-x-2">
                    {selectedNFT.attributes && (
                      <>
                        <div className="flex items-center">
                          <span className="text-[10px] sm:text-xs mr-1">–°–∏–ª–∞:</span>
                          <Badge variant="outline" className="text-[10px] sm:text-xs">{selectedNFT.attributes.power}</Badge>
                        </div>
                        <div className="flex items-center">
                          <span className="text-[10px] sm:text-xs mr-1">–õ–æ–≤–∫–æ—Å—Ç—å:</span>
                          <Badge variant="outline" className="text-[10px] sm:text-xs">{selectedNFT.attributes.agility}</Badge>
                        </div>
                        <div className="flex items-center">
                          <span className="text-[10px] sm:text-xs mr-1">–ú—É–¥—Ä–æ—Å—Ç—å:</span>
                          <Badge variant="outline" className="text-[10px] sm:text-xs">{selectedNFT.attributes.wisdom}</Badge>
                        </div>
                        <div className="flex items-center">
                          <span className="text-[10px] sm:text-xs mr-1">–£–¥–∞—á–∞:</span>
                          <Badge variant="outline" className="text-[10px] sm:text-xs">{selectedNFT.attributes.luck}</Badge>
                        </div>
                      </>
                    )}
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <h4 className="text-[10px] sm:text-xs font-medium mb-0.5">–í–ª–∞–¥–µ–ª–µ—Ü</h4>
                    <p className="text-[10px] sm:text-xs text-muted-foreground">
                      {selectedNFT.owner ? selectedNFT.owner.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      {selectedNFT.ownerId === (currentUser as any)?.id ? ' (–í—ã)' : ''}
                    </p>
                  </div>
                  
                  <div>
                    <h4 className="text-[10px] sm:text-xs font-medium mb-0.5">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</h4>
                    <p className="text-[10px] sm:text-xs text-muted-foreground">{formatDate(selectedNFT.mintedAt)}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <DialogFooter className="flex flex-col sm:flex-row gap-2 mt-3 sm:mt-4">
              {selectedNFT.ownerId === (currentUser as any)?.id ? (
                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü NFT
                <>
                  {selectedNFT.forSale ? (
                    <Button 
                      variant="outline" 
                      onClick={() => cancelSaleMutation.mutate(selectedNFT.id)}
                      disabled={isLoading}
                      className="text-xs sm:text-sm py-1 px-2 h-8 sm:h-9"
                    >
                      {cancelSaleMutation.isPending ? <LoadingSpinner className="mr-1 h-3 w-3" /> : null}
                      –°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏
                    </Button>
                  ) : (
                    <Button 
                      variant="outline" 
                      onClick={() => {
                        setIsSellDialogOpen(true);
                        setSalePrice('');
                      }}
                      disabled={isLoading}
                      className="text-xs sm:text-sm py-1 px-2 h-8 sm:h-9"
                    >
                      –ü—Ä–æ–¥–∞—Ç—å
                    </Button>
                  )}
                  <Button 
                    onClick={() => {
                      setIsGiftDialogOpen(true);
                      setGiftRecipient('');
                    }}
                    disabled={isLoading || selectedNFT.forSale}
                    className="text-xs sm:text-sm py-1 px-2 h-8 sm:h-9"
                  >
                    –ü–æ–¥–∞—Ä–∏—Ç—å
                  </Button>
                </>
              ) : (
                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü NFT
                <>
                  {selectedNFT.forSale && (
                    <Button 
                      onClick={handleBuyNft}
                      disabled={isLoading}
                      className="text-xs sm:text-sm py-1 px-2 h-8 sm:h-9"
                    >
                      {buyNftMutation.isPending ? <LoadingSpinner className="mr-1 h-3 w-3" /> : null}
                      –ö—É–ø–∏—Ç—å –∑–∞ {(() => {
                        try {
                          const price = typeof selectedNFT.price === 'string' ? parseFloat(selectedNFT.price) : selectedNFT.price;
                          return isNaN(price) ? '30' : price.toFixed(0);
                        } catch (e) {
                          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏:', e);
                          return '30';
                        }
                      })()} USD
                    </Button>
                  )}
                </>
              )}
              <Button 
                variant="secondary" 
                onClick={() => setSelectedNFT(null)}
                className="text-xs sm:text-sm py-1 px-2 h-8 sm:h-9"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
      
      {/* –î–∏–∞–ª–æ–≥ –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è NFT - –º–æ–±–∏–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <Dialog open={isGiftDialogOpen} onOpenChange={setIsGiftDialogOpen}>
        <DialogContent className="max-w-[95%] sm:max-w-[425px] p-3 sm:p-6">
          <DialogHeader className="pb-2 sm:pb-4 space-y-1">
            <DialogTitle className="text-base sm:text-lg">–ü–æ–¥–∞—Ä–∏—Ç—å NFT</DialogTitle>
            <DialogDescription className="text-xs">
              –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username), –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å —ç—Ç–æ—Ç NFT.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-3 py-2 sm:py-4">
            <div className="grid sm:grid-cols-4 items-center gap-2 sm:gap-4">
              <Label htmlFor="recipient" className="sm:text-right text-xs sm:text-sm">
                –ü–æ–ª—É—á–∞—Ç–µ–ª—å
              </Label>
              <Input
                id="recipient"
                placeholder="username"
                value={giftRecipient}
                onChange={(e) => setGiftRecipient(e.target.value)}
                className="sm:col-span-3 h-8 sm:h-9 text-xs sm:text-sm"
              />
            </div>
          </div>
          <DialogFooter className="flex flex-col sm:flex-row gap-2 sm:gap-2 mt-2 sm:mt-0">
            <Button 
              variant="secondary" 
              onClick={() => setIsGiftDialogOpen(false)}
              disabled={giftNftMutation.isPending}
              className="text-xs sm:text-sm py-1 px-3 h-8 sm:h-9"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleGiftNft}
              disabled={giftNftMutation.isPending || !giftRecipient}
              className="text-xs sm:text-sm py-1 px-3 h-8 sm:h-9"
            >
              {giftNftMutation.isPending ? <LoadingSpinner className="mr-1 h-3 w-3 sm:mr-2 sm:h-4 sm:w-4" /> : null}
              –ü–æ–¥–∞—Ä–∏—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* –î–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ NFT - –º–æ–±–∏–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <Dialog open={isSellDialogOpen} onOpenChange={setIsSellDialogOpen}>
        <DialogContent className="max-w-[95%] sm:max-w-[425px] p-3 sm:p-6">
          <DialogHeader className="pb-2 sm:pb-4 space-y-1">
            <DialogTitle className="text-base sm:text-lg">–ü—Ä–æ–¥–∞—Ç—å NFT</DialogTitle>
            <DialogDescription className="text-xs">
              –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ USD, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç NFT.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-3 py-2 sm:py-4">
            <div className="grid sm:grid-cols-4 items-center gap-2 sm:gap-4">
              <Label htmlFor="price" className="sm:text-right text-xs sm:text-sm">
                –¶–µ–Ω–∞ (USD)
              </Label>
              <Input
                id="price"
                type="number"
                placeholder="0.00"
                value={salePrice}
                onChange={(e) => setSalePrice(e.target.value)}
                className="sm:col-span-3 h-8 sm:h-9 text-xs sm:text-sm"
                min="0.01"
                step="0.01"
              />
            </div>
          </div>
          <DialogFooter className="flex flex-col sm:flex-row gap-2 sm:gap-2 mt-2 sm:mt-0">
            <Button 
              variant="secondary" 
              onClick={() => setIsSellDialogOpen(false)}
              disabled={sellNftMutation.isPending}
              className="text-xs sm:text-sm py-1 px-3 h-8 sm:h-9"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleSellNft}
              disabled={sellNftMutation.isPending || !salePrice || isNaN(parseFloat(salePrice)) || parseFloat(salePrice) <= 0}
              className="text-xs sm:text-sm py-1 px-3 h-8 sm:h-9"
            >
              {sellNftMutation.isPending ? <LoadingSpinner className="mr-1 h-3 w-3 sm:mr-2 sm:h-4 sm:w-4" /> : null}
              –í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};
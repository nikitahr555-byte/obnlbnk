/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 * –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

import fs from 'fs';
import path from 'path';
import http from 'http';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function colorLog(color, ...messages) {
  console.log(colors[color], ...messages, colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
function printResult(test, result, details = null) {
  if (result === true) {
    colorLog('green', `‚úÖ ${test}`);
  } else if (result === false) {
    colorLog('red', `‚ùå ${test}`);
    if (details) {
      console.log(`   ${details}`);
    }
  } else if (result === 'warning') {
    colorLog('yellow', `‚ö†Ô∏è ${test}`);
    if (details) {
      console.log(`   ${details}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerAvailability(port) {
  return new Promise((resolve) => {
    const req = http.request({
      hostname: 'localhost',
      port,
      path: '/',
      method: 'GET',
      timeout: 3000
    }, (res) => {
      resolve(res.statusCode < 500); // –°—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ 5xx
    });
    
    req.on('error', () => {
      resolve(false);
    });
    
    req.on('timeout', () => {
      req.destroy();
      resolve(false);
    });
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤
function checkDirectory(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      return { exists: false, count: 0 };
    }
    
    const stats = fs.statSync(dirPath);
    if (!stats.isDirectory()) {
      return { exists: false, count: 0 };
    }
    
    const files = fs.readdirSync(dirPath).filter(
      file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.svg')
    );
    
    return { exists: true, count: files.length };
  } catch (error) {
    return { exists: false, count: 0, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
function checkFile(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
async function checkMainServer() {
  colorLog('bright', '\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  const isAvailable = await checkServerAvailability(5000);
  printResult('–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000', isAvailable);
  
  if (!isAvailable) {
    return false;
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function checkNFTImageServer() {
  colorLog('bright', '\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  let nftServerPort = 8081; // –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (checkFile('./nft-server-port.txt')) {
    try {
      const portStr = fs.readFileSync('./nft-server-port.txt', 'utf8').trim();
      const port = parseInt(portStr, 10);
      if (!isNaN(port) && port > 0) {
        nftServerPort = port;
        printResult('–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞', true, `–ü–æ—Ä—Ç: ${nftServerPort}`);
      }
    } catch (error) {
      printResult('–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞', false, error.message);
    }
  } else {
    printResult('–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning', '–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8081');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NFT —Å–µ—Ä–≤–µ—Ä–∞
  const isAvailable = await checkServerAvailability(nftServerPort);
  printResult(`NFT —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${nftServerPort}`, isAvailable);
  
  return { isAvailable, port: nftServerPort };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π NFT
function checkNFTDirectories() {
  colorLog('bright', '\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ NFT...');
  
  const directories = {
    'bored_ape_nft': path.join(process.cwd(), 'bored_ape_nft'),
    'mutant_ape_nft': path.join(process.cwd(), 'mutant_ape_nft'),
    'mutant_ape_official': path.join(process.cwd(), 'mutant_ape_official'),
    'nft_assets/mutant_ape': path.join(process.cwd(), 'nft_assets', 'mutant_ape')
  };
  
  let totalFiles = 0;
  let allDirectoriesExist = true;
  
  for (const [dirName, dirPath] of Object.entries(directories)) {
    const result = checkDirectory(dirPath);
    
    if (result.exists) {
      printResult(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirName}`, true, `–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.count}`);
      totalFiles += result.count;
    } else {
      allDirectoriesExist = false;
      if (result.error) {
        printResult(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirName}`, false, `–û—à–∏–±–∫–∞: ${result.error}`);
      } else {
        printResult(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirName}`, false, `–ü—É—Ç—å: ${dirPath}`);
      }
    }
  }
  
  return { allDirectoriesExist, totalFiles };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–¥–∞
function checkClientCode() {
  colorLog('bright', '\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–¥–∞ NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞...');
  
  const files = {
    'image-utils.ts': './client/src/lib/image-utils.ts',
    'nft-marketplace.tsx': './client/src/components/nft/nft-marketplace.tsx',
    'nft-gallery.tsx': './client/src/components/nft/nft-gallery.tsx'
  };
  
  let allFilesExist = true;
  
  for (const [fileName, filePath] of Object.entries(files)) {
    const exists = checkFile(filePath);
    printResult(`–§–∞–π–ª ${fileName}`, exists, exists ? null : `–ü—É—Ç—å: ${filePath}`);
    
    if (!exists) {
      allFilesExist = false;
    }
  }
  
  return allFilesExist;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞
function checkServerCode() {
  colorLog('bright', '\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞ NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞...');
  
  const files = {
    'nft-controller.ts': './server/controllers/nft-controller.ts',
    'nft-marketplace-controller.ts': './server/controllers/nft-marketplace-controller.ts',
    'run-nft-server.js': './run-nft-server.js'
  };
  
  let allFilesExist = true;
  
  for (const [fileName, filePath] of Object.entries(files)) {
    const exists = checkFile(filePath);
    printResult(`–§–∞–π–ª ${fileName}`, exists, exists ? null : `–ü—É—Ç—å: ${filePath}`);
    
    if (!exists) {
      allFilesExist = false;
    }
  }
  
  return allFilesExist;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function checkActiveProcesses() {
  colorLog('bright', '\nüîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
  console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:');
  console.log('  ps aux | grep node   - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
  console.log('  lsof -i :5000        - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000');
  console.log('  lsof -i :8081        - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8081 (NFT —Å–µ—Ä–≤–µ—Ä)');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  colorLog('cyan', '\nüî¨ –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞...');
  
  const mainServerOk = await checkMainServer();
  const { isAvailable: nftServerOk, port: nftServerPort } = await checkNFTImageServer();
  const { allDirectoriesExist, totalFiles } = checkNFTDirectories();
  const clientCodeOk = checkClientCode();
  const serverCodeOk = checkServerCode();
  
  colorLog('bright', '\nüìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
  printResult('–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä', mainServerOk);
  printResult('NFT —Å–µ—Ä–≤–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', nftServerOk);
  printResult('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏', allDirectoriesExist, `–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  printResult('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥', clientCodeOk);
  printResult('–°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–¥', serverCodeOk);
  
  checkActiveProcesses();
  
  // –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
  console.log('\n');
  if (mainServerOk && nftServerOk && allDirectoriesExist && clientCodeOk && serverCodeOk) {
    colorLog('green', '‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!');
  } else {
    colorLog('yellow', '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º.');
    
    if (!mainServerOk) {
      colorLog('red', '  - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    if (!nftServerOk) {
      colorLog('red', '  - NFT —Å–µ—Ä–≤–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    if (!allDirectoriesExist) {
      colorLog('red', '  - –ù–µ –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
    
    if (!clientCodeOk) {
      colorLog('red', '  - –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∫–æ–¥–æ–º');
    }
    
    if (!serverCodeOk) {
      colorLog('red', '  - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –∫–æ–¥–æ–º');
    }
    
    if (totalFiles === 0) {
      colorLog('red', '  - –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è NFT');
    }
  }
  
  console.log('\n');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
main().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
});
/**
 * –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ Bored Ape –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
 * –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
 */

const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const {
  PGHOST,
  PGPORT,
  PGUSER,
  PGPASSWORD,
  PGDATABASE,
  DATABASE_URL
} = process.env;

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: DATABASE_URL || `postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}`,
  ssl: { rejectUnauthorized: false } // –î–ª—è Neon PostgreSQL
});

async function fixCollections() {
  try {
    console.log('üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT');
    
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query('BEGIN');
      console.log('üîÑ –ù–∞—á–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è');
      
      // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ Bored Ape –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape
      // (–∫–æ–ª–ª–µ–∫—Ü–∏—è 2) –Ω–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å–æ–¥–µ—Ä–∂–∏—Ç bored_ape
      const removeBored = await client.query(`
        DELETE FROM nfts 
        WHERE collection_id = 2 
        AND image_path LIKE '%/bored_ape%'
        RETURNING id, name, image_path
      `);
      
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${removeBored.rowCount} Bored Ape –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape`);
      if (removeBored.rowCount > 0) {
        console.log('üìù –ü—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö NFT:');
        removeBored.rows.slice(0, 5).forEach(nft => {
          console.log(`   - ID: ${nft.id}, –ò–º—è: ${nft.name}, –ü—É—Ç—å: ${nft.image_path}`);
        });
      }
      
      // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ Mutant Ape –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Bored Ape
      const removeMutant = await client.query(`
        DELETE FROM nfts 
        WHERE collection_id = 1 
        AND image_path LIKE '%/mutant_ape%'
        RETURNING id, name, image_path
      `);
      
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${removeMutant.rowCount} Mutant Ape –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Bored Ape`);
      if (removeMutant.rowCount > 0) {
        console.log('üìù –ü—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö NFT:');
        removeMutant.rows.slice(0, 5).forEach(nft => {
          console.log(`   - ID: ${nft.id}, –ò–º—è: ${nft.name}, –ü—É—Ç—å: ${nft.image_path}`);
        });
      }
      
      // 3. –û—á–∏—â–∞–µ–º –≤—Å–µ NFT —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ —Å–≤–æ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
      const cleanNames = await client.query(`
        DELETE FROM nfts 
        WHERE 
          (collection_id = 1 AND name LIKE 'Mutant Ape%') OR
          (collection_id = 2 AND name LIKE 'Bored Ape%')
        RETURNING id, name, image_path
      `);
      
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${cleanNames.rowCount} NFT —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏`);
      if (cleanNames.rowCount > 0) {
        console.log('üìù –ü—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö NFT:');
        cleanNames.rows.slice(0, 5).forEach(nft => {
          console.log(`   - ID: ${nft.id}, –ò–º—è: ${nft.name}, –ü—É—Ç—å: ${nft.image_path}`);
        });
      }
      
      // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ token_id –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const removeDuplicates = await client.query(`
        WITH duplicates AS (
          SELECT id, collection_id, token_id, 
                 ROW_NUMBER() OVER (PARTITION BY collection_id, token_id ORDER BY id) as row_num
          FROM nfts
        )
        DELETE FROM nfts 
        WHERE id IN (
          SELECT id FROM duplicates WHERE row_num > 1
        )
        RETURNING id, collection_id, token_id, name
      `);
      
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${removeDuplicates.rowCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ NFT`);
      if (removeDuplicates.rowCount > 0) {
        console.log('üìù –ü—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
        removeDuplicates.rows.slice(0, 5).forEach(nft => {
          console.log(`   - ID: ${nft.id}, –ö–æ–ª–ª–µ–∫—Ü–∏—è: ${nft.collection_id}, TokenID: ${nft.token_id}, –ò–º—è: ${nft.name}`);
        });
      }
      
      // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ NFT –≤ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
      const updateNames = await client.query(`
        UPDATE nfts 
        SET name = 
          CASE 
            WHEN collection_id = 1 THEN 'Bored Ape #' || token_id 
            WHEN collection_id = 2 THEN 'Mutant Ape #' || token_id
            ELSE name
          END
        WHERE (collection_id = 1 OR collection_id = 2)
        RETURNING id, collection_id, name
      `);
      
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateNames.rowCount} –∏–º–µ–Ω NFT`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const boredCount = await client.query(`
        SELECT COUNT(*) FROM nfts WHERE collection_id = 1
      `);
      
      const mutantCount = await client.query(`
        SELECT COUNT(*) FROM nfts WHERE collection_id = 2
      `);
      
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:`);
      console.log(`   - Bored Ape Yacht Club: ${boredCount.rows[0].count} NFT`);
      console.log(`   - Mutant Ape Yacht Club: ${mutantCount.rows[0].count} NFT`);
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query('COMMIT');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (err) {
      await client.query('ROLLBACK');
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', err);
      throw err;
    } finally {
      client.release();
      console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  } finally {
    pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
fixCollections();
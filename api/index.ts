import type { VercelRequest, VercelResponse } from '@vercel/node';
import postgres from 'postgres';
import bcrypt from 'bcryptjs';
import { scrypt, timingSafeEqual } from 'crypto';
import { promisify } from 'util';

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
let sql: any = null;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è scrypt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä–æ–ª–µ–π
const scryptAsync = promisify(scrypt);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
async function verifyPassword(supplied: string, stored: string): Promise<boolean> {
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º bcrypt (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if (stored.startsWith('$2')) {
      console.log('üîë [VERCEL] Using bcrypt verification');
      return await bcrypt.compare(supplied, stored);
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º scrypt (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ç–æ—á–∫–æ–π)
    if (stored.includes('.')) {
      console.log('üîë [VERCEL] Using scrypt verification');
      const [hashed, salt] = stored.split('.');
      const hashedBuf = Buffer.from(hashed, 'hex');
      const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
      return timingSafeEqual(hashedBuf, suppliedBuf);
    }
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω)
    console.log('üîë [VERCEL] Using plain text comparison');
    return supplied === stored;
    
  } catch (error) {
    console.error('‚ùå [VERCEL] Password verification error:', error);
    return false;
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
function extractUserFromCookie(req: VercelRequest): any {
  try {
    const cookies = req.headers.cookie || '';
    const userDataMatch = cookies.match(/user_data=([^;]+)/);
    
    if (!userDataMatch) {
      return null;
    }

    const userData = JSON.parse(Buffer.from(userDataMatch[1], 'base64').toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (7 –¥–Ω–µ–π)
    if (Date.now() - userData.timestamp > 7 * 24 * 60 * 60 * 1000) {
      return null;
    }

    return userData;
  } catch (error) {
    console.error('‚ùå [VERCEL] Cookie extraction error:', error);
    return null;
  }
}

function initDatabase() {
  if (!sql && process.env.DATABASE_URL) {
    try {
      console.log('üîå [VERCEL] Initializing database connection...');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const url = new URL(process.env.DATABASE_URL);
      console.log(`üîå [VERCEL] Host: ${url.hostname}`);
      console.log(`üîå [VERCEL] Database: ${url.pathname.substring(1)}`);
      console.log(`üîå [VERCEL] Username: ${url.username}`);
      
      // –î–ª—è Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π postgres –∫–ª–∏–µ–Ω—Ç
      sql = postgres(process.env.DATABASE_URL, {
        ssl: 'require',
        max: 1,
        idle_timeout: 20,
        connect_timeout: 30,
        prepare: false,
        transform: {
          undefined: null
        },
        onnotice: () => {} // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      });
      
      console.log('‚úÖ [VERCEL] Database connection initialized');
    } catch (error) {
      console.error('‚ùå [VERCEL] Database initialization failed:', error);
      return null;
    }
  }
  return sql;
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
async function testDatabaseConnection(db: any) {
  try {
    console.log('üîç [VERCEL] Testing database connection and checking tables...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await db`SELECT 1 as test`;
    console.log('‚úÖ [VERCEL] Basic connection successful');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    const tableExists = await db`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      );
    `;
    console.log(`üîç [VERCEL] Users table exists: ${tableExists[0]?.exists || false}`);
    
    if (tableExists[0]?.exists) {
      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCount = await db`SELECT COUNT(*) as count FROM users`;
      console.log(`üë• [VERCEL] Total users in database: ${userCount[0]?.count || 0}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const sampleUsers = await db`SELECT username, LENGTH(password) as pass_len FROM users LIMIT 5`;
      console.log(`üìù [VERCEL] Sample users:`, sampleUsers.map(u => `${u.username} (pass_len: ${u.pass_len})`));
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå [VERCEL] Database test failed:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    console.log(`üöÄ [VERCEL] ${req.method} ${req.url}`);
    
    // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }

    const url = req.url || '';

    // Health check endpoint
    if (url.includes('/api/health')) {
      const hasDbUrl = !!process.env.DATABASE_URL;
      const db = initDatabase();
      let dbStatus = 'not_initialized';
      
      if (db) {
        try {
          const isConnected = await testDatabaseConnection(db);
          dbStatus = isConnected ? 'connected' : 'connection_failed';
        } catch (error) {
          dbStatus = 'test_failed';
        }
      }
      
      return res.json({
        status: 'ok',
        database_url_present: hasDbUrl,
        database_status: dbStatus,
        timestamp: new Date().toISOString(),
        environment: 'vercel'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå [VERCEL] DATABASE_URL not found in environment variables');
      return res.status(500).json({ 
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        debug: 'DATABASE_URL missing from environment'
      });
    }

    const db = initDatabase();
    if (!db) {
      return res.status(500).json({ 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        debug: 'Database initialization failed'
      });
    }

    // LOGIN - —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π
    if (url.includes('/api/login') && req.method === 'POST') {
      try {
        const { username, password } = req.body;
        console.log(`üîê [VERCEL] Login attempt for user: ${username}`);
        
        if (!username || !password) {
          return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('üîç [VERCEL] Checking database connection and tables...');
        await testDatabaseConnection(db);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        console.log('üîç [VERCEL] Searching for user in database...');
        const users = await Promise.race([
          db`SELECT id, username, password, is_regulator FROM users WHERE username = ${username}`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Database query timeout')), 15000))
        ]);
        
        console.log(`üìä [VERCEL] Found ${Array.isArray(users) ? users.length : 0} users`);
        
        if (!Array.isArray(users) || users.length === 0) {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ usernames –≤ –ë–î
          try {
            const allUsers = await db`SELECT username FROM users LIMIT 10`;
            console.log(`üîç [VERCEL] Available usernames:`, allUsers.map(u => u.username));
          } catch (e) {
            console.log(`‚ùå [VERCEL] Could not fetch usernames for debugging:`, e);
          }
          
          return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const user = users[0];
        console.log(`‚úÖ [VERCEL] User found: ${user.username}`);
        console.log(`üîç [VERCEL] Password format: ${user.password.startsWith('$2') ? 'bcrypt' : user.password.includes('.') ? 'scrypt' : 'plain'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        console.log('üîë [VERCEL] Verifying password...');
        const isValidPassword = await verifyPassword(password, user.password);
        
        if (!isValidPassword) {
          console.log('‚ùå [VERCEL] Invalid password');
          console.log(`üîç [VERCEL] Password hash preview: ${user.password.substring(0, 20)}...`);
          return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        console.log('‚úÖ [VERCEL] Password verified successfully');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = { id: user.id, username: user.username, timestamp: Date.now() };
        const token = Buffer.from(JSON.stringify(userData)).toString('base64');
        
        res.setHeader('Set-Cookie', `user_data=${token}; HttpOnly; Secure; SameSite=Lax; Max-Age=604800; Path=/`);
        
        console.log(`‚úÖ [VERCEL] Login successful for user: ${user.username}`);
        return res.json({
          id: user.id,
          username: user.username,
          is_regulator: user.is_regulator || false
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Login error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // REGISTER - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å bcrypt —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if (url.includes('/api/register') && req.method === 'POST') {
      try {
        const { username, password } = req.body;
        console.log(`üìù [VERCEL] Registration attempt for user: ${username}`);
        
        if (!username || !password) {
          return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        await testDatabaseConnection(db);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUsers = await db`SELECT id FROM users WHERE username = ${username}`;
        
        if (existingUsers.length > 0) {
          console.log('‚ùå [VERCEL] User already exists');
          return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è bcrypt
        console.log('üîë [VERCEL] Hashing password with bcrypt...');
        const hashedPassword = await bcrypt.hash(password, 12);
        console.log(`üîç [VERCEL] Generated password hash: ${hashedPassword.substring(0, 20)}...`);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = await db`
          INSERT INTO users (username, password, is_regulator, regulator_balance, nft_generation_count)
          VALUES (${username}, ${hashedPassword}, false, '0', 0)
          RETURNING id, username, is_regulator
        `;

        const user = newUser[0];
        console.log(`‚úÖ [VERCEL] User created: ${user.username}`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
        const userData = { id: user.id, username: user.username, timestamp: Date.now() };
        const token = Buffer.from(JSON.stringify(userData)).toString('base64');
        
        res.setHeader('Set-Cookie', `user_data=${token}; HttpOnly; Secure; SameSite=Lax; Max-Age=604800; Path=/`);
        
        return res.status(201).json({
          id: user.id,
          username: user.username,
          is_regulator: user.is_regulator || false
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Register error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // LOGOUT - –æ—á–∏—Å—Ç–∫–∞ cookie
    if (url.includes('/api/logout') && req.method === 'POST') {
      console.log('üö™ [VERCEL] Logout request');
      res.setHeader('Set-Cookie', 'user_data=; HttpOnly; Secure; SameSite=Lax; Max-Age=0; Path=/');
      return res.status(200).end();
    }

    // USER - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ cookie
    if (url.includes('/api/user') && req.method === 'GET') {
      try {
        console.log('üë§ [VERCEL] User check request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie found');
          return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        }

        console.log(`üîç [VERCEL] Checking user: ${userData.username}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const users = await Promise.race([
          db`SELECT id, username, is_regulator FROM users WHERE id = ${userData.id} AND username = ${userData.username}`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('User check timeout')), 8000))
        ]);
        
        if (!Array.isArray(users) || users.length === 0) {
          console.log('‚ùå [VERCEL] User not found in database');
          return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = users[0];
        console.log(`‚úÖ [VERCEL] User verified: ${user.username}`);
        return res.json({
          id: user.id,
          username: user.username,
          is_regulator: user.is_regulator || false
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] User check error:', error);
        return res.status(401).json({ 
          message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // CARDS - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (url.includes('/api/cards') && req.method === 'GET') {
      try {
        console.log('üí≥ [VERCEL] Cards request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie for cards request');
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        console.log(`üîç [VERCEL] Getting cards for user: ${userData.username}`);

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const cards = await Promise.race([
          db`SELECT * FROM cards WHERE user_id = ${userData.id} ORDER BY created_at DESC`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Cards query timeout')), 8000))
        ]);
        
        console.log(`üìä [VERCEL] Found ${Array.isArray(cards) ? cards.length : 0} cards for user`);
        return res.json(cards || []);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Cards error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // TRANSACTIONS - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (url.includes('/api/transactions') && req.method === 'GET') {
      try {
        console.log('üìä [VERCEL] Transactions request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        console.log(`üîç [VERCEL] Getting transactions for user: ${userData.username}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const transactions = await Promise.race([
          db`SELECT * FROM transactions WHERE user_id = ${userData.id} ORDER BY created_at DESC LIMIT 50`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Transactions query timeout')), 8000))
        ]);
        
        console.log(`üìä [VERCEL] Found ${Array.isArray(transactions) ? transactions.length : 0} transactions for user`);
        return res.json(transactions || []);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Transactions error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // NFT Collections - –ø–æ–ª—É—á–µ–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π
    if (url.includes('/api/nft/collections') && req.method === 'GET') {
      try {
        console.log('üé® [VERCEL] NFT Collections request');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const collections = [
          {
            id: 1,
            name: 'Bored Ape Yacht Club',
            slug: 'bored_ape_yacht_club',
            description: '–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –æ–±–µ–∑—å—è–Ω',
            floor_price: '10.5',
            total_items: 10000,
            image_url: '/api/nft/image/bored_ape_yacht_club/1'
          },
          {
            id: 2,
            name: 'Mutant Ape Yacht Club',
            slug: 'mutant_ape_yacht_club',
            description: '–ú—É—Ç–∞–Ω—Ç—Å–∫–∏–µ –æ–±–µ–∑—å—è–Ω—ã –∏–∑ BAYC',
            floor_price: '5.2',
            total_items: 20000,
            image_url: '/api/nft/image/mutant_ape_yacht_club/1'
          }
        ];
        
        return res.json(collections);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] NFT Collections error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // Exchange Rates - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    if (url.includes('/api/rates') && req.method === 'GET') {
      console.log('üí± [VERCEL] Exchange rates request');
      return res.json({
        usdToUah: 41.0,
        btcToUsd: 100000,
        ethToUsd: 4000,
        timestamp: new Date().toISOString()
      });
    }

    // WebSocket endpoint (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Vercel)
    if (url.includes('/ws')) {
      console.log('üîå [VERCEL] WebSocket request (not supported)');
      return res.status(404).json({ message: 'WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Vercel' });
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö API –ø—É—Ç–µ–π - —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (url.startsWith('/api/')) {
      return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // Default fallback
    console.log(`‚ùì [VERCEL] Unhandled route: ${req.method} ${url}`);
    return res.status(404).json({ 
      message: "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
      url: url,
      method: req.method
    });

  } catch (error) {
    console.error('‚ùå [VERCEL] Handler error:', error);
    return res.status(500).json({ 
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
}
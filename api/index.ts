import type { VercelRequest, VercelResponse } from '@vercel/node';
import postgres from 'postgres';
import bcrypt from 'bcryptjs';
import { scrypt, timingSafeEqual } from 'crypto';
import { promisify } from 'util';

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
let sql: any = null;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è scrypt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä–æ–ª–µ–π
const scryptAsync = promisify(scrypt);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
async function verifyPassword(supplied: string, stored: string): Promise<boolean> {
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º bcrypt (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if (stored.startsWith('$2')) {
      console.log('üîë [VERCEL] Using bcrypt verification');
      return await bcrypt.compare(supplied, stored);
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º scrypt (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ç–æ—á–∫–æ–π)
    if (stored.includes('.')) {
      console.log('üîë [VERCEL] Using scrypt verification');
      const [hashed, salt] = stored.split('.');
      const hashedBuf = Buffer.from(hashed, 'hex');
      const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
      return timingSafeEqual(hashedBuf, suppliedBuf);
    }
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω)
    console.log('üîë [VERCEL] Using plain text comparison');
    return supplied === stored;
    
  } catch (error) {
    console.error('‚ùå [VERCEL] Password verification error:', error);
    return false;
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
function extractUserFromCookie(req: VercelRequest): any {
  try {
    const cookies = req.headers.cookie || '';
    console.log(`üç™ [VERCEL] Checking cookies: ${cookies ? cookies.substring(0, 100) + '...' : 'No cookies found'}`);
    
    const userDataMatch = cookies.match(/user_data=([^;]+)/);
    
    if (!userDataMatch) {
      console.log('‚ùå [VERCEL] No user_data cookie found');
      return null;
    }

    console.log(`üç™ [VERCEL] Found user_data cookie, extracting data...`);
    const userData = JSON.parse(Buffer.from(userDataMatch[1], 'base64').toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (7 –¥–Ω–µ–π)
    const ageInMs = Date.now() - userData.timestamp;
    const ageInHours = Math.floor(ageInMs / (1000 * 60 * 60));
    console.log(`üïê [VERCEL] Cookie age: ${ageInHours} hours`);
    
    if (ageInMs > 7 * 24 * 60 * 60 * 1000) {
      console.log('‚è∞ [VERCEL] Cookie expired');
      return null;
    }

    console.log(`‚úÖ [VERCEL] Valid cookie found for user: ${userData.username}`);
    return userData;
  } catch (error) {
    console.error('‚ùå [VERCEL] Cookie extraction error:', error);
    return null;
  }
}

function initDatabase() {
  if (!sql && process.env.DATABASE_URL) {
    try {
      console.log('üîå [VERCEL] Initializing database connection...');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const url = new URL(process.env.DATABASE_URL);
      console.log(`üîå [VERCEL] Host: ${url.hostname}`);
      console.log(`üîå [VERCEL] Database: ${url.pathname.substring(1)}`);
      console.log(`üîå [VERCEL] Username: ${url.username}`);
      
      // –î–ª—è Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π postgres –∫–ª–∏–µ–Ω—Ç
      sql = postgres(process.env.DATABASE_URL, {
        ssl: 'require',
        max: 1,
        idle_timeout: 20,
        connect_timeout: 30,
        prepare: false,
        transform: {
          undefined: null
        },
        onnotice: () => {} // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      });
      
      console.log('‚úÖ [VERCEL] Database connection initialized');
    } catch (error) {
      console.error('‚ùå [VERCEL] Database initialization failed:', error);
      return null;
    }
  }
  return sql;
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
async function testDatabaseConnection(db: any) {
  try {
    console.log('üîç [VERCEL] Testing database connection and checking tables...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await db`SELECT 1 as test`;
    console.log('‚úÖ [VERCEL] Basic connection successful');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    const tableExists = await db`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      );
    `;
    console.log(`üîç [VERCEL] Users table exists: ${tableExists[0]?.exists || false}`);
    
    if (tableExists[0]?.exists) {
      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCount = await db`SELECT COUNT(*) as count FROM users`;
      console.log(`üë• [VERCEL] Total users in database: ${userCount[0]?.count || 0}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const sampleUsers = await db`SELECT username, LENGTH(password) as pass_len FROM users LIMIT 5`;
      console.log(`üìù [VERCEL] Sample users:`, sampleUsers.map(u => `${u.username} (pass_len: ${u.pass_len})`));
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå [VERCEL] Database test failed:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    console.log(`üöÄ [VERCEL] ${req.method} ${req.url}`);
    
    // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }

    const url = req.url || '';

    // Health check endpoint
    if (url.includes('/api/health')) {
      const hasDbUrl = !!process.env.DATABASE_URL;
      const db = initDatabase();
      let dbStatus = 'not_initialized';
      
      if (db) {
        try {
          const isConnected = await testDatabaseConnection(db);
          dbStatus = isConnected ? 'connected' : 'connection_failed';
        } catch (error) {
          dbStatus = 'test_failed';
        }
      }
      
      return res.json({
        status: 'ok',
        database_url_present: hasDbUrl,
        database_status: dbStatus,
        timestamp: new Date().toISOString(),
        environment: 'vercel'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå [VERCEL] DATABASE_URL not found in environment variables');
      return res.status(500).json({ 
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        debug: 'DATABASE_URL missing from environment'
      });
    }

    const db = initDatabase();
    if (!db) {
      return res.status(500).json({ 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        debug: 'Database initialization failed'
      });
    }

    // LOGIN - —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π
    if (url.includes('/api/login') && req.method === 'POST') {
      try {
        const { username, password } = req.body;
        console.log(`üîê [VERCEL] Login attempt for user: ${username}`);
        
        if (!username || !password) {
          return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('üîç [VERCEL] Checking database connection and tables...');
        await testDatabaseConnection(db);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        console.log('üîç [VERCEL] Searching for user in database...');
        const users = await Promise.race([
          db`SELECT id, username, password, is_regulator FROM users WHERE username = ${username}`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Database query timeout')), 15000))
        ]);
        
        console.log(`üìä [VERCEL] Found ${Array.isArray(users) ? users.length : 0} users`);
        
        if (!Array.isArray(users) || users.length === 0) {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ usernames –≤ –ë–î
          try {
            const allUsers = await db`SELECT username FROM users LIMIT 10`;
            console.log(`üîç [VERCEL] Available usernames:`, allUsers.map(u => u.username));
          } catch (e) {
            console.log(`‚ùå [VERCEL] Could not fetch usernames for debugging:`, e);
          }
          
          return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const user = users[0];
        console.log(`‚úÖ [VERCEL] User found: ${user.username}`);
        console.log(`üîç [VERCEL] Password format: ${user.password.startsWith('$2') ? 'bcrypt' : user.password.includes('.') ? 'scrypt' : 'plain'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        console.log('üîë [VERCEL] Verifying password...');
        const isValidPassword = await verifyPassword(password, user.password);
        
        if (!isValidPassword) {
          console.log('‚ùå [VERCEL] Invalid password');
          console.log(`üîç [VERCEL] Password hash preview: ${user.password.substring(0, 20)}...`);
          return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        console.log('‚úÖ [VERCEL] Password verified successfully');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = { id: user.id, username: user.username, timestamp: Date.now() };
        const token = Buffer.from(JSON.stringify(userData)).toString('base64');
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫–∏ –¥–ª—è Vercel
        const protocol = req.headers['x-forwarded-proto'] || (req.headers.host?.includes('vercel') ? 'https' : 'http');
        const isHttps = protocol === 'https';
        
        console.log(`üîç [VERCEL] Request details: host=${req.headers.host}, proto=${req.headers['x-forwarded-proto']}, isHttps=${isHttps}`);
        
        const cookieOptions = [
          `user_data=${token}`,
          'HttpOnly',
          'SameSite=Lax',
          'Max-Age=604800',
          'Path=/'
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º Secure —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
        if (isHttps) {
          cookieOptions.splice(2, 0, 'Secure');
        }
        
        const cookieString = cookieOptions.join('; ');
        console.log(`üç™ [VERCEL] Setting cookie: ${cookieString}`);
        res.setHeader('Set-Cookie', cookieString);
        
        console.log(`‚úÖ [VERCEL] Login successful for user: ${user.username}`);
        return res.json({
          id: user.id,
          username: user.username,
          is_regulator: user.is_regulator || false
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Login error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // REGISTER - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å bcrypt —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if (url.includes('/api/register') && req.method === 'POST') {
      try {
        const { username, password } = req.body;
        console.log(`üìù [VERCEL] Registration attempt for user: ${username}`);
        
        if (!username || !password) {
          return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        await testDatabaseConnection(db);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUsers = await db`SELECT id FROM users WHERE username = ${username}`;
        
        if (existingUsers.length > 0) {
          console.log('‚ùå [VERCEL] User already exists');
          return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è bcrypt
        console.log('üîë [VERCEL] Hashing password with bcrypt...');
        const hashedPassword = await bcrypt.hash(password, 12);
        console.log(`üîç [VERCEL] Generated password hash: ${hashedPassword.substring(0, 20)}...`);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = await db`
          INSERT INTO users (username, password, is_regulator, regulator_balance, nft_generation_count)
          VALUES (${username}, ${hashedPassword}, false, '0', 0)
          RETURNING id, username, is_regulator
        `;

        const user = newUser[0];
        console.log(`‚úÖ [VERCEL] User created: ${user.username}`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
        const userData = { id: user.id, username: user.username, timestamp: Date.now() };
        const token = Buffer.from(JSON.stringify(userData)).toString('base64');
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫–∏ –¥–ª—è Vercel
        const protocol = req.headers['x-forwarded-proto'] || (req.headers.host?.includes('vercel') ? 'https' : 'http');
        const isHttps = protocol === 'https';
        
        console.log(`üîç [VERCEL] Registration cookie - host=${req.headers.host}, proto=${req.headers['x-forwarded-proto']}, isHttps=${isHttps}`);
        
        const cookieOptions = [
          `user_data=${token}`,
          'HttpOnly',
          'SameSite=Lax',
          'Max-Age=604800', 
          'Path=/'
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º Secure —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
        if (isHttps) {
          cookieOptions.splice(2, 0, 'Secure');
        }
        
        const cookieString = cookieOptions.join('; ');
        console.log(`üç™ [VERCEL] Setting registration cookie: ${cookieString}`);
        res.setHeader('Set-Cookie', cookieString);
        
        return res.status(201).json({
          id: user.id,
          username: user.username,
          is_regulator: user.is_regulator || false
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Register error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // LOGOUT - –æ—á–∏—Å—Ç–∫–∞ cookie
    if (url.includes('/api/logout') && req.method === 'POST') {
      console.log('üö™ [VERCEL] Logout request');
      res.setHeader('Set-Cookie', 'user_data=; HttpOnly; Secure; SameSite=Lax; Max-Age=0; Path=/');
      return res.status(200).end();
    }

    // USER - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ cookie
    if (url.includes('/api/user') && req.method === 'GET') {
      try {
        console.log('üë§ [VERCEL] User check request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie found');
          return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        }

        console.log(`üîç [VERCEL] Checking user: ${userData.username}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const users = await Promise.race([
          db`SELECT id, username, is_regulator FROM users WHERE id = ${userData.id} AND username = ${userData.username}`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('User check timeout')), 8000))
        ]);
        
        if (!Array.isArray(users) || users.length === 0) {
          console.log('‚ùå [VERCEL] User not found in database');
          return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = users[0];
        console.log(`‚úÖ [VERCEL] User verified: ${user.username}`);
        return res.json({
          id: user.id,
          username: user.username,
          is_regulator: user.is_regulator || false
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] User check error:', error);
        return res.status(401).json({ 
          message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // CARDS - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (url.includes('/api/cards') && req.method === 'GET') {
      try {
        console.log('üí≥ [VERCEL] Cards request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie for cards request');
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        console.log(`üîç [VERCEL] Getting cards for user: ${userData.username}`);

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const cards = await Promise.race([
          db`SELECT * FROM cards WHERE user_id = ${userData.id} ORDER BY id DESC`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Cards query timeout')), 8000))
        ]);
        
        console.log(`üìä [VERCEL] Found ${Array.isArray(cards) ? cards.length : 0} cards for user`);
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞–º–∏
        if (!Array.isArray(cards) || cards.length === 0) {
          console.log(`üí≥ [VERCEL] –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.id}`);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
          const generateBtcAddress = async (userId: number) => {
            const { createHash } = await import('crypto');
            const seed = createHash('sha256').update(`btc-${userId}-salt`).digest('hex');
            return '1' + seed.substring(0, 33);
          };
          
          const generateEthAddress = async (userId: number) => {
            const { createHash } = await import('crypto');
            const seed = createHash('sha256').update(`eth-${userId}-salt`).digest('hex');
            // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ETH –∞–¥—Ä–µ—Å–∞ –±–µ–∑ ethers –¥–ª—è Vercel
            return '0x' + seed.substring(0, 40);
          };
          
          const btcAddress = await generateBtcAddress(userData.id);
          const ethAddress = await generateEthAddress(userData.id);
          
          // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
          await db`INSERT INTO cards (user_id, type, number, expiry, cvv, balance, btc_balance, eth_balance, kichcoin_balance, btc_address, eth_address, ton_address) 
                   VALUES (${userData.id}, 'virtual', '4149499344018888', '12/28', '123', '1000.00', '0.00000000', '0.00000000', '100.00000000', NULL, NULL, NULL)`;
          
          // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç—É —Å –∞–¥—Ä–µ—Å–∞–º–∏
          await db`INSERT INTO cards (user_id, type, number, expiry, cvv, balance, btc_balance, eth_balance, kichcoin_balance, btc_address, eth_address, ton_address)
                   VALUES (${userData.id}, 'crypto', '4149499344017777', '12/28', '456', '0.00', '0.00100000', '0.01000000', '50.00000000', ${btcAddress}, ${ethAddress}, 'EQC8eLIsQ4QLssWiJ_lqxShW1w7T1G11cfh-gFSRnMze64HI')`;
          
          console.log(`‚úÖ [VERCEL] –°–æ–∑–¥–∞–Ω—ã –∫–∞—Ä—Ç—ã —Å BTC: ${btcAddress} –∏ ETH: ${ethAddress}`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
          const newCards = await db`SELECT * FROM cards WHERE user_id = ${userData.id} ORDER BY id DESC`;
          return res.json(newCards || []);
        }
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        return res.json(cards || []);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Cards error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // CARDS GENERATE - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è seed —Ñ—Ä–∞–∑—ã –¥–ª—è –∫–∞—Ä—Ç
    if (url.includes('/api/cards/generate') && req.method === 'POST') {
      try {
        console.log('üîë [VERCEL] Cards generate request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie for cards generate request');
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        console.log(`üîë [VERCEL] Generating seed phrase for user: ${userData.username}`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed —Ñ—Ä–∞–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–µ userId
        const { createHash } = await import('crypto');
        const userId = userData.id;
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é seed —Ñ—Ä–∞–∑—É
        const seedWords = [
          'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract',
          'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid',
          'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual'
        ];
        
        const hash = createHash('sha256').update(`seed-${userId}-salt`).digest('hex');
        const seedPhrase = [];
        
        for (let i = 0; i < 12; i++) {
          const index = parseInt(hash.substring(i * 2, i * 2 + 2), 16) % seedWords.length;
          seedPhrase.push(seedWords[index]);
        }
        
        const mnemonic = seedPhrase.join(' ');
        console.log(`‚úÖ [VERCEL] Generated seed phrase for user ${userData.id}: ${mnemonic.substring(0, 20)}...`);

        return res.json({
          success: true,
          seedPhrase: mnemonic,
          message: 'Seed —Ñ—Ä–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞'
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Cards generate error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed —Ñ—Ä–∞–∑—ã',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // TRANSACTIONS - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (url.includes('/api/transactions') && req.method === 'GET') {
      try {
        console.log('üìä [VERCEL] Transactions request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        console.log(`üîç [VERCEL] Getting transactions for user: ${userData.username}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const transactions = await Promise.race([
          db`SELECT DISTINCT t.* FROM transactions t 
             LEFT JOIN cards c1 ON t.from_card_id = c1.id 
             LEFT JOIN cards c2 ON t.to_card_id = c2.id 
             WHERE c1.user_id = ${userData.id} OR c2.user_id = ${userData.id} 
             ORDER BY t.created_at DESC LIMIT 50`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Transactions query timeout')), 8000))
        ]);
        
        console.log(`üìä [VERCEL] Found ${Array.isArray(transactions) ? transactions.length : 0} transactions for user`);
        return res.json(transactions || []);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Transactions error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // NFT Collections - –ø–æ–ª—É—á–µ–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π
    if (url.includes('/api/nft/collections') && req.method === 'GET') {
      try {
        console.log('üé® [VERCEL] NFT Collections request');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const collections = [
          {
            id: 1,
            name: 'Bored Ape Yacht Club',
            slug: 'bored_ape_yacht_club',
            description: '–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –æ–±–µ–∑—å—è–Ω',
            floor_price: '10.5',
            total_items: 10000,
            image_url: '/api/nft/image/bored_ape_yacht_club/1'
          },
          {
            id: 2,
            name: 'Mutant Ape Yacht Club',
            slug: 'mutant_ape_yacht_club',
            description: '–ú—É—Ç–∞–Ω—Ç—Å–∫–∏–µ –æ–±–µ–∑—å—è–Ω—ã –∏–∑ BAYC',
            floor_price: '5.2',
            total_items: 20000,
            image_url: '/api/nft/image/mutant_ape_yacht_club/1'
          }
        ];
        
        return res.json(collections);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] NFT Collections error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // NEWS - –Ω–æ–≤–æ—Å—Ç–∏
    if (url.includes('/api/news') && req.method === 'GET') {
      try {
        console.log('üì∞ [VERCEL] News request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie for news request');
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        console.log(`üì∞ [VERCEL] Getting news for user: ${userData.username}`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const news = [
          {
            id: 1,
            title: "–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            content: "–ú—ã —É–ª—É—á—à–∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã",
            date: new Date().toISOString(),
            type: "update"
          },
          {
            id: 2,
            title: "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—É—Ä—Å–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
            content: "Bitcoin –∏ Ethereum –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ –º–∏—Ä–æ–≤—ã—Ö –±–∏—Ä–∂–∞—Ö",
            date: new Date(Date.now() - 86400000).toISOString(),
            type: "market"
          },
          {
            id: 3,
            title: "NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω",
            content: "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å NFT –ø—Ä—è–º–æ –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            date: new Date(Date.now() - 172800000).toISOString(),
            type: "feature"
          }
        ];

        return res.json(news);
        
      } catch (error) {
        console.error('‚ùå [VERCEL] News error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // TRANSFER - –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤
    if (url.includes('/api/transfer') && req.method === 'POST') {
      try {
        console.log('üí∏ [VERCEL] Transfer request');
        const userData = extractUserFromCookie(req);
        
        if (!userData) {
          console.log('‚ùå [VERCEL] No auth cookie for transfer request');
          return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        const { fromCardId, recipientAddress, amount, type, transferType, cryptoType } = req.body;
        
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è —Ç–∏–ø–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const actualType = type || transferType || 'fiat';
        
        console.log(`üí∏ [VERCEL] Transfer request: ${amount} from card ${fromCardId} to ${recipientAddress} (type: ${actualType}, cryptoType: ${cryptoType})`);

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!fromCardId || !recipientAddress || !amount) {
          return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: fromCardId, recipientAddress –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const fromCards = await Promise.race([
          db`SELECT * FROM cards WHERE id = ${parseInt(fromCardId)} AND user_id = ${userData.id}`,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Card query timeout')), 8000))
        ]);

        if (!Array.isArray(fromCards) || fromCards.length === 0) {
          return res.status(400).json({ message: '–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const fromCard = fromCards[0];
        console.log(`üí≥ [VERCEL] From card: ${fromCard.number}, balance: ${fromCard.balance}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        const transferAmount = parseFloat(amount);
        const currentBalance = parseFloat(fromCard.balance);
        
        if (currentBalance < transferAmount) {
          return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ' });
        }

        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        const newBalance = (currentBalance - transferAmount).toFixed(2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await db`UPDATE cards SET balance = ${newBalance} WHERE id = ${fromCard.id}`;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactionResult = await db`
          INSERT INTO transactions (from_card_id, to_card_id, amount, converted_amount, type, wallet, status, description, from_card_number, to_card_number, created_at)
          VALUES (${fromCard.id}, NULL, ${amount}, ${amount}, ${type}, ${recipientAddress}, 'completed', '–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', ${fromCard.number}, ${recipientAddress}, ${new Date()})
          RETURNING *
        `;

        console.log(`‚úÖ [VERCEL] Transfer completed, new balance: ${newBalance}`);
        
        return res.json({
          success: true,
          transaction: transactionResult[0],
          newBalance: newBalance
        });
        
      } catch (error) {
        console.error('‚ùå [VERCEL] Transfer error:', error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞',
          debug: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    // Exchange Rates - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    if (url.includes('/api/rates') && req.method === 'GET') {
      console.log('üí± [VERCEL] Exchange rates request');
      return res.json({
        usdToUah: 41.0,
        btcToUsd: 100000,
        ethToUsd: 4000,
        timestamp: new Date().toISOString()
      });
    }

    // WebSocket endpoint (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Vercel)
    if (url.includes('/ws')) {
      console.log('üîå [VERCEL] WebSocket request (not supported)');
      return res.status(404).json({ message: 'WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Vercel' });
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö API –ø—É—Ç–µ–π - —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (url.startsWith('/api/')) {
      return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // Default fallback
    console.log(`‚ùì [VERCEL] Unhandled route: ${req.method} ${url}`);
    return res.status(404).json({ 
      message: "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
      url: url,
      method: req.method
    });

  } catch (error) {
    console.error('‚ùå [VERCEL] Handler error:', error);
    return res.status(500).json({ 
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
}
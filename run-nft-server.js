/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã node run-nft-server.js
 */

import express from 'express';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü–æ—Ä—Ç –¥–ª—è NFT —Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
let NFT_SERVER_PORT = process.env.NFT_SERVER_PORT || 8081;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç —á–∏—Å–ª–æ–º
if (typeof NFT_SERVER_PORT === 'string') {
  const portNum = parseInt(NFT_SERVER_PORT, 10);
  if (!isNaN(portNum) && portNum > 0) {
    NFT_SERVER_PORT = portNum;
  } else {
    console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç ${NFT_SERVER_PORT}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8081`);
    NFT_SERVER_PORT = 8081;
  }
}

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ NFT
const DIRECTORIES = {
  'bored_ape_nft': path.join(process.cwd(), 'bored_ape_nft'),
  'mutant_ape_nft': path.join(process.cwd(), 'mutant_ape_nft'),
  'mutant_ape_official': path.join(process.cwd(), 'mutant_ape_official'),
  'nft_assets/mutant_ape': path.join(process.cwd(), 'nft_assets', 'mutant_ape')
};

// –°–æ–∑–¥–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();

// –í–∫–ª—é—á–∞–µ–º CORS
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì• [${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// –°—Ç–∞—Ç—É—Å-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/status', (req, res) => {
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const stats = {};
  
  for (const [dirName, dirPath] of Object.entries(DIRECTORIES)) {
    if (fs.existsSync(dirPath)) {
      try {
        const files = fs.readdirSync(dirPath);
        const pngFiles = files.filter(f => f.endsWith('.png'));
        const svgFiles = files.filter(f => f.endsWith('.svg'));
        
        stats[dirName] = {
          total: files.length,
          png: pngFiles.length,
          svg: svgFiles.length
        };
      } catch (err) {
        stats[dirName] = { error: err.message };
      }
    } else {
      stats[dirName] = { error: 'Directory not found' };
    }
  }
  
  res.json({
    status: 'ok',
    message: 'NFT Image Server is running',
    timestamp: new Date().toISOString(),
    directories: stats
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ bored_ape_nft
app.get('/bored_ape_nft/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(DIRECTORIES.bored_ape_nft, filename);
  
  if (fs.existsSync(filepath)) {
    res.sendFile(filepath);
  } else {
    console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    res.status(404).send('Image not found');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ mutant_ape_nft
app.get('/mutant_ape_nft/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(DIRECTORIES.mutant_ape_nft, filename);
  
  if (fs.existsSync(filepath)) {
    res.sendFile(filepath);
  } else {
    console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    res.status(404).send('Image not found');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ mutant_ape_official
app.get('/mutant_ape_official/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(DIRECTORIES.mutant_ape_official, filename);
  
  if (fs.existsSync(filepath)) {
    res.sendFile(filepath);
  } else {
    console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    res.status(404).send('Image not found');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ nft_assets/mutant_ape
app.get('/nft_assets/mutant_ape/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(DIRECTORIES['nft_assets/mutant_ape'], filename);
  
  if (fs.existsSync(filepath)) {
    res.sendFile(filepath);
  } else {
    console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    res.status(404).send('Image not found');
  }
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ NFT
app.get('/nft-proxy/*', (req, res) => {
  const fullPath = req.params[0];
  const collection = req.query.collection;
  const nftNumber = req.query.n;
  const dir = req.query.dir;
  
  console.log(`üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–∫—Å–∏ NFT:`, {
    path: fullPath,
    collection,
    nftNumber,
    dir
  });
  
  // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
  let filesToTry = [];
  
  if (dir) {
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    const dirPath = DIRECTORIES[dir] || path.join(process.cwd(), dir);
    const filename = path.basename(fullPath);
    filesToTry.push(path.join(dirPath, filename));
  } else if (fullPath.startsWith('/')) {
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
    filesToTry.push(path.join(process.cwd(), fullPath));
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for (const dirPath of Object.values(DIRECTORIES)) {
      filesToTry.push(path.join(dirPath, path.basename(fullPath)));
    }
  }
  
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º
  let fileFound = false;
  
  for (const filepath of filesToTry) {
    if (fs.existsSync(filepath)) {
      console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${filepath}`);
      res.sendFile(filepath);
      fileFound = true;
      break;
    }
  }
  
  if (!fileFound) {
    console.warn(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –≤—Å–µ–º –ø—É—Ç—è–º:`, filesToTry);
    res.status(404).send('Image not found');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(NFT_SERVER_PORT, '0.0.0.0', () => {
  console.log(`üöÄ NFT Image Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${NFT_SERVER_PORT}`);
  console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`);
  
  for (const [dirName, dirPath] of Object.entries(DIRECTORIES)) {
    if (fs.existsSync(dirPath)) {
      try {
        const files = fs.readdirSync(dirPath);
        console.log(`  - ${dirName}: ${files.length} —Ñ–∞–π–ª–æ–≤`);
      } catch (err) {
        console.error(`  - ${dirName}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ - ${err.message}`);
      }
    } else {
      console.warn(`  - ${dirName}: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  }
  
  console.log(`üì° –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${NFT_SERVER_PORT}/status`);
});
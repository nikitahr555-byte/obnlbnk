import { storage } from "./storage.js";
import { WebSocket, WebSocketServer } from 'ws';
import { parse } from 'url';
import { IncomingMessage } from 'http';
import type { Server } from 'http';
import { withDatabaseRetry } from './db.js';

const COINGECKO_API_URL = "https://api.coingecko.com/api/v3";
const UPDATE_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
const RETRY_DELAY = 60000; // 1 –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
let wss: WebSocketServer;
let lastSuccessfulRates: { 
  usdToUah: string; 
  btcToUsd: string; 
  ethToUsd: string; 
  timestamp: number;
} | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastRates(rates: typeof lastSuccessfulRates) {
  if (!wss) return;

  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(rates));
    }
  });
}

interface VerifyClientInfo {
  origin: string;
  secure: boolean;
  req: IncomingMessage;
}

export function startRateUpdates(server: Server, path: string = '/ws') {
  console.log("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤...");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—É—Ç–∏
  wss = new WebSocketServer({ 
    server,
    verifyClient: (info: VerifyClientInfo) => {
      const { pathname } = parse(info.req.url || '');
      return pathname === path;
    }
  });

  wss.on('connection', (ws) => {
    console.log('–ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    if (lastSuccessfulRates) {
      ws.send(JSON.stringify(lastSuccessfulRates));
    }

    ws.on('error', (error) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
    });
  });

  // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  fetchRates();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  setInterval(fetchRates, UPDATE_INTERVAL);
}

async function fetchRates() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (5 –º–∏–Ω—É—Ç)
    if (lastSuccessfulRates && Date.now() - lastSuccessfulRates.timestamp < 300000) {
      try {
        await withDatabaseRetry(
          () => storage.updateExchangeRates({
            usdToUah: parseFloat(lastSuccessfulRates!.usdToUah),
            btcToUsd: parseFloat(lastSuccessfulRates!.btcToUsd),
            ethToUsd: parseFloat(lastSuccessfulRates!.ethToUsd)
          }),
          3,
          'Update cached exchange rates'
        );
        broadcastRates(lastSuccessfulRates);
        return;
      } catch (dbError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ –ë–î:', dbError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
      }
    }

    console.log("–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...");
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤ —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    let btcToUsd = 83047;
    let ethToUsd = 1832.66;
    let usdToUah = 41.494461;
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko
      const cryptoResponse = await fetch(
        `${COINGECKO_API_URL}/simple/price?ids=bitcoin,ethereum&vs_currencies=usd`
      );

      if (cryptoResponse.ok) {
        const cryptoData = await cryptoResponse.json();
        if (cryptoData?.bitcoin?.usd && cryptoData?.ethereum?.usd) {
          btcToUsd = cryptoData.bitcoin.usd;
          ethToUsd = cryptoData.ethereum.usd;
        }
      }
    } catch (cryptoError) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:", cryptoError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    }
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä/–≥—Ä–∏–≤–Ω–∞
      const usdResponse = await fetch("https://open.er-api.com/v6/latest/USD");
      if (usdResponse.ok) {
        const usdData = await usdResponse.json();
        if (usdData?.rates?.UAH) {
          usdToUah = usdData.rates.UAH;
        }
      }
    } catch (usdError) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/UAH:", usdError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    }

    const rates = {
      usdToUah: usdToUah.toString(),
      btcToUsd: btcToUsd.toString(),
      ethToUsd: ethToUsd.toString(),
      timestamp: Date.now()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –≤ –±–∞–∑—É —Å retry –ª–æ–≥–∏–∫–æ–π
    try {
      await withDatabaseRetry(
        () => storage.updateExchangeRates({
          usdToUah: parseFloat(rates.usdToUah),
          btcToUsd: parseFloat(rates.btcToUsd),
          ethToUsd: parseFloat(rates.ethToUsd)
        }),
        3,
        'Update exchange rates'
      );
      
      lastSuccessfulRates = rates;
      broadcastRates(rates);

      console.log("‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", {
        usdToUah: usdToUah,
        btcToUsd: btcToUsd,
        ethToUsd: ethToUsd
      });
      
      console.log(`–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:
        1 USD = ${usdToUah} UAH
        1 BTC = ${btcToUsd} USD = ${btcToUsd * usdToUah} UAH
        1 ETH = ${ethToUsd} USD = ${ethToUsd * usdToUah} UAH`);
        
    } catch (dbError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤ –ë–î:", dbError);
      
      // –í—Å–µ —Ä–∞–≤–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      lastSuccessfulRates = rates;
      broadcastRates(rates);
      
      console.log("‚ö†Ô∏è –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞):", {
        usdToUah: usdToUah,
        btcToUsd: btcToUsd,
        ethToUsd: ethToUsd
      });
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:", error);
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (lastSuccessfulRates) {
      console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∫—É—Ä—Å—ã");
      broadcastRates(lastSuccessfulRates);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
      try {
        await withDatabaseRetry(
          () => storage.updateExchangeRates({
            usdToUah: parseFloat(lastSuccessfulRates!.usdToUah),
            btcToUsd: parseFloat(lastSuccessfulRates!.btcToUsd),
            ethToUsd: parseFloat(lastSuccessfulRates!.ethToUsd)
          }),
          2,
          'Update cached rates fallback'
        );
      } catch (fallbackError) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤ –ë–î:", fallbackError);
      }
    }
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    setTimeout(fetchRates, RETRY_DELAY);
  }
}
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { neon } from '@neondatabase/serverless';
import { drizzle as drizzleNeon } from 'drizzle-orm/neon-http';
import * as schema from '../shared/schema.js';
import { migrate } from 'drizzle-orm/postgres-js/migrator';
import path from 'path';
import * as fs from 'fs';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
console.log('Using PostgreSQL database');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Render.com
const IS_RENDER = process.env.RENDER === 'true';
const IS_PRODUCTION = process.env.NODE_ENV === 'production';

// –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è  
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  throw new Error('DATABASE_URL environment variable is not set');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DATABASE_URL –Ω–µ undefined
const databaseUrl: string = DATABASE_URL;
console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DATABASE_URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
console.log('üì° Database host:', databaseUrl.includes('supabase.com') ? 'Supabase' : databaseUrl.includes('neon.tech') ? 'Neon' : 'Other PostgreSQL');

console.log('Connecting to PostgreSQL database...');

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π postgres –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase
// Neon serverless –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Neon Database
console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π PostgreSQL –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase —Å connection pooling');

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é connection pooling –¥–ª—è Vercel/Serverless
const sql = postgres(databaseUrl, { 
  ssl: 'require',
  max: 1,                    // –ú–∞–∫—Å–∏–º—É–º 1 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏
  idle_timeout: 5,           // –£–º–µ–Ω—å—à–∞–µ–º idle timeout –¥–æ 5 —Å–µ–∫—É–Ω–¥
  connect_timeout: 30,       // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º connect timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥
  prepare: false,            // –û—Ç–∫–ª—é—á–∞–µ–º prepared statements –¥–ª—è serverless
  connection: {
    application_name: 'ooo-bnal-bank',
    options: '--search_path=public'
  },
  transform: undefined,       // –û—Ç–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  fetch_types: false         // –û—Ç–∫–ª—é—á–∞–µ–º fetch types –¥–ª—è serverless –æ–∫—Ä—É–∂–µ–Ω–∏—è
});

const db = drizzle(sql, { schema });
const client = sql; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
const gracefulShutdown = () => {
  console.log('üîÑ Graceful shutdown initiated, closing database connections...');
  sql.end({ timeout: 5 }).catch(console.error);
};

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å timeout
export async function withDatabaseTimeout<T>(
  operation: Promise<T>, 
  timeoutMs: number = 50000, // –£–í–ï–õ–ò–ß–ò–õ–ò –¥–æ 50 —Å–µ–∫—É–Ω–¥ –¥–ª—è Vercel
  operationName: string = 'Database operation'
): Promise<T> {
  const timeoutPromise = new Promise<never>((_, reject) => {
    setTimeout(() => reject(new Error(`${operationName} timed out after ${timeoutMs}ms`)), timeoutMs);
  });
  
  try {
    console.log(`üîÑ [VERCEL] –ù–∞—á–∏–Ω–∞–µ–º ${operationName} —Å —Ç–∞–π–º–∞—É—Ç–æ–º ${timeoutMs}ms`);
    const result = await Promise.race([operation, timeoutPromise]);
    console.log(`‚úÖ [VERCEL] ${operationName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    return result;
  } catch (error) {
    console.error(`‚ùå [VERCEL] ${operationName} failed:`, error);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (error instanceof Error && (
      error.message.includes('CONNECT_TIMEOUT') ||
      error.message.includes('connection') ||
      error.message.includes('timeout')
    )) {
      console.log('üîÑ Attempting to reconnect to database...');
      // –î–∞–µ–º –±–∞–∑–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
export { client, db };

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createTablesIfNotExist() {
  try {
    console.log('Checking and creating database tables if needed...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π postgres –∫–ª–∏–µ–Ω—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const executeSQL = async (query: string) => {
      return await withDatabaseTimeout(
        client.unsafe(query),
        10000,
        'Create table query'
      );
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –±—ã—Å—Ç—Ä–æ
    console.log('Creating users table...');
    await executeSQL(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        is_regulator BOOLEAN NOT NULL DEFAULT false,
        regulator_balance TEXT NOT NULL DEFAULT '0',
        last_nft_generation TIMESTAMP,
        nft_generation_count INTEGER NOT NULL DEFAULT 0
      )
    `);
    
    console.log('Creating cards table...');
    await executeSQL(`
      CREATE TABLE IF NOT EXISTS cards (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        type TEXT NOT NULL,
        number TEXT NOT NULL,
        expiry TEXT NOT NULL,
        cvv TEXT NOT NULL,
        balance TEXT NOT NULL DEFAULT '0',
        btc_balance TEXT NOT NULL DEFAULT '0',
        eth_balance TEXT NOT NULL DEFAULT '0',
        kichcoin_balance TEXT NOT NULL DEFAULT '0',
        btc_address TEXT,
        eth_address TEXT,
        ton_address TEXT
      )
    `);
    
    console.log('Creating other essential tables...');
    await executeSQL(`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        from_card_id INTEGER NOT NULL,
        to_card_id INTEGER,
        amount TEXT NOT NULL,
        converted_amount TEXT NOT NULL,
        type TEXT NOT NULL,
        wallet TEXT,
        status TEXT NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW(),
        description TEXT NOT NULL DEFAULT '',
        from_card_number TEXT NOT NULL,
        to_card_number TEXT
      )
    `);
    
    await executeSQL(`
      CREATE TABLE IF NOT EXISTS exchange_rates (
        id SERIAL PRIMARY KEY,
        usd_to_uah TEXT NOT NULL,
        btc_to_usd TEXT NOT NULL,
        eth_to_usd TEXT NOT NULL,
        updated_at TIMESTAMP NOT NULL DEFAULT NOW()
      )
    `);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫)
    setTimeout(async () => {
      try {
        console.log('Creating NFT tables in background...');
        
        await executeSQL(`
          CREATE TABLE IF NOT EXISTS nft_collections (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            cover_image TEXT,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
          )
        `);

        await executeSQL(`
          CREATE TABLE IF NOT EXISTS nfts (
            id SERIAL PRIMARY KEY,
            collection_id INTEGER NOT NULL,
            owner_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            image_path TEXT NOT NULL,
            attributes JSONB,
            rarity TEXT NOT NULL DEFAULT 'common',
            price TEXT DEFAULT '0',
            for_sale BOOLEAN NOT NULL DEFAULT false,
            minted_at TIMESTAMP NOT NULL DEFAULT NOW(),
            token_id TEXT NOT NULL,
            original_image_path TEXT,
            sort_order INTEGER
          )
        `);
        
        console.log('‚úÖ NFT tables created successfully in background');
      } catch (error) {
        console.log('‚ö†Ô∏è NFT tables creation failed (background):', error);
      }
    }, 2000);
    
    console.log('‚úÖ Essential database tables created successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Error creating essential tables:', error);
    throw error;
  }
}

// Test database connection and log content
async function logDatabaseContent() {
  try {
    console.log('Testing database connection...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let usersResult: schema.User[] = [];
    try {
      usersResult = await db.select().from(schema.users);
      console.log('Successfully connected to database');
      console.log('Users count:', usersResult.length);
    } catch (e) {
      console.log('Users table not ready yet or empty');
      usersResult = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã
    try {
      const cardsResult = await db.select().from(schema.cards);
      console.log('Cards count:', cardsResult.length);
    } catch (e) {
      console.log('Cards table not ready yet or empty');
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
    if (usersResult && usersResult.length === 0) {
      console.log('Database is empty, creating initial data...');
      await createDefaultData();
    }
    
  } catch (error) {
    console.error('Error connecting to database:', error);
    throw error; // Propagate the error
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function createDefaultData() {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
    await db.insert(schema.exchangeRates).values({
      usdToUah: "40.5",
      btcToUsd: "65000",
      ethToUsd: "3500"
    });
    console.log('Created default exchange rates');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –Ω–æ –º—ã –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
  } catch (error) {
    console.error('Error creating default data:', error);
  }
}

// Export the initialization function
export async function initializeDatabase() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await createTablesIfNotExist();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã
    await logDatabaseContent();

    console.log('Database initialization completed successfully');
  } catch (error) {
    console.error('Database initialization failed:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
export async function closeConnectionsOnVercel() {
  // Neon serverless —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º serverless - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
}

// Handle graceful shutdown
process.on('SIGTERM', async () => {
  console.log('Received SIGTERM. Closing database connection...');
  try {
    await closeConnectionsOnVercel();
  } catch (e) {
    console.error('Error closing database:', e);
  }
});

process.on('SIGINT', async () => {
  console.log('Received SIGINT. Closing database connection...');
  try {
    await closeConnectionsOnVercel();
  } catch (e) {
    console.error('Error closing database:', e);
  }
});

// Initialize the database connection with simpler logic
async function initializeWithRetry() {
  try {
    console.log('Initializing database tables...');
    
    // –ü—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
    const quickTest = await withDatabaseTimeout(
      db.select().from(schema.users).limit(1),
      5000,
      'Quick database connection test'
    ).catch(error => {
      console.log('‚ö†Ô∏è Quick test failed, probably database is initializing...');
      return null;
    });
    
    if (quickTest !== null) {
      console.log('‚úÖ Database already initialized and ready');
      return;
    }
    
    await initializeDatabase();
    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Database initialization failed:', error);
    // –ù–µ –ø–∞–Ω–∏–∫—É–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - —Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
initializeWithRetry();
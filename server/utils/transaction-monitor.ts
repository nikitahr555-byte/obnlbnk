/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 */

import { EventEmitter } from 'events';
import { checkTransactionStatus } from './blockchain';
import { db } from '../db';
import * as schema from '../../shared/schema';
import { logSystemError } from './health-monitor';
import { AppError, logError } from './error-handler';

// –°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export type TransactionStatus = 'pending' | 'completed' | 'failed';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export interface TransactionInfo {
  id: number;
  fromCardId: number;
  toCardId?: number;
  amount: string;
  convertedAmount: string;
  type: string;
  wallet?: string;
  status: TransactionStatus;
  createdAt: Date;
  description: string;
  fromCardNumber: string;
  toCardNumber?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export interface TransactionCheckResult {
  transactionId: number;
  previousStatus: TransactionStatus;
  currentStatus: TransactionStatus;
  statusChanged: boolean;
  confirmations?: number;
  error?: string;
  lastChecked: Date;
}

// –ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
class TransactionMonitor extends EventEmitter {
  private static instance: TransactionMonitor;
  private pendingTransactions: Map<number, { lastChecked: Date, retryCount: number }> = new Map();
  private isRunning = false;
  private checkInterval = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private maxRetries = 5;
  
  private constructor() {
    super();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (process.env.NODE_ENV === 'production') {
      this.checkInterval = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –≤ production
    } else if (process.env.NODE_ENV === 'development') {
      this.checkInterval = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –≤ development
    }
  }
  
  // Singleton –ø–∞—Ç—Ç–µ—Ä–Ω
  public static getInstance(): TransactionMonitor {
    if (!TransactionMonitor.instance) {
      TransactionMonitor.instance = new TransactionMonitor();
    }
    return TransactionMonitor.instance;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  public start(): void {
    if (this.isRunning) return;
    
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ ${this.checkInterval / 60000} –º–∏–Ω—É—Ç)`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    setInterval(() => this.checkPendingTransactions(), this.checkInterval);
    
    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.checkPendingTransactions();
    
    this.isRunning = true;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  private async checkPendingTransactions(): Promise<void> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const pendingTransactions = await db.select().from(schema.transactions)
        .where(sql => sql.eq(schema.transactions.status, 'pending'));
      
      if (pendingTransactions.length === 0) {
        console.log('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        return;
      }
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${pendingTransactions.length} –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      for (const transaction of pendingTransactions) {
        await this.checkTransaction(transaction);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      logSystemError('TransactionCheckError', (error as Error).message);
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private async checkTransaction(transaction: TransactionInfo): Promise<TransactionCheckResult> {
    const transactionId = transaction.id;
    const previousStatus = transaction.status as TransactionStatus;
    let currentStatus = previousStatus;
    let confirmations = 0;
    let error = undefined;
    
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId} (${transaction.type}, ${transaction.wallet || '–±–µ–∑ –∫–æ—à–µ–ª—å–∫–∞'})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const pendingInfo = this.pendingTransactions.get(transactionId);
      const now = new Date();
      
      // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (pendingInfo && pendingInfo.lastChecked) {
        const timeSinceLastCheck = now.getTime() - pendingInfo.lastChecked.getTime();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if (timeSinceLastCheck < this.checkInterval && pendingInfo.retryCount < this.maxRetries) {
          console.log(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ (${Math.round(timeSinceLastCheck / 1000)} —Å–µ–∫ –Ω–∞–∑–∞–¥), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return {
            transactionId,
            previousStatus,
            currentStatus,
            statusChanged: false,
            lastChecked: pendingInfo.lastChecked
          };
        }
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
      let cryptoType: 'btc' | 'eth' | null = null;
      
      if (transaction.type === 'btc' || transaction.type === 'btc_transfer') {
        cryptoType = 'btc';
      } else if (transaction.type === 'eth' || transaction.type === 'eth_transfer') {
        cryptoType = 'eth';
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ (wallet)
      const wallet = transaction.wallet;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞, –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–∞–µ–º
      if (!cryptoType || !wallet) {
        console.log(`‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∫–æ—à–µ–ª—å–∫–∞`);
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—ë
        const transactionAge = now.getTime() - new Date(transaction.createdAt).getTime();
        const isVeryOld = transactionAge > 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        if (isVeryOld) {
          console.log(`üïí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ`);
          currentStatus = 'completed';
        }
      } else {
        // –î–ª—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (wallet.startsWith('eth_tx_')) {
          // ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è
          console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} (ETH) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          currentStatus = 'completed';
          confirmations = 12; // –≠–º—É–ª–∏—Ä—É–µ–º 12 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        } else if (wallet.startsWith('btc_tx_')) {
          // BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
          const transactionAge = now.getTime() - new Date(transaction.createdAt).getTime();
          const shouldComplete = transactionAge > 3 * 60 * 60 * 1000; // 3 —á–∞—Å–∞
          
          if (shouldComplete) {
            console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} (BTC) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ 3 —á–∞—Å–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è`);
            currentStatus = 'completed';
            confirmations = 6; // –≠–º—É–ª–∏—Ä—É–µ–º 6 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
          }
        } 
        // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å btc_tx_ –∏–ª–∏ eth_tx_)
        else if (wallet.startsWith('btc_err_') || wallet.startsWith('eth_err_')) {
          // –û—à–∏–±–æ—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ failed
          console.log(`‚ùå –û—à–∏–±–æ—á–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ failed`);
          currentStatus = 'failed';
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API
          try {
            console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${wallet} —á–µ—Ä–µ–∑ BlockDaemon API...`);
            
            const statusResult = await checkTransactionStatus(wallet, cryptoType);
            
            currentStatus = statusResult.status;
            confirmations = statusResult.confirmations || 0;
            
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId} (${cryptoType.toUpperCase()}): ${currentStatus}, ${confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π`);
          } catch (apiError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API:`, apiError);
            error = (apiError as Error).message;
            
            // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ API, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
      const retryCount = (pendingInfo?.retryCount || 0) + 1;
      this.pendingTransactions.set(transactionId, { lastChecked: now, retryCount });
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
      if (currentStatus !== previousStatus) {
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}: ${previousStatus} -> ${currentStatus}`);
        
        await db.update(schema.transactions)
          .set({ status: currentStatus })
          .where(sql => sql.eq(schema.transactions.id, transactionId));
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        if (currentStatus === 'completed' || currentStatus === 'failed') {
          this.pendingTransactions.delete(transactionId);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        this.emit('transaction-status-changed', {
          transactionId,
          previousStatus,
          currentStatus,
          confirmations,
          type: transaction.type,
          wallet: transaction.wallet,
          amount: transaction.amount
        });
      }
      
      return {
        transactionId,
        previousStatus,
        currentStatus,
        statusChanged: currentStatus !== previousStatus,
        confirmations,
        error,
        lastChecked: now
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}:`, error);
      logError(error instanceof AppError ? error : new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}: ${(error as Error).message}`));
      
      return {
        transactionId,
        previousStatus,
        currentStatus,
        statusChanged: false,
        error: (error as Error).message,
        lastChecked: new Date()
      };
    }
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
   */
  public async trackTransaction(transactionId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transaction = await db.select().from(schema.transactions)
        .where(sql => sql.eq(schema.transactions.id, transactionId))
        .limit(1);
      
      if (!transaction || transaction.length === 0) {
        console.error(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`);
        return;
      }
      
      const tx = transaction[0];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending
      if (tx.status === 'pending') {
        this.pendingTransactions.set(transactionId, { 
          lastChecked: new Date(0), // –î–∞–≤–Ω–æ –≤ –ø—Ä–æ—à–ª–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–∞–∑—É
          retryCount: 0 
        });
        
        console.log(`‚ûï –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`);
        
        // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        await this.checkTransaction(tx);
      } else {
        console.log(`‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: ${tx.status})`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:`, error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
   */
  public getPendingTransactions(): { id: number, lastChecked: Date, retryCount: number }[] {
    return Array.from(this.pendingTransactions.entries()).map(([id, info]) => ({
      id,
      lastChecked: info.lastChecked,
      retryCount: info.retryCount
    }));
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é
   */
  public async checkTransactionById(transactionId: number): Promise<TransactionCheckResult | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transaction = await db.select().from(schema.transactions)
        .where(sql => sql.eq(schema.transactions.id, transactionId))
        .limit(1);
      
      if (!transaction || transaction.length === 0) {
        console.error(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${transactionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      return await this.checkTransaction(transaction[0]);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}:`, error);
      return null;
    }
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  public resetTransactionRetryCount(transactionId: number): void {
    const info = this.pendingTransactions.get(transactionId);
    
    if (info) {
      this.pendingTransactions.set(transactionId, { 
        ...info, 
        retryCount: 0 
      });
      console.log(`üîÑ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}`);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const transactionMonitor = TransactionMonitor.getInstance();

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export function startTransactionMonitoring(): void {
  transactionMonitor.start();
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
 */
export function trackTransaction(transactionId: number): Promise<void> {
  return transactionMonitor.trackTransaction(transactionId);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é
 */
export function checkTransaction(transactionId: number): Promise<TransactionCheckResult | null> {
  return transactionMonitor.checkTransactionById(transactionId);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
 */
export function getPendingTransactions(): { id: number, lastChecked: Date, retryCount: number }[] {
  return transactionMonitor.getPendingTransactions();
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function resetTransactionRetryCount(transactionId: number): void {
  transactionMonitor.resetTransactionRetryCount(transactionId);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export default {
  startTransactionMonitoring,
  trackTransaction,
  checkTransaction,
  getPendingTransactions,
  resetTransactionRetryCount,
  transactionMonitor
};
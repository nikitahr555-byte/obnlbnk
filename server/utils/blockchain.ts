import axios from 'axios';
import { validateCryptoAddress } from './crypto.js';

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BLOCKDAEMON_API_KEY = process.env.BLOCKDAEMON_API_KEY;
console.log('üîë –ó–Ω–∞—á–µ–Ω–∏–µ BLOCKDAEMON_API_KEY:', BLOCKDAEMON_API_KEY ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–ª–∏–Ω–∞: ' + BLOCKDAEMON_API_KEY.length : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
 * @returns –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ API –∫–ª—é—á–µ–π
 */
export function hasBlockchainApiKeys(): { 
  available: boolean; 
  blockdaemon: boolean;
  reason?: string;
} {
  const blockdaemonAvailable = Boolean(BLOCKDAEMON_API_KEY);
  const available = blockdaemonAvailable;
  
  let reason: string | undefined;
  if (!available) {
    reason = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º';
  }
  
  return {
    available,
    blockdaemon: blockdaemonAvailable,
    reason
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Bitcoin-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockDaemon API
 * @param address Bitcoin-–∞–¥—Ä–µ—Å
 * @returns Promise —Å –±–∞–ª–∞–Ω—Å–æ–º –≤ BTC
 */
export async function getBitcoinBalance(address: string): Promise<number> {
  try {
    if (!validateCryptoAddress(address, 'btc')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å: ${address}`);
    }

    if (!BLOCKDAEMON_API_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Bitcoin API');
    }

    const response = await axios.get(
      `https://svc.blockdaemon.com/bitcoin/mainnet/account/${address}`,
      {
        headers: {
          'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
          'Accept': 'application/json'
        }
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
    if (response.data && typeof response.data.balance === 'number') {
      // –ë–∞–ª–∞–Ω—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Å–∞—Ç–æ—à–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BTC (1 BTC = 100,000,000 satoshi)
      const balanceInBtc = response.data.balance / 100000000;
      console.log(`–ë–∞–ª–∞–Ω—Å BTC –∞–¥—Ä–µ—Å–∞ ${address}: ${balanceInBtc} BTC`);
      return balanceInBtc;
    } else {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', response.data);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å BTC –∞–¥—Ä–µ—Å–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ BTC –∞–¥—Ä–µ—Å–∞ ${address}:`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Ethereum-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockDaemon API
 * @param address Ethereum-–∞–¥—Ä–µ—Å
 * @returns Promise —Å –±–∞–ª–∞–Ω—Å–æ–º –≤ ETH
 */
export async function getEthereumBalance(address: string): Promise<number> {
  try {
    if (!validateCryptoAddress(address, 'eth')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å: ${address}`);
    }

    if (!BLOCKDAEMON_API_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ BlockDaemon API');
    }

    const response = await axios.get(
      `https://svc.blockdaemon.com/ethereum/mainnet/account/${address}`,
      {
        headers: {
          'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
          'Accept': 'application/json'
        }
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
    if (response.data && typeof response.data.balance === 'string') {
      // –ë–∞–ª–∞–Ω—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ Wei, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ETH (1 ETH = 10^18 Wei)
      const balanceInEth = parseFloat(response.data.balance) / 1e18;
      console.log(`–ë–∞–ª–∞–Ω—Å ETH –∞–¥—Ä–µ—Å–∞ ${address}: ${balanceInEth} ETH`);
      return balanceInEth;
    } else {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', response.data);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å ETH –∞–¥—Ä–µ—Å–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ ETH –∞–¥—Ä–µ—Å–∞ ${address}:`, error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Bitcoin —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ BlockDaemon API
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 */
export async function sendBitcoinTransaction(
  fromAddress: string,
  toAddress: string,
  amountBtc: number
): Promise<{ txId: string; status: string }> {
  try {
    if (!validateCryptoAddress(fromAddress, 'btc')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π Bitcoin –∞–¥—Ä–µ—Å: ${fromAddress}`);
    }
    
    if (!validateCryptoAddress(toAddress, 'btc')) {
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π Bitcoin –∞–¥—Ä–µ—Å: ${toAddress}`);
    }

    if (!BLOCKDAEMON_API_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Bitcoin API');
    }

    console.log(`‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ ${amountBtc} BTC —Å ${fromAddress} –Ω–∞ ${toAddress}`);
    console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º BlockDaemon API Key: ${BLOCKDAEMON_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ BlockDaemon API
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è BTC —á–µ—Ä–µ–∑ BlockDaemon API: ${toAddress}`);
      const checkResponse = await axios.get(
        `https://svc.blockdaemon.com/bitcoin/mainnet/account/${toAddress}`,
        {
          headers: {
            'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
            'Accept': 'application/json'
          }
        }
      );
      console.log(`‚úÖ –ê–¥—Ä–µ—Å BTC –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ API: ${JSON.stringify(checkResponse.data)}`);
    } catch (apiError: any) {
      console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ BTC –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ API:`, apiError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ BlockDaemon API
    try {
      // BlockDaemon API —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∏ –≤—ã–∑–æ–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactionData = {
        outputs: [
          {
            addresses: [toAddress],
            value: Math.floor(amountBtc * 100000000) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BTC –≤ —Å–∞—Ç–æ—à–∏
          }
        ],
        fee_rate: "medium", // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        source_address: fromAddress
      };
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BlockDaemon API: ${JSON.stringify(transactionData)}`);
      
      const txResponse = await axios.post(
        `https://svc.blockdaemon.com/bitcoin/mainnet/tx/send`,
        transactionData,
        {
          headers: {
            'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }
      );
      
      if (txResponse.data && txResponse.data.txid) {
        console.log(`‚úÖ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TxID: ${txResponse.data.txid}`);
        return { txId: txResponse.data.txid, status: 'pending' };
      } else {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      }
    } catch (txError: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API:`, txError?.response?.data || txError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–æ–º–µ—Ç–∫–æ–π "error"
      const errorTxId = `btc_err_${Date.now()}`;
      return { txId: errorTxId, status: 'failed' };
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Ethereum —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ BlockDaemon API
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 */
export async function sendEthereumTransaction(
  fromAddress: string,
  toAddress: string,
  amountEth: number
): Promise<{ txId: string; status: string }> {
  try {
    console.log(`üîÑ [ETH] –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π`);
    console.log(`üîë [ETH] API Key —Å—Ç–∞—Ç—É—Å: ${BLOCKDAEMON_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ' + BLOCKDAEMON_API_KEY.length + ')' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù!'}`);
    
    if (!validateCryptoAddress(fromAddress, 'eth')) {
      console.error(`‚ùå [ETH] –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${fromAddress}`);
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π Ethereum –∞–¥—Ä–µ—Å: ${fromAddress}`);
    }
    
    if (!validateCryptoAddress(toAddress, 'eth')) {
      console.error(`‚ùå [ETH] –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${toAddress}`);
      throw new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π Ethereum –∞–¥—Ä–µ—Å: ${toAddress}`);
    }

    if (!BLOCKDAEMON_API_KEY) {
      console.error(`‚ùå [ETH] API –∫–ª—é—á BlockDaemon –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!`);
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ BlockDaemon API');
    }

    console.log(`‚ö° [ETH] –û—Ç–ø—Ä–∞–≤–∫–∞ ${amountEth} ETH —Å ${fromAddress} –Ω–∞ ${toAddress}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ BlockDaemon API
    try {
      console.log(`üîç [ETH] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ BlockDaemon API: ${toAddress}`);
      
      const checkURL = `https://svc.blockdaemon.com/ethereum/mainnet/account/${toAddress}`;
      console.log(`üåê [ETH] URL –∑–∞–ø—Ä–æ—Å–∞: ${checkURL}`);
      
      const checkResponse = await axios.get(
        checkURL,
        {
          headers: {
            'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
            'Accept': 'application/json'
          }
        }
      );
      
      console.log(`‚úÖ [ETH] –ê–¥—Ä–µ—Å ETH –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ API. –°—Ç–∞—Ç—É—Å: ${checkResponse.status}`);
      console.log(`üìä [ETH] –û—Ç–≤–µ—Ç API: ${JSON.stringify(checkResponse.data)}`);
    } catch (apiError: any) {
      console.warn(`‚ö†Ô∏è [ETH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ETH –∞–¥—Ä–µ—Å–∞:`);
      console.warn(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${apiError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      console.warn(`   - –°—Ç–∞—Ç—É—Å: ${apiError?.response?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.warn(`   - –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(apiError?.response?.data || {})}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
    
    // –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    // –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞, —á—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ –≤—Å–µ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ETH –≤ Wei –¥–ª—è –ª–æ–≥–æ–≤
      const valueInWei = BigInt(Math.floor(amountEth * 1e18)).toString();
      console.log(`üí± [ETH] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${amountEth} ETH = ${valueInWei} Wei`);
      
      // –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–º–µ—Ç–∫–æ–π
      const successTxId = `eth_tx_${Date.now()}`;
      
      // –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`üì§ [ETH] –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:`);
      const debugData = {
        from: fromAddress,
        to: toAddress,
        amount: amountEth,
        amountInWei: valueInWei,
        timestamp: new Date().toISOString(),
        txId: successTxId
      };
      console.log(JSON.stringify(debugData, null, 2));
      
      console.log(`‚úÖ [ETH] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. TxID: ${successTxId}`);
      return { txId: successTxId, status: 'pending' };
      
      /* –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é API-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH
      // https://docs.blockdaemon.com/docs/ethereum
      const transactionData = {
        from: fromAddress,
        to: toAddress,
        value: valueInWei,
        gas: 21000, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–∞–∑ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      };
      
      console.log(`üì§ [ETH] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BlockDaemon API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
      console.log(JSON.stringify(transactionData, null, 2));
      
      // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è BlockDaemon API
      // –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–π API –¥–ª—è Ethereum –≤–º–µ—Å—Ç–æ Universal API
      const txURL = `https://svc.blockdaemon.com/ethereum/mainnet/tx/send`;
      console.log(`üåê [ETH] URL –∑–∞–ø—Ä–æ—Å–∞: ${txURL}`);
      
      const txResponse = await axios.post(
        txURL,
        transactionData,
        {
          headers: {
            'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 20000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        }
      );
      
      console.log(`üì• [ETH] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: ${txResponse.status}`);
      console.log(`üìä [ETH] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(txResponse.data)}`);
      
      // BlockDaemon Universal API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç hash –≤ transaction_hash
      // https://docs.blockdaemon.com/reference/universal-post-tx
      const txId = txResponse.data?.transaction_hash || txResponse.data?.txid || txResponse.data?.txhash || txResponse.data?.tx_hash;
      
      if (txId) {
        console.log(`‚úÖ [ETH] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TxID: ${txId}`);
        return { txId, status: 'pending' };
      } else {
        console.error(`‚ùå [ETH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TxID –∏–∑ –æ—Ç–≤–µ—Ç–∞ API:`);
        console.error(JSON.stringify(txResponse.data));
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      }
      */
    } catch (txError: any) {
      console.error(`‚ùå [ETH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
      console.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${txError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      // —á—Ç–æ–±—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      const successTxId = `eth_tx_${Date.now()}`;
      console.log(`üí° [ETH] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π TxID –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É: ${successTxId}`);
      return { txId: successTxId, status: 'pending' };
    }
  } catch (error: any) {
    console.error(`‚ùå [ETH] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
    console.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    console.error(`   - –°—Ç–µ–∫: ${error?.stack || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–∫–µ'}`);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ TxID
 * @param txId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param cryptoType –¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ('btc' –∏–ª–∏ 'eth')
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function checkTransactionStatus(
  txId: string,
  cryptoType: 'btc' | 'eth'
): Promise<{ status: 'pending' | 'completed' | 'failed', confirmations?: number }> {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${txId} (${cryptoType})`);
    
    if (!BLOCKDAEMON_API_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ BlockDaemon API');
    }

    // –ï—Å–ª–∏ —É –Ω–∞—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ failed
    if (txId.startsWith('btc_err_') || txId.startsWith('eth_err_')) {
      console.log(`üí° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txId} —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–æ—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π`);
      return { status: 'failed' };
    }
    
    // –ï—Å–ª–∏ txId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è ETH
    if (txId.startsWith('eth_tx_')) {
      // –î–ª—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed —Å—Ç–∞—Ç—É—Å
      // —á—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—Å—Ç—É–ø–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      console.log(`üí° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txId} —è–≤–ª—è–µ—Ç—Å—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ completed`);
      return { status: 'completed', confirmations: 20 };
    }
    
    // –î–ª—è Bitcoin –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ
    if (txId.startsWith('btc_tx_')) {
      console.log(`üí° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txId} —è–≤–ª—è–µ—Ç—Å—è BTC —Å–∏–º—É–ª—è—Ü–∏–µ–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ pending`);
      return { status: 'pending' };
    }
    
    if (cryptoType === 'btc') {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BlockDaemon API
        console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txId}`);
        
        const response = await axios.get(
          `https://svc.blockdaemon.com/bitcoin/mainnet/tx/${txId}`,
          {
            headers: {
              'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
              'Accept': 'application/json'
            }
          }
        );
        
        if (response.data) {
          const confirmations = response.data.confirmations || 0;
          // –°—á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ —É –Ω–µ—ë 3+ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
          const status = confirmations >= 3 ? 'completed' : 'pending';
          
          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${txId}: ${status} (${confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)`);
          return { status, confirmations };
        } else {
          throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
      } catch (btcError: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, btcError?.response?.data || btcError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –µ—â–µ –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API
        return { status: 'pending' };
      }
    } else if (cryptoType === 'eth') {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BlockDaemon API
        console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txId}`);
        
        const txURL = `https://svc.blockdaemon.com/ethereum/mainnet/tx/${txId}`;
        console.log(`üåê [ETH] URL –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: ${txURL}`);
        
        const response = await axios.get(
          txURL,
          {
            headers: {
              'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
              'Accept': 'application/json'
            }
          }
        );
        
        if (response.data) {
          const confirmations = response.data.confirmations || 0;
          // –°—á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ —É –Ω–µ—ë 12+ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (–¥–ª—è ETH)
          const status = confirmations >= 12 ? 'completed' : 'pending';
          
          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${txId}: ${status} (${confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)`);
          return { status, confirmations };
        } else {
          throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
      } catch (ethError: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, ethError?.response?.data || ethError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –µ—â–µ –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API
        return { status: 'pending' };
      }
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: ${cryptoType}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${txId}:`, error);
    throw error;
  }
}

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
(() => {
  const apiStatus = hasBlockchainApiKeys();
  if (apiStatus.available) {
    console.log('üîë API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    if (apiStatus.blockdaemon) console.log('‚úì BlockDaemon API Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    console.warn(`‚ö†Ô∏è ${apiStatus.reason || 'API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.'}. –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏.`);
  }
})();

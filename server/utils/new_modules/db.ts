import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import * as schema from '../../../shared/schema';
import path from 'path';
import * as fs from 'fs';
import { 
  DatabaseError, 
  AppError, 
  logError 
} from '../error-handler';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
console.log('Using PostgreSQL database');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Render.com
const IS_RENDER = process.env.RENDER === 'true';
const IS_PRODUCTION = process.env.NODE_ENV === 'production';

// –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  throw new DatabaseError('DATABASE_URL environment variable is not set', {
    environmentVariables: Object.keys(process.env).filter(key => 
      key.includes('DB') || key.includes('DATABASE') || key.includes('PG')
    )
  });
}

console.log('Connecting to PostgreSQL database...');

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param operation –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
 * @param maxRetries –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function withDatabaseRetry<T>(
  operation: () => Promise<T>,
  context: string,
  maxRetries: number = 3
): Promise<T> {
  let lastError: Error | null = null;
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      if (attempt > 0) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries} –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ${context}`);
      }
      
      return await operation();
    } catch (error: any) {
      lastError = error;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
      const isConnectionError = 
        error.code === '08000' || // Connection exception
        error.code === '08003' || // Connection does not exist
        error.code === '08006' || // Connection failure
        error.code === '08001' || // Unable to connect
        error.code === '08004' || // Rejected connection
        error.code === 'ECONNRESET' ||
        error.code === 'ECONNREFUSED' ||
        error.code === 'ETIMEDOUT' ||
        error.message?.includes('timeout') ||
        error.message?.includes('connection');
      
      const isTransientError =
        error.code === '40001' || // Serialization failure
        error.code === '40P01' || // Deadlock
        error.code === '57014' || // Query canceled
        error.code === 'XX000'; // Internal error
      
      if ((isConnectionError || isTransientError) && attempt < maxRetries - 1) {
        // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        const delay = Math.min(1000 * Math.pow(2, attempt), 10000);
        console.warn(`‚ö†Ô∏è ${context} –Ω–µ —É–¥–∞–ª–æ—Å—å (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞), –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay/1000}s...`);
        console.warn(`   - –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || '–ù–µ—Ç –∫–æ–¥–∞'}`);
        console.warn(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      
      // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      logError(error);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ–º
      let enhancedError: AppError;
      
      if (error.code) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É Postgres –≤ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        enhancedError = new DatabaseError(
          `–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ ${context}: ${error.message}`,
          { 
            code: error.code, 
            detail: error.detail,
            hint: error.hint,
            position: error.position,
            table: error.table,
            column: error.column,
            query: error.query
          }
        );
      } else {
        enhancedError = new DatabaseError(
          `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ ${context}: ${error.message}`,
          { originalError: error.toString() }
        );
      }
      
      throw enhancedError;
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
  throw lastError || new DatabaseError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${context} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const client = postgres(DATABASE_URL, { 
  ssl: { rejectUnauthorized: false }, // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon PostgreSQL
  max: 10, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
  idle_timeout: 20, // Timeout –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  connect_timeout: 30, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  
  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
  types: {
    date: {
      to: 1184,
      from: [1082, 1083, 1114, 1184],
      serialize: (date: Date) => date,
      parse: (date: string) => date
    }
  },
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ client –Ω–∞–ø—Ä—è–º—É—é)
  onError: (err, sql) => {
    console.error('üî¥ PostgreSQL error:', err);
    logError(new DatabaseError(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: ${err.message}`,
      { 
        code: err.code,
        query: sql.substring(0, 200) + (sql.length > 200 ? '...' : '')
      }
    ));
  },
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  onRetry: (count, error) => {
    console.warn(`‚ö†Ô∏è PostgreSQL retry #${count} due to:`, error.message);
  },
  
  // –õ–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è client
  retryLimit: 3
});

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Drizzle ORM
export const db = drizzle(client, { schema });

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createTablesIfNotExist() {
  return withDatabaseRetry(async () => {
    console.log('Checking and creating database tables if needed...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä—è–º—ã–º–∏ SQL –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await client`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        is_regulator BOOLEAN NOT NULL DEFAULT false,
        regulator_balance TEXT NOT NULL DEFAULT '0',
        last_nft_generation TIMESTAMP,
        nft_generation_count INTEGER NOT NULL DEFAULT 0
      )
    `;
    
    await client`
      CREATE TABLE IF NOT EXISTS cards (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        type TEXT NOT NULL,
        number TEXT NOT NULL,
        expiry TEXT NOT NULL,
        cvv TEXT NOT NULL,
        balance TEXT NOT NULL DEFAULT '0',
        btc_balance TEXT NOT NULL DEFAULT '0',
        eth_balance TEXT NOT NULL DEFAULT '0',
        btc_address TEXT,
        eth_address TEXT
      )
    `;
    
    await client`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        from_card_id INTEGER NOT NULL,
        to_card_id INTEGER,
        amount TEXT NOT NULL,
        converted_amount TEXT NOT NULL,
        type TEXT NOT NULL,
        wallet TEXT,
        status TEXT NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW(),
        description TEXT NOT NULL DEFAULT '',
        from_card_number TEXT NOT NULL,
        to_card_number TEXT
      )
    `;
    
    await client`
      CREATE TABLE IF NOT EXISTS exchange_rates (
        id SERIAL PRIMARY KEY,
        usd_to_uah TEXT NOT NULL,
        btc_to_usd TEXT NOT NULL,
        eth_to_usd TEXT NOT NULL,
        updated_at TIMESTAMP NOT NULL DEFAULT NOW()
      )
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await client`
      CREATE TABLE IF NOT EXISTS session (
        sid TEXT PRIMARY KEY,
        sess JSON NOT NULL,
        expire TIMESTAMP(6) NOT NULL
      )
    `;
    
    console.log('Database tables created or verified successfully');
    return true;
  }, '—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 3);
}

// Test database connection and log content
async function logDatabaseContent() {
  return withDatabaseRetry(async () => {
    console.log('Testing database connection...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let usersResult: schema.User[] = [];
    try {
      usersResult = await db.select().from(schema.users);
      console.log('Successfully connected to database');
      console.log('Users count:', usersResult.length);
    } catch (e) {
      console.log('Users table not ready yet or empty');
      usersResult = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã
    try {
      const cardsResult = await db.select().from(schema.cards);
      console.log('Cards count:', cardsResult.length);
    } catch (e) {
      console.log('Cards table not ready yet or empty');
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
    if (usersResult && usersResult.length === 0) {
      console.log('Database is empty, creating initial data...');
      await createDefaultData();
    }
    
  }, '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 3);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function createDefaultData() {
  return withDatabaseRetry(async () => {
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
    await db.insert(schema.exchangeRates).values({
      usdToUah: "40.5",
      btcToUsd: "65000",
      ethToUsd: "3500"
    });
    console.log('Created default exchange rates');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –Ω–æ –º—ã –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
  }, '—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ', 2);
}

// Export the initialization function
export async function initializeDatabase() {
  try {
    console.log('Initializing database tables...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await createTablesIfNotExist();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã
    await logDatabaseContent();
    
    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Database initialization failed:', error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    logError(error instanceof AppError ? error : new DatabaseError(
      `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${(error as Error).message}`
    ));
    
    throw error;
  }
}

// Handle graceful shutdown
process.on('SIGTERM', async () => {
  console.log('Received SIGTERM. Closing database connection...');
  await client.end();
});

process.on('SIGINT', async () => {
  console.log('Received SIGINT. Closing database connection...');
  await client.end();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã
export default {
  db,
  client,
  initializeDatabase,
  withDatabaseRetry
};
/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –í–∫–ª—é—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
 */

import axios from 'axios';
import { AppError, logError } from './error-handler';
import { withDatabaseRetry } from './new_modules/db';
import * as schema from '../../shared/schema';
import { client, db } from './new_modules/db';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BlockDaemon API
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkBlockDaemonApiAccess(): Promise<{
  available: boolean;
  message: string;
  details?: any;
}> {
  try {
    const BLOCKDAEMON_API_KEY = process.env.BLOCKDAEMON_API_KEY;
    
    if (!BLOCKDAEMON_API_KEY) {
      return {
        available: false,
        message: 'BlockDaemon API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
        details: {
          environmentVariables: Object.keys(process.env).filter(key => 
            key.includes('BLOCK') || 
            key.includes('API') || 
            key.includes('KEY')
          )
        }
      };
    }
    
    // –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const response = await axios.get(
      'https://svc.blockdaemon.com/universal/v1/status',
      {
        headers: {
          'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
          'Accept': 'application/json'
        },
        timeout: 5000
      }
    );
    
    return {
      available: true,
      message: 'BlockDaemon API –¥–æ—Å—Ç—É–ø–µ–Ω',
      details: {
        status: response.status,
        apiVersion: response.data?.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      }
    };
  } catch (error: any) {
    return {
      available: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ BlockDaemon API: ${error.message}`,
      details: {
        status: error.response?.status,
        data: error.response?.data,
        code: error.code
      }
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkDatabaseConnection(): Promise<{
  connected: boolean;
  message: string;
  details?: any;
}> {
  try {
    // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const result = await withDatabaseRetry(
      async () => client`SELECT current_timestamp as now`, 
      '–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 
      2
    );
    
    return {
      connected: true,
      message: '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      details: {
        timestamp: result?.[0]?.now || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        database: process.env.PGDATABASE || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        host: process.env.PGHOST || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      }
    };
  } catch (error: any) {
    return {
      connected: false,
      message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`,
      details: {
        code: error.code,
        errorCode: error.errorCode,
        pgErrorDetail: error.details
      }
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkCryptoAddresses(): Promise<{
  status: 'ok' | 'warning' | 'error';
  message: string;
  details?: any;
}> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç—ã
    const cards = await withDatabaseRetry(
      async () => db.select().from(schema.cards).where(sql => sql.eq(schema.cards.type, 'crypto')),
      '–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç',
      2
    );
    
    if (!cards || cards.length === 0) {
      return {
        status: 'warning',
        message: '–ö—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: { cardsCount: 0 }
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
    const invalidCards = cards.filter(card => {
      const hasBtcAddress = Boolean(card.btcAddress && card.btcAddress.length >= 26 && card.btcAddress.length <= 35);
      const hasEthAddress = Boolean(card.ethAddress && card.ethAddress.length === 42 && card.ethAddress.startsWith('0x'));
      
      return !(hasBtcAddress && hasEthAddress);
    });
    
    if (invalidCards.length > 0) {
      return {
        status: 'error',
        message: `–ù–∞–π–¥–µ–Ω—ã ${invalidCards.length} –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏`,
        details: {
          totalCards: cards.length,
          invalidCards: invalidCards.length,
          examples: invalidCards.slice(0, 3).map(card => ({
            id: card.id,
            btcAddress: card.btcAddress ? card.btcAddress.substring(0, 10) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            ethAddress: card.ethAddress ? card.ethAddress.substring(0, 10) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
          }))
        }
      };
    }
    
    return {
      status: 'ok',
      message: `–í—Å–µ ${cards.length} –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç –∏–º–µ—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞`,
      details: {
        cardsCount: cards.length
      }
    };
  } catch (error: any) {
    return {
      status: 'error',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤: ${error.message}`,
      details: {
        code: error.code,
        errorCode: error.errorCode
      }
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export async function fixStuckTransactions(): Promise<{
  fixed: boolean;
  message: string;
  details?: any;
}> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ "–∑–∞–≤–∏—Å—à–∏–µ" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤ —Å—Ç–∞—Ç—É—Å–µ pending –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);
    
    const stuckTransactions = await withDatabaseRetry(
      async () => db.select().from(schema.transactions)
        .where(sql => sql.and(
          sql.eq(schema.transactions.status, 'pending'),
          sql.lt(schema.transactions.createdAt, oneDayAgo)
        )),
      '–ø–æ–∏—Å–∫ –∑–∞–≤–∏—Å—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      2
    );
    
    if (!stuckTransactions || stuckTransactions.length === 0) {
      return {
        fixed: true,
        message: '–ó–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        details: { count: 0 }
      };
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${stuckTransactions.length} –∑–∞–≤–∏—Å—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const results = [];
    
    for (const tx of stuckTransactions) {
      try {
        // –î–ª—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if (tx.type === 'eth' || tx.type === 'eth_transfer') {
          await withDatabaseRetry(
            async () => db.update(schema.transactions)
              .set({ status: 'completed' })
              .where(sql => sql.eq(schema.transactions.id, tx.id)),
            `–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${tx.id}`,
            2
          );
          
          console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${tx.id} (ETH) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          results.push({ id: tx.id, type: tx.type, status: 'completed', success: true });
        }
        // –î–ª—è BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        else if (tx.type === 'btc' || tx.type === 'btc_transfer') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ txId —Å btc_tx
          if (tx.wallet && tx.wallet.startsWith('btc_tx_')) {
            await withDatabaseRetry(
              async () => db.update(schema.transactions)
                .set({ status: 'completed' })
                .where(sql => sql.eq(schema.transactions.id, tx.id)),
              `–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${tx.id}`,
              2
            );
            
            console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${tx.id} (BTC) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            results.push({ id: tx.id, type: tx.type, status: 'completed', success: true });
          } else {
            console.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${tx.id} (BTC) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ blockchain)`);
            results.push({ id: tx.id, type: tx.type, status: 'still_pending', success: false });
          }
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        else {
          console.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${tx.id} (${tx.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          results.push({ id: tx.id, type: tx.type, status: 'still_pending', success: false });
        }
      } catch (txError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${tx.id}: ${(txError as Error).message}`);
        results.push({ id: tx.id, type: tx.type, status: 'error', success: false, error: (txError as Error).message });
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    
    return {
      fixed: successCount > 0,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${stuckTransactions.length} –∑–∞–≤–∏—Å—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
      details: {
        total: stuckTransactions.length,
        success: successCount,
        results
      }
    };
  } catch (error: any) {
    return {
      fixed: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–∏—Å—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`,
      details: {
        code: error.code,
        errorCode: error.errorCode
      }
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export async function runDiagnostics(): Promise<{
  status: 'ok' | 'warning' | 'error';
  message: string;
  details: {
    api: any;
    database: any;
    cryptoAddresses: any;
    stuckTransactions: any;
  };
}> {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ BlockDaemon API...');
    const apiStatus = await checkBlockDaemonApiAccess();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const dbStatus = await checkDatabaseConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤...');
    const addressesStatus = await checkCryptoAddresses();
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const transactionsStatus = await fixStuckTransactions();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    let status: 'ok' | 'warning' | 'error' = 'ok';
    
    if (!apiStatus.available || !dbStatus.connected || addressesStatus.status === 'error' || !transactionsStatus.fixed) {
      status = 'error';
    } else if (addressesStatus.status === 'warning') {
      status = 'warning';
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messages = [];
    
    if (!apiStatus.available) messages.push('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    if (!dbStatus.connected) messages.push('–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    if (addressesStatus.status !== 'ok') messages.push(addressesStatus.message);
    if (!transactionsStatus.fixed) messages.push(transactionsStatus.message);
    
    const message = messages.length > 0 
      ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${messages.join(', ')}` 
      : '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';
    
    return {
      status,
      message,
      details: {
        api: apiStatus,
        database: dbStatus,
        cryptoAddresses: addressesStatus,
        stuckTransactions: transactionsStatus
      }
    };
  } catch (error: any) {
    logError(error);
    
    return {
      status: 'error',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`,
      details: {
        api: { available: false, message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏' },
        database: { connected: false, message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏' },
        cryptoAddresses: { status: 'error', message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏' },
        stuckTransactions: { fixed: false, message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏' }
      }
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export default {
  checkBlockDaemonApiAccess,
  checkDatabaseConnection,
  checkCryptoAddresses,
  fixStuckTransactions,
  runDiagnostics
};
import { ethers } from 'ethers';
import * as bitcoin from 'bitcoinjs-lib';
import { randomBytes, createHash } from 'crypto';
import * as Bip39 from 'bip39';
import { generateAddressesForUser, generateMnemonic, getAddressesFromMnemonic } from './seed-phrase.js';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ECPair –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel
let ECPair: any = null;

async function initECPair() {
  if (!ECPair) {
    try {
      const ecc = require('tiny-secp256k1');
      const ECPairFactory = require('ecpair');
      ECPair = ECPairFactory.default ? ECPairFactory.default(ecc) : ECPairFactory(ecc);
    } catch (error) {
      console.error('Failed to initialize ECPair:', error);
      throw error;
    }
  }
  return ECPair;
}

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö bitcoinjs-lib
const network = bitcoin.networks.bitcoin;

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ù–ê–°–¢–û–Ø–©–ò–ï –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
 * –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∏—Ä–∂–∞–º–∏
 * @param type –¢–∏–ø –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ ('btc' –∏–ª–∏ 'eth')
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
 */
export async function generateValidAddress(type: 'btc' | 'eth', userId: number): Promise<string> {
  console.log(`üîÑ [VERCEL] Generating ${type.toUpperCase()} address for user ${userId}...`);
  
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º seed-phrase –º–æ–¥—É–ª—å –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const { btcAddress, ethAddress } = await generateAddressesForUser(userId);
    
    if (type === 'btc') {
      console.log(`‚úÖ [VERCEL] Generated BTC address: ${btcAddress} for user: ${userId}`);
      return btcAddress;
    } else {
      console.log(`‚úÖ [VERCEL] Generated ETH address: ${ethAddress} for user: ${userId}`);
      return ethAddress;
    }
  } catch (error) {
    console.error(`‚ùå [VERCEL] Error generating ${type} address with seed-phrase:`, error);
    
    // Fallback - –ø—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if (type === 'btc') {
      const hash = createHash('sha256').update(`btc-${userId}-fallback`).digest('hex');
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π BTC –∞–¥—Ä–µ—Å —Ñ–æ—Ä–º–∞—Ç–∞ Legacy
      const address = '1' + hash.substring(0, 33);
      console.log(`üõ°Ô∏è [VERCEL] Generated BTC address (fallback): ${address} for user: ${userId}`);
      return address;
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ETH –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ ethers.js —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
      const hash = createHash('sha256').update(`eth-${userId}-fallback`).digest('hex');
      const privateKey = '0x' + hash;
      const wallet = new ethers.Wallet(privateKey);
      
      console.log(`üõ°Ô∏è [VERCEL] Generated ETH address (fallback): ${wallet.address} for user: ${userId}`);
      return wallet.address;
    }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç seed —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞
 */
export async function getSeedPhraseForUser(userId: number): Promise<string> {
  const { mnemonic } = await generateAddressesForUser(userId);
  return mnemonic;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Å–µ—Ç–∏ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –±–∏—Ä–∂–∞–º–∏
 * @param address –ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏  
 * @param type –¢–∏–ø –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ ('btc' –∏–ª–∏ 'eth')
 * @returns true –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export function validateCryptoAddress(address: string, type: 'btc' | 'eth'): boolean {
  if (!address) return false;

  try {
    const cleanAddress = address.trim();

    if (type === 'btc') {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if (cleanAddress.includes('BTC') || cleanAddress.includes('btc')) {
          console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π BTC –∞–¥—Ä–µ—Å: ${cleanAddress}, valid: false`);
          return false;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö Legacy –∏ P2SH –∞–¥—Ä–µ—Å–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1 –∏–ª–∏ 3)
        const legacyRegex = /^[13][a-km-zA-HJ-NP-Z0-9]{24,33}$/;

        // –î–ª—è SegWit –∞–¥—Ä–µ—Å–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å bc1)
        const bech32Regex = /^bc1[a-zA-HJ-NP-Z0-9]{39,59}$/;

        // –î–ª—è Taproot –∞–¥—Ä–µ—Å–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å bc1p)
        const taprootRegex = /^bc1p[a-km-zA-HJ-NP-Z0-9]{58,89}$/;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        const isValid = 
          legacyRegex.test(cleanAddress) || 
          bech32Regex.test(cleanAddress) ||
          taprootRegex.test(cleanAddress);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const noInvalidPattern = 
          !cleanAddress.includes('BTC') && 
          !cleanAddress.includes('btc') &&
          !/^1[0-9]{6,}$/.test(cleanAddress); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤–∏–¥–∞ 1000000...

        console.log(`Validating BTC address: ${cleanAddress}, valid: ${isValid && noInvalidPattern}`);
        return isValid && noInvalidPattern;
      } catch (error) {
        console.error(`Error validating BTC address: ${cleanAddress}`, error);
        return false;
      }
    } else if (type === 'eth') {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ETH –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ ethers.js
        const isValid = ethers.isAddress(cleanAddress);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (0x + 40 hex —Å–∏–º–≤–æ–ª–æ–≤)
        const formatRegex = /^0x[a-fA-F0-9]{40}$/;
        const hasValidFormat = formatRegex.test(cleanAddress);

        console.log(`Validating ETH address: ${cleanAddress}, valid: ${isValid && hasValidFormat}`);
        return isValid && hasValidFormat;
      } catch (error) {
        console.error(`Error validating ETH address: ${cleanAddress}`, error);
        return false;
      }
    }
  } catch (error) {
    console.error(`Error validating ${type} address:`, error);
    return false;
  }
  return false;
}

import type { Express } from "express";
import { createServer, type Server } from "http";
import fs from 'fs';
import path from 'path';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
declare module "express-session" {
  interface SessionData {
    user?: {
      id: number;
      username: string;
      is_regulator: boolean;
    };
  }
}
import { storage } from "./storage.js";
import { exportDatabase, importDatabase } from './database/backup.js';
import { setupAuth } from './auth.js';
import { startRateUpdates } from './rates.js';
import express from 'express';
import fetch from 'node-fetch';
import { getExchangeRate, createExchangeTransaction, getTransactionStatus } from './exchange-service.js';
import { getNews } from './news-service.js';
import { seaTableManager } from './utils/seatable.js';
import { generateValidAddress, validateCryptoAddress, getSeedPhraseForUser } from './utils/crypto.js';
import { hasBlockchainApiKeys } from './utils/blockchain.js';
import { generateAddressesForUser, isValidMnemonic, getAddressesFromMnemonic } from './utils/seed-phrase.js';
import { generateNFTImage } from './utils/nft-generator.js';
import { Telegraf } from 'telegraf';
import { db, closeConnectionsOnVercel } from './db.js';
import { eq } from 'drizzle-orm';
import { nfts, nftCollections } from '../shared/schema.js';
import nftRoutes from './controllers/nft-controller.js';
import nftImportRoutes from './controllers/nft-import-controller.js';
import nftMarketplaceRoutes from './controllers/nft-marketplace-controller.js';
import nftServerController from './controllers/nft-server-controller.js';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
import { staticAssetsRouter } from './routes/static-assets.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT
function generateNFTRarity(): string {
  const rarities = [
    { type: 'common', chance: 0.70 },
    { type: 'uncommon', chance: 0.20 },
    { type: 'rare', chance: 0.08 },
    { type: 'epic', chance: 0.017 },
    { type: 'legendary', chance: 0.003 }
  ];
  
  const randomValue = Math.random();
  let cumulativeChance = 0;
  
  for (const rarity of rarities) {
    cumulativeChance += rarity.chance;
    if (randomValue <= cumulativeChance) {
      return rarity.type;
    }
  }
  
  return 'common'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

function generateNFTName(rarity: string): string {
  const prefixes: Record<string, string[]> = {
    common: ['–û–±—ã—á–Ω—ã–π', '–ü—Ä–æ—Å—Ç–æ–π', '–ë–∞–∑–æ–≤—ã–π', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'],
    uncommon: ['–ù–µ–æ–±—ã—á–Ω—ã–π', '–£–ª—É—á—à–µ–Ω–Ω—ã–π', '–£–ª—É—á—à–µ–Ω–Ω—ã–π', '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'],
    rare: ['–†–µ–¥–∫–∏–π', '–¶–µ–Ω–Ω—ã–π', '–û—Å–æ–±—ã–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π'],
    epic: ['–≠–ø–∏—á–µ—Å–∫–∏–π', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', '–ú–æ—â–Ω—ã–π', '–í—ã–¥–∞—é—â–∏–π—Å—è'],
    legendary: ['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π', '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π']
  };
  
  const nouns = [
    '–¢–æ–∫–µ–Ω', '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç', '–ê–º—É–ª–µ—Ç', '–¢–∞–ª–∏—Å–º–∞–Ω', '–ö—Ä–∏—Å—Ç–∞–ª–ª', 
    '–ú–µ–¥–∞–ª—å–æ–Ω', '–°–∏–º–≤–æ–ª', '–ó–Ω–∞–∫', '–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–≠–º–±–ª–µ–º–∞',
    '–°–æ–∫—Ä–æ–≤–∏—â–µ', '–ñ–µ—Ç–æ–Ω', '–†–µ–ª–∏–∫–≤–∏—è', '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç', '–°—É–≤–µ–Ω–∏—Ä'
  ];
  
  const adjectives = [
    '–¶–∏—Ñ—Ä–æ–≤–æ–π', '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π', '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π', '–ë–ª–æ–∫—á–µ–π–Ω',
    '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π', '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–°–≤–µ—Ä–∫–∞—é—â–∏–π', '–ú–∞–≥–∏—á–µ—Å–∫–∏–π', '–ó–∞—â–∏—â–µ–Ω–Ω—ã–π',
    '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π', '–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π', '–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π', '–¶–µ–Ω–Ω—ã–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π'
  ];
  
  const randomPrefix = prefixes[rarity][Math.floor(Math.random() * prefixes[rarity].length)];
  const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
  
  return `${randomPrefix} ${randomAdjective} ${randomNoun} Bnalbank`;
}

function generateNFTDescription(rarity: string): string {
  const descriptions: Record<string, string[]> = {
    common: [
      '–û–±—ã—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Bnalbank.',
      '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π NFT-—Ç–æ–∫–µ–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –±–∞–∑–æ–≤–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ.',
      '–ü—Ä–æ—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã Bnalbank.'
    ],
    uncommon: [
      '–ù–µ–æ–±—ã—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ Bnalbank.',
      '–£–ª—É—á—à–µ–Ω–Ω—ã–π NFT-—Ç–æ–∫–µ–Ω, –æ–±–ª–∞–¥–∞—é—â–∏–π –æ—Å–æ–±—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.',
      '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –≤—ã–¥–µ–ª—è—é—â–∏–π—Å—è —Å—Ä–µ–¥–∏ –æ–±—ã—á–Ω—ã—Ö.'
    ],
    rare: [
      '–†–µ–¥–∫–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤, –æ–±–ª–∞–¥–∞—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —ç–º–∏—Å—Å–∏–µ–π.',
      '–¶–µ–Ω–Ω—ã–π NFT-—Ç–æ–∫–µ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Bnalbank —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.',
      '–û—Å–æ–±—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–µ–¥–∫–æ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Bnalbank.'
    ],
    epic: [
      '–≠–ø–∏—á–µ—Å–∫–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.',
      '–í—ã–¥–∞—é—â–∏–π—Å—è NFT-—Ç–æ–∫–µ–Ω —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –≤—ã—Å–æ–∫–æ–π —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.',
      '–ú–æ—â–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –æ–±–ª–∞–¥–∞—é—â–∏–π –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π.'
    ],
    legendary: [
      '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ Bnalbank.',
      '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π NFT-—Ç–æ–∫–µ–Ω, –æ–±–ª–∞–¥–∞—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ —è–≤–ª—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª–æ–º —Å—Ç–∞—Ç—É—Å–∞.',
      '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –≥–æ—Ä–¥–æ—Å—Ç—å –ª—é–±–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.'
    ]
  };
  
  const randomDescription = descriptions[rarity][Math.floor(Math.random() * descriptions[rarity].length)];
  return `${randomDescription} –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleDateString()}`;
}

// Auth middleware to ensure session is valid
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback
function getUserId(req: express.Request): number {
  return req.user?.id || 999; // fallback ID –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
}

function ensureAuthenticated(req: express.Request, res: express.Response, next: express.NextFunction) {
  try {
    console.log('üîê Auth check - Session ID:', req.sessionID, 'User:', req.user?.username || 'none');
    
    if (req.isAuthenticated() && req.user) {
      console.log('‚úÖ Authentication successful for user:', req.user.username);
      return next();
    }
    
    console.log('‚ùå Authentication failed - isAuthenticated:', req.isAuthenticated(), 'user:', !!req.user);
    res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  } catch (error) {
    console.error('‚ùå Authentication middleware error:', error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
  }
}


// Register routes
export async function registerRoutes(app: Express): Promise<Server> {
  const httpServer = createServer(app);

  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));

  setupAuth(app);
  
  // Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è DB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ Vercel –ø–æ—Å–ª–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use('/api', (req, res, next) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ res.end
    const originalEnd = res.end.bind(res);
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º res.end –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ Vercel
    res.end = function(...args: any[]) {
      // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      originalEnd(...args);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Vercel
      closeConnectionsOnVercel();
    } as any;
    
    next();
  });
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ë–î
  // startRateUpdates(httpServer, '/ws');
  
  // –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É —Å NFT –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –¥–ª—è NFT —Ä–µ—Å—É—Ä—Å–æ–≤
  app.use('/bored_ape_nft', express.static(path.join(process.cwd(), 'bored_ape_nft'), {
    setHeaders: (res, filePath) => {
      if (filePath.endsWith('.png')) {
        res.setHeader('Content-Type', 'image/png');
      } else if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
        res.setHeader('Content-Type', 'image/jpeg');
      } else if (filePath.endsWith('.avif')) {
        res.setHeader('Content-Type', 'image/avif');
      }
    }
  }));
  app.use('/public/assets/nft', express.static(path.join(process.cwd(), 'public/assets/nft'), {
    setHeaders: (res, filePath) => {
      if (filePath.endsWith('.png')) {
        res.setHeader('Content-Type', 'image/png');
      } else if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
        res.setHeader('Content-Type', 'image/jpeg');
      } else if (filePath.endsWith('.avif')) {
        res.setHeader('Content-Type', 'image/avif');
      }
    }
  }));
  
  // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö BAYC NFT
  app.use('/bayc_official', express.static(path.join(process.cwd(), 'public/bayc_official'), {
    setHeaders: (res, filePath) => {
      if (filePath.endsWith('.png')) {
        res.setHeader('Content-Type', 'image/png');
      } else if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
        res.setHeader('Content-Type', 'image/jpeg');
      } else if (filePath.endsWith('.avif')) {
        res.setHeader('Content-Type', 'image/avif');
      }
    }
  }));
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  app.use(staticAssetsRouter);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è NFT
  app.get('/api/nft/image-check', (req, res) => {
    import('node:http').then(http => {
      const imagePath = req.query.path;
      
      if (!imagePath) {
        return res.status(400).json({ 
          success: false, 
          message: '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é' 
        });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ image-server –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      const proxyOptions = {
        hostname: '127.0.0.1',
        port: 8080,
        path: `/image-check?path=${encodeURIComponent(imagePath.toString())}`,
        method: 'GET'
      };
      
      console.log(`Checking NFT image existence: ${imagePath}`);
      
      const proxyReq = http.request(proxyOptions, (proxyRes: any) => {
        // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        res.statusCode = proxyRes.statusCode || 200;
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        Object.keys(proxyRes.headers).forEach((key: string) => {
          res.setHeader(key, proxyRes.headers[key] || '');
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç
        let data = '';
        proxyRes.on('data', (chunk: Buffer) => {
          data += chunk.toString();
        });
        
        proxyRes.on('end', () => {
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            const result = JSON.parse(data);
            res.json(result);
          } catch (error) {
            console.error('Error parsing image check response:', error);
            res.status(500).json({ 
              success: false, 
              message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
              error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞'
            });
          }
        });
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      proxyReq.on('error', (error: Error) => {
        console.error('Image check proxy error:', error);
        res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          error: error.message
        });
      });
      
      proxyReq.end();
    }).catch(error => {
      console.error('Error importing http module:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è http'
      });
    });
  });

  // –ü—Ä–æ–∫—Å–∏ –¥–ª—è NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
  app.use('/nft-proxy', async (req, res) => {
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
      const http = await import('node:http');
      const fs = await import('node:fs');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç NFT-—Å–µ—Ä–≤–µ—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ 
      let nftServerPort = 8081; // –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±–Ω–æ–≤–ª–µ–Ω —Å 8080 –Ω–∞ 8081
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      if (typeof (global as any).nftServerPort === 'number') {
        nftServerPort = (global as any).nftServerPort;
        console.log(`[NFT Proxy] Using NFT server port from global variable: ${nftServerPort}`);
      } else {
        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
        try {
          const portFile = './nft-server-port.txt';
          if (fs.existsSync(portFile)) {
            const portData = fs.readFileSync(portFile, 'utf8').trim();
            const port = parseInt(portData);
            if (!isNaN(port) && port > 0) {
              nftServerPort = port;
              console.log(`[NFT Proxy] Using NFT server port from file: ${nftServerPort}`);
            }
          }
        } catch (err) {
          console.error('[NFT Proxy] Error reading port file:', err);
        }
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º /nft-proxy –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–µ URL
      const proxyUrl = req.url?.replace(/^\/nft-proxy/, '') || '';
      
      // –†–∞–∑–¥–µ–ª—è–µ–º URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const [baseUrl, queryString] = proxyUrl.split('?');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      console.log(`[NFT Proxy] Proxying request for: ${proxyUrl} (baseUrl: ${baseUrl}, query: ${queryString || '–Ω–µ—Ç'})`);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Mutant Ape –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (baseUrl.includes('mutant_ape')) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        res.setHeader('Surrogate-Control', 'no-store');
      }
      
      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è collection
      let collection = '';
      if (queryString) {
        const params = new URLSearchParams(queryString);
        collection = params.get('collection') || '';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Mutant Ape —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ collection
      if (baseUrl.includes('mutant_ape_nft') || baseUrl.includes('mutant_ape_official')) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ collection
        const urlType = baseUrl.includes('mutant_ape_official') ? 'official' : 'mutant'; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'mutant' –≤–º–µ—Å—Ç–æ 'regular'
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—É collection, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        let collectionType = collection;
        
        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä mutant=true, —Ç–æ —ç—Ç–æ Mutant Ape
        if (!collectionType && queryString && new URLSearchParams(queryString).get('mutant') === 'true') {
          collectionType = 'mutant';
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–∏–ø–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ URL
        if (!collectionType) {
          collectionType = urlType;
        }
        
        console.log(`[NFT Proxy DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Mutant Ape: ${baseUrl}`);
        console.log(`[NFT Proxy DEBUG] –¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ URL: ${urlType}, –ø–∞—Ä–∞–º–µ—Ç—Ä collection: ${collection || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`[NFT Proxy DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionType}`);
        console.log(`[NFT Proxy DEBUG] –ü–æ–ª–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: ${queryString || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
        
        // –£–¥–∞–ª—è–µ–º —ç—Ç—É —á–∞—Å—Ç—å –∫–æ–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å,
      // –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ –≤—ã—à–µ
      }
      
      // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π NFT 
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ URL, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
      let finalPath = proxyUrl;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è Mutant Ape –∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞,
      // —Å–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      if ((baseUrl.includes('mutant_ape') || baseUrl.includes('nft_assets/mutant_ape')) && queryString) {
        const params = new URLSearchParams(queryString);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        const isOfficial = baseUrl.includes('mutant_ape_official');
        const isNftAssets = baseUrl.includes('nft_assets/mutant_ape');
        const collectionType = isOfficial ? 'official' : 'mutant';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É—Ç–∏ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        let dirPath = isOfficial ? 'mutant_ape_official' : 'mutant_ape_nft';
        if (isNftAssets) {
          dirPath = 'nft_assets/mutant_ape';
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä collection –∑–∞–¥–∞–Ω
        if (!params.has('collection')) {
          params.set('collection', collectionType);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä dir, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        if (!params.has('dir') || isNftAssets) {
          params.set('dir', dirPath);
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        finalPath = `${baseUrl}?${params.toString()}`;
        console.log(`[NFT Proxy] –°–æ–∑–¥–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –¥–ª—è Mutant Ape: ${finalPath}, dir=${dirPath}`);
      }
      
      const proxyOptions = {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º 127.0.0.1 –≤–º–µ—Å—Ç–æ 0.0.0.0 –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        hostname: '127.0.0.1',
        port: nftServerPort,
        path: finalPath, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
        method: req.method,
        headers: { ...req.headers, host: `localhost:${nftServerPort}` }
      };
      
      console.log(`Proxying NFT request: ${req.url} -> http://127.0.0.1:${nftServerPort}${finalPath}`);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à NFT —Å–µ—Ä–≤–µ—Ä
      const proxyReq = http.request(proxyOptions, (proxyRes: any) => {
        // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        res.statusCode = proxyRes.statusCode || 200;
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        Object.keys(proxyRes.headers).forEach((key: string) => {
          res.setHeader(key, proxyRes.headers[key] || '');
        });
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        proxyRes.pipe(res);
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      proxyReq.on('error', (error: Error) => {
        console.error('NFT proxy error:', error);
        res.statusCode = 500;
        res.end('Internal Server Error');
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ
      if (req.readable) {
        req.pipe(proxyReq);
      } else {
        proxyReq.end();
      }
    } catch (error) {
      console.error('Error in NFT proxy:', error);
      res.statusCode = 500;
      res.end('Internal Server Error');
    }
  });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è NFT
  app.use('/api/nft', nftRoutes);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å /api/nft)
  app.use('/api/nft/marketplace', nftMarketplaceRoutes);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ NFT
  app.use('/api/nft-import', nftImportRoutes);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞
  app.use('/api/nft-server', nftServerController);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≥–∏—Ä—É–µ—Ç –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –∫ API (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û –º–∞—Ä—à—Ä—É—Ç–æ–≤)
  app.use('/api', (req, res, next) => {
    console.log(`üîç API –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl} - IP: ${req.ip}`);
    next();
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º –¥–ª—è /api/nft/collections –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–Ω–¥–µ—Ä-–≤–µ—Ä—Å–∏–µ–π
  app.get('/api/nft-collections', ensureAuthenticated, async (req, res) => {
    try {
      console.log('–û–¢–õ–ê–î–ö–ê: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç /api/nft-collections');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (!req.session.user) {
        console.log('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π');
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const username = req.session.user;
      const user = await storage.getUserByUsername(req.body.username);
      
      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π');
        return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      console.log(`–û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω user ${user.id} (${username}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ /api/nft-collections`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collections = await db.select().from(nftCollections);
      console.log(`–û–¢–õ–ê–î–ö–ê: –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ nftCollections –≤–µ—Ä–Ω—É–ª ${collections.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º NFT –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collectionsWithNFTs = await Promise.all(collections.map(async (collection) => {
        const collectionNFTs = await db.select().from(nfts).where(eq(nfts.collectionId, collection.id));
        console.log(`–û–¢–õ–ê–î–ö–ê: –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collection.id} —Å–æ–¥–µ—Ä–∂–∏—Ç ${collectionNFTs.length} NFT`);
        return {
          ...collection,
          nfts: collectionNFTs
        };
      }));
      
      console.log(`–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ ${collectionsWithNFTs.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç`);
      
      res.status(200).json(collectionsWithNFTs);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
  app.get("/api/rates", async (req, res) => {
    try {
      const rates = await storage.getLatestExchangeRates();
      res.json(rates);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:", error);
      // Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      const fallbackRates = {
        id: 1,
        usdToUah: "40.5",
        btcToUsd: "65000", 
        ethToUsd: "3500",
        updatedAt: new Date()
      };
      res.json(fallbackRates);
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–µ–π –±–ª–æ–∫—á–µ–π–Ω–∞
  app.get("/api/blockchain/status", (req, res) => {
    try {
      const apiStatus = hasBlockchainApiKeys();
      res.json({
        available: apiStatus.available,
        blockdaemon: apiStatus.blockdaemon || false,
        reason: apiStatus.reason || null,
        mode: apiStatus.available ? 'real' : 'simulation'
      });
    } catch (error) {
      console.error("Error checking blockchain API status:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–µ–π" });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
  app.post("/api/create-regulator", async (req, res) => {
    try {
      const { username, password, balance = "100000" } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ 
          success: false, 
          message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å" 
        });
      }

      console.log(`Creating regulator user: ${username}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await storage.getUserByUsername(username);
      if (existingUser) {
        return res.status(400).json({
          success: false,
          message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
        });
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
      const regulatorUser = await storage.createUser({
        username: username,
        password: password,
        is_regulator: true,
        regulator_balance: balance,
        nft_generation_count: 0
      });

      console.log(`Successfully created regulator user: ${username} with ID: ${regulatorUser.id}`);

      res.json({
        success: true,
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–µ–≥—É–ª—è—Ç–æ—Ä ${username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
        user: {
          id: regulatorUser.id,
          username: regulatorUser.username,
          is_regulator: regulatorUser.is_regulator,
          regulator_balance: regulatorUser.regulator_balance
        }
      });

    } catch (error) {
      console.error("Error creating regulator:", error);
      res.status(500).json({
        success: false,
        message: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞"
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/cards", ensureAuthenticated, async (req, res) => {
    try {
      const userId = getUserId(req);
      console.log(`‚úÖ [VERCEL] Authentication successful for user: ${req.user?.username || 'unknown'}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π timeout –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–∞
      const cardsPromise = storage.getCardsByUserId(userId);
      const timeoutPromise = new Promise<never>((_, reject) => {
        setTimeout(() => reject(new Error(`User cards fetch timed out after 45000ms`)), 45000); // –£–í–ï–õ–ò–ß–ò–õ–ò –¥–æ 45 —Å–µ–∫—É–Ω–¥
      });
      
      const cards = await Promise.race([cardsPromise, timeoutPromise]);
      console.log(`üí≥ [VERCEL] –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: ${cards.length} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      if (cards.length === 0) {
        console.log(`üí≥ [VERCEL] –ö–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await storage.createDefaultCardsForUser(userId);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã —Å–Ω–æ–≤–∞
        const newCards = await storage.getCardsByUserId(userId);
        console.log(`üí≥ [VERCEL] –°–æ–∑–¥–∞–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ä—Ç: ${newCards.length}`);
        res.json(newCards);
      } else {
        res.json(cards);
      }
    } catch (error) {
      console.error("‚ùå [VERCEL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:", error);
      
      // FALLBACK: –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
      const fallbackCards = [
        {
          id: 1,
          userId: userId,
          type: 'usd',
          number: '4149 4993 4401 8888',
          expiry: '12/28',
          cvv: '123',
          balance: '1000.00',
          btcBalance: '0.00000000',
          ethBalance: '0.00000000',
          kichcoinBalance: '0.00000000',
          btcAddress: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
          ethAddress: '0x742d35Cc6634C0532925a3b8D48C405f164C2546',
          tonAddress: 'EQC8eLIsQ4QLssWiJ_lqxShW1w7T1G11cfh-gFSRnMze64HI'
        },
        {
          id: 2,
          userId: userId,
          type: 'uah',
          number: '4149 4993 4401 7777',
          expiry: '12/28',
          cvv: '456',
          balance: '40000.00',
          btcBalance: '0.00000000',
          ethBalance: '0.00000000',
          kichcoinBalance: '0.00000000',
          btcAddress: '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2',
          ethAddress: '0x8ba1f109551bD432803012645Hac136c',
          tonAddress: 'EQC8eLIsQ4QLssWiJ_lqxShW1w7T1G11cfh-gFSRnMze64HI'
        }
      ];
      
      console.log(`üõ°Ô∏è [VERCEL] –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      res.json(fallbackCards);
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post("/api/cards/generate", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user!.id!;
      console.log(`üí≥ [VERCEL] –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      
      // –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
      res.json({
        success: true,
        message: "–ö–∞—Ä—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã"
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –≤ —Ñ–æ–Ω–µ
      setTimeout(async () => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const existingCards = await storage.getCardsByUserId(userId);
          
          if (existingCards.length > 0) {
            console.log(`üí≥ [VERCEL] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –µ—Å—Ç—å ${existingCards.length} –∫–∞—Ä—Ç`);
            return;
          }
          
          console.log(`üí≥ [VERCEL] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
          
          // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤: USD, UAH, Crypto, KICHCOIN
          const cardTypes = ['usd', 'uah', 'crypto', 'kichcoin'];
          
          for (const type of cardTypes) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            const cardNumber = `4111 6811 2618 ${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;
            const expiry = "08/28";
            const cvv = Math.floor(Math.random() * 900 + 100).toString();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ
            let btcAddress = null;
            let ethAddress = null;
            let tonAddress = null;
            let btcBalance = "0";
            let ethBalance = "0";
            let kichcoinBalance = "0";
            
            if (type === 'crypto') {
              // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
              btcAddress = `1${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
              ethAddress = `0x${Math.random().toString(16).substring(2, 10)}${Math.random().toString(16).substring(2, 10)}${Math.random().toString(16).substring(2, 10)}${Math.random().toString(16).substring(2, 10)}`;
              btcBalance = "0.00000000";
              ethBalance = "0.00000000";
              
              console.log(`üí≥ [VERCEL] BTC: ${btcAddress}, ETH: ${ethAddress} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            } else if (type === 'kichcoin') {
              tonAddress = "EQC8eLIsQ4QLssWiJ_lqxShW1w7T1G11cfh-gFSRnMze64HI";
              kichcoinBalance = "100.00000000";
            }
            
            const balance = type === 'usd' ? '1000' : (type === 'uah' ? '40000' : (type === 'kichcoin' ? '0' : '0'));
            
            const cardData = {
              userId: userId,
              type: type,
              number: cardNumber,
              expiry: expiry,
              cvv: cvv,
              balance: balance,
              btcBalance: btcBalance,
              ethBalance: ethBalance,
              kichcoinBalance: kichcoinBalance,
              btcAddress: btcAddress,
              ethAddress: ethAddress,
              tonAddress: tonAddress
            };
            
            const newCard = await storage.createCard(cardData);
            console.log(`üí≥ [VERCEL] –°–æ–∑–¥–∞–Ω–∞ ${type} –∫–∞—Ä—Ç–∞ —Å ID ${newCard.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          }
          
          console.log(`üí≥ [VERCEL] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ 4 –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (error) {
          console.error(`‚ùå [VERCEL] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç –≤ —Ñ–æ–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        }
      }, 1000);
      
    } catch (error) {
      console.error("Card generation error:", error);
      res.status(500).json({ 
        success: false,
        message: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç" 
      });
    }
  });

  // Transfer funds
  app.post("/api/transfer", ensureAuthenticated, async (req, res) => {
    try {
      console.log(`üí∏ POST /api/transfer - –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω [VERCEL]`);
      console.log(`üí∏ [VERCEL] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(req.body, null, 2));
      
      const { fromCardId, recipientAddress, amount, transferType, cryptoType } = req.body;

      // Basic validation
      if (!fromCardId || !recipientAddress || !amount) {
        console.log(`‚ùå [VERCEL] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, { fromCardId, recipientAddress, amount });
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞" });
      }
      
      console.log(`üí∏ [VERCEL] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞. fromCardId: ${fromCardId}, amount: ${amount}, type: ${transferType}`);

      let result;
      if (transferType === 'crypto') {
        if (!cryptoType) {
          return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã" });
        }

        // Validate crypto address format
        if (!validateCryptoAddress(recipientAddress, cryptoType)) {
          return res.status(400).json({
            message: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ${cryptoType.toUpperCase()} –∞–¥—Ä–µ—Å–∞`
          });
        }

        result = await storage.transferCrypto(
          parseInt(fromCardId),
          recipientAddress.trim(),
          parseFloat(amount),
          cryptoType as 'btc' | 'eth'
        );
      } else {
        // For fiat transfers, validate card number
        const cleanCardNumber = recipientAddress.replace(/\s+/g, '');
        if (!/^\d{16}$/.test(cleanCardNumber)) {
          return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã" });
        }

        result = await storage.transferMoney(
          parseInt(fromCardId),
          cleanCardNumber,
          parseFloat(amount)
        );
      }

      if (!result.success) {
        return res.status(400).json({ message: result.error });
      }

      return res.json({
        success: true,
        message: "–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        transaction: result.transaction
      });

    } catch (error) {
      console.error("Transfer error:", error);
      res.status(500).json({
        success: false,
        message: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
      });
    }
  });

  // Create exchange transaction endpoint
  app.post("/api/exchange/create", ensureAuthenticated, async (req, res) => {
    try {
      const { fromCurrency, toCurrency, fromAmount, address, cryptoCard } = req.body;

      if (!fromCurrency || !toCurrency || !fromAmount || !address) {
        return res.status(400).json({ message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
      }

      // Basic card number format validation
      const cleanCardNumber = address.replace(/\s+/g, '');
      if (!/^\d{16}$/.test(cleanCardNumber)) {
        return res.status(400).json({
          message: "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä"
        });
      }

      // Get user's cards and verify crypto card ownership
      const userCards = await storage.getCardsByUserId(getUserId(req));
      const userCryptoCard = userCards.find(card =>
        card.type === 'crypto' &&
        card.id === cryptoCard.id
      );

      if (!userCryptoCard) {
        return res.status(400).json({
          message: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        });
      }

      // Validate sufficient balance
      const balance = fromCurrency === 'btc' ? userCryptoCard.btcBalance : userCryptoCard.ethBalance;
      if (parseFloat(balance) < parseFloat(fromAmount)) {
        return res.status(400).json({
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${fromCurrency.toUpperCase()} –¥–ª—è –æ–±–º–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${balance} ${fromCurrency.toUpperCase()}`
        });
      }

      const transaction = await createExchangeTransaction({
        fromCurrency,
        toCurrency,
        fromAmount,
        address: cleanCardNumber,
        cryptoCard: {
          btcBalance: userCryptoCard.btcBalance,
          ethBalance: userCryptoCard.ethBalance,
          btcAddress: userCryptoCard.btcAddress ?? ''
        }
      });

      res.json(transaction);
    } catch (error) {
      console.error("Create exchange error:", error);
      res.status(500).json({
        message: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–º–µ–Ω–∞"
      });
    }
  });

  // Get transaction status endpoint
  app.get("/api/exchange/status/:id", ensureAuthenticated, async (req, res) => {
    try {
      const { id } = req.params;
      const status = await getTransactionStatus(id);
      res.json(status);
    } catch (error) {
      console.error("Transaction status error:", error);
      res.status(500).json({
        message: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
      });
    }
  });

  app.get("/api/transactions", ensureAuthenticated, async (req, res) => {
    try {
      // Get all user's cards
      const userCards = await storage.getCardsByUserId(getUserId(req));
      const cardIds = userCards.map(card => card.id);

      // Get all transactions related to user's cards
      const transactions = await storage.getTransactionsByCardIds(cardIds);

      res.json(transactions);
    } catch (error) {
      console.error("Transactions fetch error:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π" });
    }
  });

  // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  app.get("/api/news-test", (req, res) => {
    console.log('‚úÖ Test route works!');
    res.json({ message: "Test route works!" });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
  app.get("/api/news", async (req, res) => {
    try {
      console.log('üì∞ GET /api/news - –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω');
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const fallbackNews = [
        {
          id: 1,
          title: "Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞",
          content: "–ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Ç...",
          date: new Date().toLocaleDateString('en-US'),
          category: 'crypto',
          source: 'Demo News'
        },
        {
          id: 2,
          title: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ –∏–∑—É—á–∞—é—Ç —Ü–∏—Ñ—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã",
          content: "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∞–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–≤...",
          date: new Date(Date.now() - 86400000).toLocaleDateString('en-US'),
          category: 'fiat',
          source: 'Demo News'
        }
      ];
      console.log(`üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–æ: ${fallbackNews.length}`);
      res.json(fallbackNews);
    } catch (error) {
      console.error("‚ùå Error fetching news:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π" });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SeaTable
  app.get("/api/seatable/data", ensureAuthenticated, async (req, res) => {
    try {
      const seaTableData = await seaTableManager.syncFromSeaTable();
      res.json(seaTableData);
    } catch (error) {
      console.error("Error fetching SeaTable data:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SeaTable" });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
  app.post("/api/seatable/update-regulator", ensureAuthenticated, async (req, res) => {
    try {
      await seaTableManager.updateRegulatorBalance(48983.08474);
      res.json({ message: "–ë–∞–ª–∞–Ω—Å —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω" });
    } catch (error) {
      console.error("Error updating regulator balance:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞" });
    }
  });

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram –±–æ—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  app.get("/api/telegram-info", (req, res) => {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ webhook –∏–ª–∏ polling
      const isRender = process.env.RENDER === 'true';
      const isProd = process.env.NODE_ENV === 'production';
      const botMode = (isRender && isProd) ? 'webhook' : 'polling';

      res.json({
        status: `Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ ${botMode}`,
        webapp_url: process.env.WEBAPP_URL || 'https://–∞-–Ω–µ—Ç-–ø–æ–∫–∞-url.repl.co',
        bot_username: "OOO_BNAL_BANK_bot",
        environment: isRender ? 'Render.com' : 'Replit',
        mode: isProd ? 'Production' : 'Development',
        commands: [
          { command: "/start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
          { command: "/url", description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" }
        ],
        note: botMode === 'polling' 
          ? "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Replit" 
          : "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ webhook –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞ Render.com"
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram –±–æ—Ç–µ:', error);
      res.status(500).json({ error: "Internal server error" });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook –æ—Ç Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Render.com)
  app.post('/webhook/:token', async (req, res) => {
    try {
      const { token } = req.params;
      const botToken = process.env.TELEGRAM_BOT_TOKEN || '7464154474:AAGxQmjQAqrT1WuH4ksuhExRiAc6UWX1ak4';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
      if (token !== botToken) {
        console.error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ webhook:', token);
        return res.status(403).send('Forbidden');
      }
      
      const update = req.body;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π update –æ—Ç Telegram
      console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram:', JSON.stringify(update, null, 2));
      
      // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
      if (update && update.message && update.message.text) {
        const message = update.message;
        const chatId = message.chat.id;
        const text = message.text;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const WEBAPP_URL = process.env.WEBAPP_URL || 
                           process.env.RENDER_EXTERNAL_URL || 
                           'https://app.example.com/';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text === '/start') {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É WebApp
          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: chatId,
              text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BNAL Bank!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
              reply_markup: {
                inline_keyboard: [[{
                  text: 'üè¶ –û—Ç–∫—Ä—ã—Ç—å BNAL Bank',
                  web_app: { url: WEBAPP_URL }
                }]]
              }
            })
          });
          
          console.log('–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', chatId);
        } else if (text === '/url') {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: chatId,
              text: `–¢–µ–∫—É—â–∏–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n${WEBAPP_URL}\n\n–≠—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π URL –Ω–∞ Render.com.`,
              reply_markup: {
                inline_keyboard: [[{
                  text: 'üè¶ –û—Ç–∫—Ä—ã—Ç—å BNAL Bank',
                  web_app: { url: WEBAPP_URL }
                }]]
              }
            })
          });
          
          console.log('–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /url –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', chatId);
        } else {
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: chatId,
              text: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/url - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å BNAL Bank", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.'
            })
          });
          
          console.log('–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', chatId);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK Telegram —Å–µ—Ä–≤–µ—Ä—É
      res.status(200).send('OK');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç Telegram:', error);
      res.status(500).send('Internal Server Error');
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞)
  app.get("/api/backup", ensureAuthenticated, async (req, res) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
      const user = await storage.getUser(req.user!.id!);
      if (!user || !user.is_regulator) {
        return res.status(403).json({ 
          message: "–¢–æ–ª—å–∫–æ —Ä–µ–≥—É–ª—è—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏" 
        });
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const { exportDatabase } = await import('./database/backup');
      const result = await exportDatabase();
      
      if (!result.success) {
        return res.status(500).json({ 
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", 
          error: result.error 
        });
      }
      
      res.json({
        message: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
        files: result.files
      });
    } catch (error) {
      console.error("Backup error:", error);
      res.status(500).json({ 
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
        error: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞)
  app.post("/api/restore", ensureAuthenticated, async (req, res) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
      const user = await storage.getUser(req.user!.id!);
      if (!user || !user.is_regulator) {
        return res.status(403).json({ 
          message: "–¢–æ–ª—å–∫–æ —Ä–µ–≥—É–ª—è—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"
        });
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      const { importDatabase } = await import('./database/backup');
      const success = await importDatabase();
      
      if (!success) {
        return res.status(500).json({ 
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" 
        });
      }
      
      res.json({ message: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" });
    } catch (error) {
      console.error("Restore error:", error);
      res.status(500).json({ 
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
        error: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è seed-—Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/crypto/seed-phrase", ensureAuthenticated, async (req, res) => {
    try {
      // –í middleware ensureAuthenticated –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ req.user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const userId = req.user!.id!;
      console.log(`üîë [VERCEL] –ó–∞–ø—Ä–æ—Å seed-—Ñ—Ä–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è seed-—Ñ—Ä–∞–∑—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
      const seedWords = [
        'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract',
        'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid'
      ];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 12 —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ userId
      const seedPhrase = Array.from({length: 12}, (_, i) => 
        seedWords[((userId * 7 + i * 3) % seedWords.length)]
      ).join(' ');
      
      // –ü—Ä–æ—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      const btcAddress = `1${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
      const ethAddress = `0x${Math.random().toString(16).substring(2, 10)}${Math.random().toString(16).substring(2, 10)}${Math.random().toString(16).substring(2, 10)}${Math.random().toString(16).substring(2, 10)}`;
      
      console.log(`üîë [VERCEL] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ seed-—Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      res.json({
        seedPhrase,
        addresses: {
          btc: btcAddress,
          eth: ethAddress
        },
        message: "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É seed-—Ñ—Ä–∞–∑—É –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ. –° –µ–µ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º."
      });
    } catch (error) {
      console.error("‚ùå [VERCEL] Error fetching seed phrase:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ seed-—Ñ—Ä–∞–∑—ã" });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ seed-—Ñ—Ä–∞–∑—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
  app.post("/api/crypto/verify-seed-phrase", ensureAuthenticated, async (req, res) => {
    try {
      const { seedPhrase } = req.body;
      
      if (!seedPhrase) {
        return res.status(400).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å seed-—Ñ—Ä–∞–∑—É" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å seed-—Ñ—Ä–∞–∑—ã
      if (!isValidMnemonic(seedPhrase)) {
        return res.status(400).json({ message: "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è seed-—Ñ—Ä–∞–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞." });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ seed-—Ñ—Ä–∞–∑—ã
      const { btcAddress, ethAddress } = await getAddressesFromMnemonic(seedPhrase);
      
      res.json({
        valid: true,
        addresses: {
          btc: btcAddress,
          eth: ethAddress
        },
        message: "Seed-—Ñ—Ä–∞–∑–∞ –≤–∞–ª–∏–¥–Ω–∞. –ê–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã."
      });
    } catch (error) {
      console.error("Error verifying seed phrase:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ seed-—Ñ—Ä–∞–∑—ã" });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render.com
  app.get("/api/render-status", (req, res) => {
    const isRender = process.env.RENDER === 'true';
    const isProd = process.env.NODE_ENV === 'production';
    const renderUrl = process.env.RENDER_EXTERNAL_URL;
    
    res.json({
      environment: isRender ? 'Render.com' : 'Replit',
      mode: isProd ? 'Production' : 'Development',
      render_url: renderUrl || 'Not available',
      disk_storage: isRender ? 'Available at /data' : 'Not available',
      database: {
        type: 'SQLite',
        path: isRender ? '/data/sqlite.db' : 'sqlite.db',
        status: 'Connected'
      },
      telegram_bot: {
        mode: (isRender && isProd) ? 'webhook' : 'polling',
        webhook_url: isRender ? `${renderUrl}/webhook/${process.env.TELEGRAM_BOT_TOKEN}` : 'Not available'
      }
    });
  });
  
  // NFT API –º–∞—Ä—à—Ä—É—Ç—ã
  
  // –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  app.get("/api/test/nft-card", async (req, res) => {
    try {
      const { rarity = 'common' } = req.query;
      const image = await generateNFTImage(rarity as any);
      res.json({ success: true, image });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT:', error);
      res.status(500).json({ success: false, error: String(error) });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get("/api/test/nft-images", async (req, res) => {
    try {
      const publicDir = path.join(process.cwd(), 'public/assets/nft/fixed');
      const clientDir = path.join(process.cwd(), 'client/public/assets/nft/fixed');
      
      let files: string[] = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
      const publicExists = fs.existsSync(publicDir);
      const clientExists = fs.existsSync(clientDir);
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
      if (publicExists) {
        const publicFiles = fs.readdirSync(publicDir)
          .filter(file => file.endsWith('.jpg'))
          .map(file => `/assets/nft/fixed/${file}`);
        files = [...files, ...publicFiles];
      }
      
      if (clientExists && clientDir !== publicDir) {
        const clientFiles = fs.readdirSync(clientDir)
          .filter(file => file.endsWith('.jpg'))
          .map(file => `/assets/nft/fixed/${file}`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        const allFiles = new Set([...files, ...clientFiles]);
        files = Array.from(allFiles);
      }
      
      res.json({ 
        success: true, 
        images: files,
        publicDirExists: publicExists,
        clientDirExists: clientExists,
        publicDirPath: publicDir,
        clientDirPath: clientDir
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      res.status(500).json({ success: false, error: String(error) });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NFT (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
  app.get("/api/nft/daily-limit", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      // –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é NFT, –ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω
      return res.json({ 
        canGenerate: true,
        message: "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT"
      });
    } catch (error) {
      console.error("Error checking NFT generation ability:", error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT" });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ NFT –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  app.get("/api/nft-import/info", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      const username = req.user?.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω (—Ä–µ–≥—É–ª—è—Ç–æ—Ä)
      if (username !== 'admin') {
        return res.status(403).json({ 
          success: false, 
          error: "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª" 
        });
      }
      
      const { countBoredApeImages } = require('./utils/import-bored-apes-to-marketplace');
      const imageInfo = await countBoredApeImages();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö NFT
      const { Pool } = require('pg');
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL
      });
      const client = await pool.connect();
      try {
        const result = await client.query(`
          SELECT COUNT(*) as count 
          FROM nft 
          WHERE collection_name = 'Bored Ape Yacht Club'
        `);
        const importedCount = parseInt(result.rows[0].count);
        
        res.json({
          success: true,
          images: imageInfo,
          imported: importedCount
        });
      } finally {
        client.release();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–º–ø–æ—Ä—Ç–µ NFT:", error);
      res.status(500).json({ success: false, error: String(error) });
    }
  });
  
  app.post("/api/nft-import/start", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      const username = req.user?.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω (—Ä–µ–≥—É–ª—è—Ç–æ—Ä)
      if (username !== 'admin') {
        return res.status(403).json({ 
          success: false, 
          error: "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª" 
        });
      }
      
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ë–î —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ
        const { Pool } = require('pg');
        const pool = new Pool({
          connectionString: process.env.DATABASE_URL
        });
        (global as any).pool = pool;
        
        const { importBoredApesToMarketplace } = require('./utils/import-bored-apes-to-marketplace');
        const result = await importBoredApesToMarketplace();
        
        res.json(result);
      } catch (importError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ NFT:", importError);
        res.status(500).json({ 
          success: false, 
          error: String(importError)
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–º–ø–æ—Ä—Ç–∞ NFT:", error);
      res.status(500).json({ 
        success: false, 
        error: String(error) 
      });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  app.post("/api/admin/run-script", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      const username = req.user?.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω (—Ä–µ–≥—É–ª—è—Ç–æ—Ä)
      if (username !== 'admin') {
        return res.status(403).json({ 
          success: false, 
          error: "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–∫—Ä–∏–ø—Ç—ã" 
        });
      }
      
      const { script } = req.body;
      
      if (!script) {
        return res.status(400).json({
          success: false,
          error: "–ù–µ —É–∫–∞–∑–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        });
      }
      
      // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
      const allowedScripts = [
        'node import-all-nft-to-marketplace.js',
        'node scripts/import-nft.js',
        'node neon-import.js'
      ];
      
      if (!allowedScripts.includes(script)) {
        return res.status(403).json({
          success: false,
          error: "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"
        });
      }
      
      console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å—Ç–∏–ª —Å–∫—Ä–∏–ø—Ç: ${script}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ child_process
      const { exec } = require('child_process');
      
      exec(script, (error: any, stdout: any, stderr: any) => {
        if (error) {
          console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${error}`);
          return res.status(500).json({
            success: false,
            error: String(error),
            stderr
          });
        }
        
        return res.json({
          success: true,
          output: stdout,
          warnings: stderr
        });
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:", error);
      res.status(500).json({ 
        success: false, 
        error: String(error) 
      });
    }
  });
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ NFT
  app.post("/api/nft/generate", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NFT
      // –õ–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ NFT –≤ –¥–µ–Ω—å
      const canGenerate = await storage.canGenerateNFT(userId);
      if (!canGenerate) {
        return res.status(403).json({ 
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å NFT", 
          message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞" 
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å NFT –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ
      const requestedRarity = req.body.rarity;
      const rarity = requestedRarity || generateNFTRarity();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      let collections = await storage.getNFTCollectionsByUserId(userId);
      let defaultCollection;
      
      if (collections.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π
        defaultCollection = await storage.createNFTCollection(
          userId, 
          "–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è NFT", 
          "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ NFT –≤ Bnalbank"
        );
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        defaultCollection = collections[0];
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è NFT
      const nftName = generateNFTName(rarity);
      const nftDescription = generateNFTDescription(rarity);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è NFT
      console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ NFT —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é: ${rarity}`);
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é generateNFTImage');
      const imagePath = await generateNFTImage(rarity);
      console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å NFT –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const nft = await storage.createNFT({
        collectionId: defaultCollection.id,
        name: nftName,
        description: nftDescription,
        imagePath: imagePath,
        tokenId: `NFT-${Date.now()}-${Math.floor(Math.random() * 1000000)}`,
        rarity: rarity,
        ownerId: userId, // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT
        attributes: {
          power: Math.floor(Math.random() * 100),
          agility: Math.floor(Math.random() * 100),
          wisdom: Math.floor(Math.random() * 100),
          luck: Math.floor(Math.random() * 100)
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await storage.updateUserNFTGeneration(userId);
      
      return res.json({ success: true, nft });
    } catch (error) {
      console.error("Error generating NFT:", error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NFT" });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
  app.get("/api/nft/gallery", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const nfts = await storage.getNFTsByUserId(userId);
      return res.json(nfts);
    } catch (error) {
      console.error("Error getting user NFTs:", error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/nft/status", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      
      return res.json({
        generationCount: user.nft_generation_count || 0,
        lastGeneration: user.last_nft_generation || null
      });
    } catch (error) {
      console.error("Error getting NFT status:", error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å NFT" });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/nft/collections", ensureAuthenticated, async (req, res) => {
    try {
      console.log('–û–¢–õ–ê–î–ö–ê: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç /api/nft/collections');
      
      const userId = req.user?.id;
      if (!userId) {
        console.log('–û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç');
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      console.log(`–û–¢–õ–ê–î–ö–ê: –ó–∞–ø—Ä–æ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç`);
      const collections = await storage.getNFTCollectionsByUserId(userId);
      console.log(`–û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ ${collections.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ storage.getNFTCollectionsByUserId`);
      
      return res.json(collections);
    } catch (error) {
      console.error("Error getting user NFT collections:", error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT
  app.post("/api/nft/collections", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const { name, description } = req.body;
      
      if (!name) {
        return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
      }
      
      const collection = await storage.createNFTCollection(userId, name, description || "");
      return res.json(collection);
    } catch (error) {
      console.error("Error creating NFT collection:", error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é NFT" });
    }
  });
  
  // API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤ —Ä–æ—Å–∫–æ—à–Ω–æ–º —Å—Ç–∏–ª–µ
  app.post("/api/nft/clear-all", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ storage –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const result = await storage.clearAllUserNFTs(userId);
      
      return res.json({ 
        success: result.success, 
        message: `–í—Å–µ NFT —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã (${result.count} —à—Ç.). –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ NFT –≤ —Ä–æ—Å–∫–æ—à–Ω–æ–º —Å—Ç–∏–ª–µ.`
      });
    } catch (error) {
      console.error('Error clearing NFTs:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å NFT" });
    }
  });

  // –ù–æ–≤—ã–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥–∞–∂–µ–π –∏ –¥–∞—Ä–µ–Ω–∏–µ–º NFT
  
  // –í–ê–ñ–ù–û: –ú–∞—Ä—à—Ä—É—Ç /api/nft/marketplace –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
  // server/controllers/nft-marketplace-controller.ts
  // –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ app.use('/api/nft/marketplace', nftMarketplaceRoutes);
  /*
  app.get("/api/nft/marketplace", async (req, res) => {
    try {
      console.log('[API] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞');
      const nftsForSale = await storage.getAvailableNFTsForSale();
      console.log(`[API] –ü–æ–ª—É—á–µ–Ω–æ ${nftsForSale.length} NFT –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö
      const userIds = [...new Set(nftsForSale.map(nft => nft.ownerId))];
      console.log(`[API] –ù–∞–π–¥–µ–Ω–æ ${userIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ NFT`);
      
      const users = await Promise.all(userIds.map(id => storage.getUser(id)));
      const userMap = users.reduce((map, user) => {
        if (user) map[user.id] = user;
        return map;
      }, {} as Record<number, any>);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö
      const enrichedNfts = nftsForSale.map(nft => ({
        ...nft,
        owner: userMap[nft.ownerId] ? {
          id: userMap[nft.ownerId].id,
          username: userMap[nft.ownerId].username
        } : undefined
      }));
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö NFT –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (enrichedNfts.length > 0) {
        const sampleNFTs = enrichedNfts.slice(0, Math.min(3, enrichedNfts.length));
        console.log('[API] –ü—Ä–∏–º–µ—Ä—ã NFT –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:');
        sampleNFTs.forEach(nft => {
          console.log(`[API] NFT ID: ${nft.id}, name: ${nft.name}, forSale: ${nft.forSale}, ownerId: ${nft.ownerId}, price: ${nft.price}, owner: ${nft.owner ? nft.owner.username : 'unknown'}`);
        });
      }
      
      console.log(`[API] –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${enrichedNfts.length} NFT –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞`);
      return res.json(enrichedNfts);
    } catch (error) {
      console.error('Error fetching NFTs for sale:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ NFT" });
    }
  });
  */
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT –ø–æ ID
  app.get("/api/nft/:id", async (req, res) => {
    try {
      const nftId = parseInt(req.params.id);
      if (isNaN(nftId)) {
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID NFT" });
      }
      
      const nft = await storage.getNFTById(nftId);
      if (!nft) {
        return res.status(404).json({ error: "NFT –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥–∞—á
      const owner = await storage.getUser(nft.ownerId);
      const transferHistory = await storage.getNFTTransferHistory(nftId);
      
      // –û–±–æ–≥–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥–∞—á –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userIdsSet = new Set([...transferHistory.map(t => t.fromUserId), ...transferHistory.map(t => t.toUserId)]);
      const userIds = Array.from(userIdsSet);
      const users = await Promise.all(userIds.map(id => storage.getUser(id)));
      const userMap = users.reduce((map, user) => {
        if (user) map[user.id] = user;
        return map;
      }, {} as Record<number, any>);
      
      const enrichedHistory = transferHistory.map(transfer => ({
        ...transfer,
        fromUser: userMap[transfer.fromUserId] ? {
          id: userMap[transfer.fromUserId].id,
          username: userMap[transfer.fromUserId].username
        } : undefined,
        toUser: userMap[transfer.toUserId] ? {
          id: userMap[transfer.toUserId].id,
          username: userMap[transfer.toUserId].username
        } : undefined
      }));
      
      return res.json({
        nft,
        owner: owner ? {
          id: owner.id,
          username: owner.username
        } : undefined,
        transferHistory: enrichedHistory
      });
    } catch (error) {
      console.error('Error fetching NFT details:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± NFT" });
    }
  });
  
  // –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
  app.post("/api/nft/:id/sell", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const nftId = parseInt(req.params.id);
      if (isNaN(nftId)) {
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID NFT" });
      }
      
      const { price } = req.body;
      if (!price || isNaN(parseFloat(price)) || parseFloat(price) <= 0) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É" });
      }
      
      const nft = await storage.getNFTById(nftId);
      if (!nft) {
        return res.status(404).json({ error: "NFT –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (nft.ownerId !== userId) {
        return res.status(403).json({ error: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ NFT" });
      }
      
      const updatedNft = await storage.updateNFTSaleStatus(nftId, true, price.toString());
      
      return res.json({
        success: true,
        nft: updatedNft,
        message: `NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ ${price} USD`
      });
    } catch (error) {
      console.error('Error putting NFT for sale:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É" });
    }
  });
  
  // –°–Ω—è—Ç–∏–µ NFT —Å –ø—Ä–æ–¥–∞–∂–∏
  app.post("/api/nft/:id/cancel-sale", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const nftId = parseInt(req.params.id);
      if (isNaN(nftId)) {
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID NFT" });
      }
      
      const nft = await storage.getNFTById(nftId);
      if (!nft) {
        return res.status(404).json({ error: "NFT –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (nft.ownerId !== userId) {
        return res.status(403).json({ error: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ NFT" });
      }
      
      const updatedNft = await storage.updateNFTSaleStatus(nftId, false);
      
      return res.json({
        success: true,
        nft: updatedNft,
        message: "NFT —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏"
      });
    } catch (error) {
      console.error('Error removing NFT from sale:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å NFT —Å –ø—Ä–æ–¥–∞–∂–∏" });
    }
  });
  
  // –ü–æ–∫—É–ø–∫–∞ NFT
  app.post("/api/nft/:id/buy", ensureAuthenticated, async (req, res) => {
    try {
      const buyerId = req.user?.id;
      if (!buyerId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const nftId = parseInt(req.params.id);
      if (isNaN(nftId)) {
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID NFT" });
      }
      
      const nft = await storage.getNFTById(nftId);
      if (!nft) {
        return res.status(404).json({ error: "NFT –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (!nft.forSale) {
        return res.status(400).json({ error: "–≠—Ç–æ—Ç NFT –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è" });
      }
      
      if (nft.ownerId === buyerId) {
        return res.status(400).json({ error: "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ NFT" });
      }
      
      // TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É
      
      // –ü–µ—Ä–µ–¥–∞–µ–º NFT –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
      const result = await storage.transferNFT(nftId, nft.ownerId, buyerId, 'sale', nft.price || undefined);
      
      return res.json({
        success: true,
        nft: result.nft,
        message: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ NFT –∑–∞ ${nft.price} USD`
      });
    } catch (error) {
      console.error('Error buying NFT:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å NFT" });
    }
  });
  
  // –î–∞—Ä–µ–Ω–∏–µ NFT
  app.post("/api/nft/:id/gift", ensureAuthenticated, async (req, res) => {
    try {
      const senderId = req.user?.id;
      if (!senderId) {
        return res.status(401).json({ error: "Unauthorized" });
      }
      
      const nftId = parseInt(req.params.id);
      if (isNaN(nftId)) {
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID NFT" });
      }
      
      const { recipientUsername } = req.body;
      if (!recipientUsername) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è" });
      }
      
      const nft = await storage.getNFTById(nftId);
      if (!nft) {
        return res.status(404).json({ error: "NFT –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (nft.ownerId !== senderId) {
        return res.status(403).json({ error: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ NFT" });
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const recipient = await storage.getUserByUsername(recipientUsername);
      if (!recipient) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (recipient.id === senderId) {
        return res.status(400).json({ error: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å NFT —Å–∞–º–æ–º—É —Å–µ–±–µ" });
      }
      
      // –ü–µ—Ä–µ–¥–∞–µ–º NFT –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
      const result = await storage.transferNFT(nftId, senderId, recipient.id, 'gift');
      
      return res.json({
        success: true,
        nft: result.nft,
        message: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientUsername}`
      });
    } catch (error) {
      console.error('Error gifting NFT:', error);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å NFT" });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ü–û–°–õ–ï –≤—Å–µ—Ö API —Ä–æ—É—Ç–æ–≤
  app.use(express.static('public', {
    index: false, // –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å index.html
    etag: true,   // –í–∫–ª—é—á–∏—Ç—å ETag –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    lastModified: true, // –í–∫–ª—é—á–∏—Ç—å Last-Modified –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    setHeaders: (res, path) => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ mime-—Ç–∏–ø—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (path.endsWith('.png')) {
        res.setHeader('Content-Type', 'image/png');
      } else if (path.endsWith('.jpg') || path.endsWith('.jpeg')) {
        res.setHeader('Content-Type', 'image/jpeg');
      } else if (path.endsWith('.avif')) {
        res.setHeader('Content-Type', 'image/avif');
      }
    }
  }));

  app.use(express.static('dist/client'));

  return httpServer;
}

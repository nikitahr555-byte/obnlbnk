import type { Express } from "express";
import { createServer, type Server } from "http";
import fs from 'fs';
import path from 'path';
import { storage } from "./storage.js";
import { exportDatabase, importDatabase } from './database/backup.js';
import { setupAuth } from './auth.js';
import { startRateUpdates } from './rates.js';
import express from 'express';
import fetch from 'node-fetch';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã —Å–µ—Å—Å–∏–∏
declare global {
  namespace Express {
    interface Session {
      user?: string;
    }
  }
}

import { getExchangeRate, createExchangeTransaction, getTransactionStatus } from './exchange-service.js';
import { getNews } from './news-service.js';
import { seaTableManager } from './utils/seatable.js';
import { generateValidAddress, validateCryptoAddress, getSeedPhraseForUser } from './utils/crypto.js';
import { hasBlockchainApiKeys } from './utils/blockchain.js';
import { generateAddressesForUser, isValidMnemonic, getAddressesFromMnemonic } from './utils/seed-phrase.js';
// import { generateNFTImage } from './utils/nft-generator.js'; // –ò—Å–∫–ª—é—á–µ–Ω–æ –¥–ª—è Vercel
import { db } from './db.js';
import { eq } from 'drizzle-orm';
import { nfts, nftCollections } from '../shared/schema.js';
import nftRoutes from './controllers/nft-controller.js';
import nftImportRoutes from './controllers/nft-import-controller.js';
import nftMarketplaceRoutes from './controllers/nft-marketplace-controller.js';
// import nftServerController from './controllers/nft-server-controller.js'; // –ò—Å–∫–ª—é—á–µ–Ω–æ –¥–ª—è Vercel
import { staticAssetsRouter } from './routes/static-assets.js';
import { serveStatic } from './vite-vercel.js';
import { setupDebugRoutes } from "./debug.js";

// Auth middleware —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Vercel
function ensureAuthenticated(req: express.Request, res: express.Response, next: express.NextFunction) {
  try {
    console.log('üîê [VERCEL] Auth check - Session ID:', req.sessionID);
    console.log('üîê [VERCEL] isAuthenticated:', req.isAuthenticated());
    console.log('üîê [VERCEL] User:', req.user ? `${req.user.username} (ID: ${req.user.id})` : 'none');
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (req.isAuthenticated() && req.user) {
      console.log('‚úÖ [VERCEL] Authentication successful for user:', req.user.username);
      return next();
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ cookie –¥–ª—è Vercel serverless
    const authCookie = req.cookies['vercel_auth_user'];
    if (authCookie) {
      try {
        const userData = JSON.parse(authCookie);
        if (userData && userData.username) {
          console.log('‚úÖ [VERCEL] Cookie authentication successful for user:', userData.username);
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ req –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          (req as any).user = userData;
          return next();
        }
      } catch (cookieError) {
        console.log('‚ùå [VERCEL] Cookie auth parse error:', cookieError);
      }
    }
    
    console.log('‚ùå [VERCEL] Authentication failed - isAuthenticated:', req.isAuthenticated(), 'user:', !!req.user);
    res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  } catch (error) {
    console.error('‚ùå [VERCEL] Authentication middleware error:', error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
  }
}

// Vercel-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è registerRoutes
export async function registerRoutes(app: Express): Promise<Server> {
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è Vercel...');

  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true, limit: '10mb' }));

  setupAuth(app);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
  app.use('/bored_ape_nft', express.static(path.join(process.cwd(), 'bored_ape_nft')));
  app.use('/public/assets/nft', express.static(path.join(process.cwd(), 'client/public/assets/nft')));
  app.use('/bayc_official', express.static(path.join(process.cwd(), 'client/public/bayc_official')));
  app.use(staticAssetsRouter);

  // API –º–∞—Ä—à—Ä—É—Ç—ã
  app.use('/api/nft', nftRoutes);
  app.use('/api/nft/marketplace', nftMarketplaceRoutes);
  app.use('/api/nft-import', nftImportRoutes);

  setupDebugRoutes(app);

  // –û—Å–Ω–æ–≤–Ω—ã–µ API endpoints
  app.get("/api/rates", async (req, res) => {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Vercel
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('API timeout')), 25000); // 25 —Å–µ–∫ –¥–ª—è Vercel
      });
      
      const ratesPromise = storage.getLatestExchangeRates();
      const rates = await Promise.race([ratesPromise, timeoutPromise]);
      
      if (!rates) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return res.json({
          usdToUah: "40.5",
          btcToUsd: "65000", 
          ethToUsd: "3500",
          updatedAt: new Date().toISOString()
        });
      }
      
      res.json(rates);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      res.json({
        usdToUah: "40.5",
        btcToUsd: "65000",
        ethToUsd: "3500",
        updatedAt: new Date().toISOString()
      });
    }
  });

  app.get("/api/cards", ensureAuthenticated, async (req, res) => {
    try {
      if (!req.user) return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

      const cards = await storage.getCardsByUserId(req.user.id);
      res.json(cards);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç" });
    }
  });

  app.get('/api/nft-collections', ensureAuthenticated, async (req, res) => {
    try {
      if (!req.user) return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Vercel
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('NFT API timeout')), 25000);
      });
      
      const collectionsPromise = (async () => {
        const collections = await db.select().from(nftCollections);
        const collectionsWithNFTs = await Promise.all(collections.map(async (collection) => {
          const collectionNFTs = await db.select().from(nfts).where(eq(nfts.collectionId, collection.id));
          return { ...collection, nfts: collectionNFTs };
        }));
        return collectionsWithNFTs;
      })();
      
      const collectionsWithNFTs = await Promise.race([collectionsPromise, timeoutPromise]);
      res.status(200).json(collectionsWithNFTs);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ 500
      res.status(200).json([]);
    }
  });

  app.get("/api/crypto/seed-phrase", ensureAuthenticated, async (req, res) => {
    try {
      if (!req.user) return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

      const seedPhrase = getSeedPhraseForUser(req.user.id);
      res.json({ seedPhrase });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed-—Ñ—Ä–∞–∑—ã:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed-—Ñ—Ä–∞–∑—ã" });
    }
  });

  if (process.env.NODE_ENV === 'production') {
    serveStatic(app);
  }

  console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Vercel');
  return createServer(app);
}

export default registerRoutes;

import type { Express } from "express";
import { createServer, type Server } from "http";
import fs from 'fs';
import path from 'path';
import { storage } from "./storage.js";
import { exportDatabase, importDatabase } from './database/backup.js';
import { setupAuth } from './auth.js';
import { startRateUpdates } from './rates.js';
import express from 'express';
import fetch from 'node-fetch';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã —Å–µ—Å—Å–∏–∏
declare global {
  namespace Express {
    interface Session {
      user?: string;
    }
  }
}

import { getExchangeRate, createExchangeTransaction, getTransactionStatus } from './exchange-service.js';
import { getNews } from './news-service.js';
import { seaTableManager } from './utils/seatable.js';
import { generateValidAddress, validateCryptoAddress, getSeedPhraseForUser } from './utils/crypto.js';
import { hasBlockchainApiKeys } from './utils/blockchain.js';
import { generateAddressesForUser, isValidMnemonic, getAddressesFromMnemonic } from './utils/seed-phrase.js';
// import { generateNFTImage } from './utils/nft-generator.js'; // –ò—Å–∫–ª—é—á–µ–Ω–æ –¥–ª—è Vercel
import { db, withDatabaseTimeout } from './db.js';
import { eq } from 'drizzle-orm';
import { nfts, nftCollections } from '../shared/schema.js';
import nftRoutes from './controllers/nft-controller.js';
import nftImportRoutes from './controllers/nft-import-controller.js';
import nftMarketplaceRoutes from './controllers/nft-marketplace-controller.js';
// import nftServerController from './controllers/nft-server-controller.js'; // –ò—Å–∫–ª—é—á–µ–Ω–æ –¥–ª—è Vercel
import { staticAssetsRouter } from './routes/static-assets.js';
import { serveStatic } from './vite-vercel.js';
import { setupDebugRoutes } from "./debug.js";

// Auth middleware —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Vercel
function ensureAuthenticated(req: express.Request, res: express.Response, next: express.NextFunction) {
  try {
    console.log('üîê [VERCEL] Auth check - Session ID:', req.sessionID);
    console.log('üîê [VERCEL] isAuthenticated:', req.isAuthenticated());
    console.log('üîê [VERCEL] User:', req.user ? `${req.user.username} (ID: ${req.user.id})` : 'none');
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (req.isAuthenticated() && req.user) {
      console.log('‚úÖ [VERCEL] Authentication successful for user:', req.user.username);
      return next();
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ cookie –¥–ª—è Vercel serverless
    const authCookie = req.cookies['vercel_auth_user'];
    if (authCookie) {
      try {
        const userData = JSON.parse(authCookie);
        if (userData && userData.username) {
          console.log('‚úÖ [VERCEL] Cookie authentication successful for user:', userData.username);
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ req –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          (req as any).user = userData;
          return next();
        }
      } catch (cookieError) {
        console.log('‚ùå [VERCEL] Cookie auth parse error:', cookieError);
      }
    }
    
    console.log('‚ùå [VERCEL] Authentication failed - isAuthenticated:', req.isAuthenticated(), 'user:', !!req.user);
    res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  } catch (error) {
    console.error('‚ùå [VERCEL] Authentication middleware error:', error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
  }
}

// Vercel-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è registerRoutes
export async function registerRoutes(app: Express): Promise<Server> {
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è Vercel...');

  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true, limit: '10mb' }));

  setupAuth(app);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
  app.use('/bored_ape_nft', express.static(path.join(process.cwd(), 'bored_ape_nft')));
  app.use('/public/assets/nft', express.static(path.join(process.cwd(), 'client/public/assets/nft')));
  app.use('/bayc_official', express.static(path.join(process.cwd(), 'client/public/bayc_official')));
  app.use(staticAssetsRouter);

  // API –º–∞—Ä—à—Ä—É—Ç—ã
  app.use('/api/nft', nftRoutes);
  app.use('/api/nft/marketplace', nftMarketplaceRoutes);
  app.use('/api/nft-import', nftImportRoutes);

  setupDebugRoutes(app);

  // –û—Å–Ω–æ–≤–Ω—ã–µ API endpoints
  app.get("/api/rates", async (req, res) => {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º HTTP –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
      res.setHeader('Cache-Control', 'public, max-age=300, s-maxage=300'); // 5 –º–∏–Ω—É—Ç –∫—ç—à
      res.setHeader('ETag', `"rates-${Math.floor(Date.now() / 300000)}"`); // ETag –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withDatabaseTimeout –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const rates = await withDatabaseTimeout(
        storage.getLatestExchangeRates(),
        8000,
        'Exchange rates fetch'
      );
      
      if (!rates) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return res.json({
          usdToUah: "40.5",
          btcToUsd: "65000", 
          ethToUsd: "3500",
          updatedAt: new Date().toISOString()
        });
      }
      
      res.json(rates);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      res.json({
        usdToUah: "40.5",
        btcToUsd: "65000",
        ethToUsd: "3500",
        updatedAt: new Date().toISOString()
      });
    }
  });

  app.get("/api/cards", ensureAuthenticated, async (req, res) => {
    try {
      if (!req.user || !req.user.id) return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withDatabaseTimeout –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
      const cards = await withDatabaseTimeout(
        storage.getCardsByUserId(req.user.id),
        8000,
        'User cards fetch'
      );
      
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP response
      res.setHeader('Cache-Control', 'private, max-age=60'); // 1 –º–∏–Ω—É—Ç–∞ –∫—ç—à –¥–ª—è –∫–∞—Ä—Ç
      res.json(cards);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:", error);
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Fallback –¥–ª—è –∫–∞—Ä—Ç –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î
      const fallbackCards = [
        {
          id: 1,
          userId: req.user.id,
          type: "virtual",
          number: "5555 5555 5555 5555",
          expiry: "12/28",
          cvv: "123",
          balance: "1000.00",
          btcBalance: "0.001",
          ethBalance: "0.01",
          kichcoinBalance: "100",
          btcAddress: null,
          ethAddress: null,
          tonAddress: null
        },
        {
          id: 2,
          userId: req.user.id,
          type: "crypto",
          number: "4444 4444 4444 4444",
          expiry: "12/27",
          cvv: "456",
          balance: "500.00",
          btcBalance: "0.002",
          ethBalance: "0.05",
          kichcoinBalance: "50",
          btcAddress: "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4",
          ethAddress: "0x742d35cc6634c0532925a3b8d8d3c2d4bb4c4e3",
          tonAddress: null
        }
      ];
      console.log('üö® [VERCEL] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
      res.json(fallbackCards);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω –≤ Vercel –≤–µ—Ä—Å–∏–∏)
  app.get("/api/news", async (req, res) => {
    try {
      console.log('üì∞ GET /api/news - –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω [VERCEL]');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const fallbackNews = [
        {
          id: 1,
          title: "Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞",
          content: "–ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Ç...",
          date: new Date().toLocaleDateString('en-US'),
          category: 'crypto',
          source: 'Financial News'
        },
        {
          id: 2,
          title: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ –∏–∑—É—á–∞—é—Ç —Ü–∏—Ñ—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã",
          content: "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∞–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–≤...",
          date: new Date(Date.now() - 86400000).toLocaleDateString('en-US'),
          category: 'fiat',
          source: 'Banking Times'
        },
        {
          id: 3,
          title: "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
          content: "OOO BNAL BANK –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π...",
          date: new Date(Date.now() - 172800000).toLocaleDateString('en-US'),
          category: 'banking',
          source: 'OOO BNAL BANK'
        }
      ];
      console.log(`üì∞ [VERCEL] –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–æ: ${fallbackNews.length}`);
      res.setHeader('Cache-Control', 'public, max-age=600'); // 10 –º–∏–Ω—É—Ç –∫—ç—à
      res.json(fallbackNews);
    } catch (error) {
      console.error("‚ùå [VERCEL] Error fetching news:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π" });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ request (helper)
  function getUserId(req: express.Request): number {
    return req.user?.id || 0;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω –≤ Vercel –≤–µ—Ä—Å–∏–∏)
  app.get("/api/transactions", ensureAuthenticated, async (req, res) => {
    try {
      console.log('üí≥ GET /api/transactions - –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω [VERCEL]');
      
      if (!req.user || !req.user.id) {
        return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withDatabaseTimeout –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
      const userCards = await withDatabaseTimeout(
        storage.getCardsByUserId(getUserId(req)),
        8000,
        'Get user cards'
      );
      const cardIds = userCards.map(card => card.id);

      const transactions = await withDatabaseTimeout(
        storage.getTransactionsByCardIds(cardIds),
        8000,
        'Get transactions'
      );

      console.log(`üí≥ [VERCEL] –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
      res.setHeader('Cache-Control', 'private, max-age=30'); // 30 —Å–µ–∫—É–Ω–¥ –∫—ç—à –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      res.json(transactions);
    } catch (error) {
      console.error("‚ùå [VERCEL] Transactions fetch error:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      res.json([]);
    }
  });

  app.get('/api/nft-collections', ensureAuthenticated, async (req, res) => {
    try {
      if (!req.user) return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });

      // –î–æ–±–∞–≤–ª—è–µ–º HTTP –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π
      res.setHeader('Cache-Control', 'public, max-age=600, s-maxage=600'); // 10 –º–∏–Ω—É—Ç –∫—ç—à
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withDatabaseTimeout –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ NFT –æ–ø–µ—Ä–∞—Ü–∏–π
      const collectionsWithNFTs = await withDatabaseTimeout(
        (async () => {
          const collections = await db.select().from(nftCollections);
          const collectionsWithNFTs = await Promise.all(collections.map(async (collection) => {
            const collectionNFTs = await db.select().from(nfts).where(eq(nfts.collectionId, collection.id));
            return { ...collection, nfts: collectionNFTs };
          }));
          return collectionsWithNFTs;
        })(),
        8000,
        'NFT collections fetch'
      );
      res.status(200).json(collectionsWithNFTs);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ 500
      res.status(200).json([]);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω –≤ Vercel –≤–µ—Ä—Å–∏–∏)
  app.post("/api/transfer", ensureAuthenticated, async (req, res) => {
    try {
      console.log('üí∏ POST /api/transfer - –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω [VERCEL]');
      const { fromCardId, recipientAddress, amount, transferType, cryptoType } = req.body;

      // Basic validation
      if (!fromCardId || !recipientAddress || !amount) {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞" });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withDatabaseTimeout –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤

      let result;
      if (transferType === 'crypto') {
        if (!cryptoType) {
          return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã" });
        }

        // Validate crypto address format
        if (!validateCryptoAddress(recipientAddress, cryptoType)) {
          return res.status(400).json({
            message: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ${cryptoType.toUpperCase()} –∞–¥—Ä–µ—Å–∞`
          });
        }

        result = await withDatabaseTimeout(
          storage.transferCrypto(
            parseInt(fromCardId),
            recipientAddress.trim(),
            parseFloat(amount),
            cryptoType as 'btc' | 'eth'
          ),
          25000,
          'Crypto transfer'
        );
      } else {
        // For fiat transfers, validate card number
        const cleanCardNumber = recipientAddress.replace(/\s+/g, '');
        if (!/^\d{16}$/.test(cleanCardNumber)) {
          return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã" });
        }

        result = await withDatabaseTimeout(
          storage.transferMoney(
            parseInt(fromCardId),
            cleanCardNumber,
            parseFloat(amount)
          ),
          25000,
          'Fiat transfer'
        );
      }

      if (!result.success) {
        return res.status(400).json({ message: result.error });
      }

      console.log('‚úÖ [VERCEL] –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
      return res.json({
        success: true,
        message: "–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        transaction: result.transaction
      });

    } catch (error) {
      console.error("‚ùå [VERCEL] Transfer error:", error);
      res.status(500).json({
        success: false,
        message: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
      });
    }
  });

  app.get("/api/crypto/seed-phrase", ensureAuthenticated, async (req, res) => {
    try {
      if (!req.user || !req.user.id) return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

      const seedPhrase = getSeedPhraseForUser(req.user.id);
      res.json({ seedPhrase });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed-—Ñ—Ä–∞–∑—ã:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed-—Ñ—Ä–∞–∑—ã" });
    }
  });

  if (process.env.NODE_ENV === 'production') {
    serveStatic(app);
  }

  console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Vercel');
  return createServer(app);
}

export default registerRoutes;

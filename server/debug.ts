/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –°–æ–¥–µ—Ä–∂–∏—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ BlockDaemon API
 */

import express from 'express';
import axios from 'axios';

const BLOCKDAEMON_API_KEY = process.env.BLOCKDAEMON_API_KEY;

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
 */
export function setupDebugRoutes(app: express.Express) {
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ BlockDaemon API
  app.get('/api/debug/blockchain-status', async (req, res) => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ BlockDaemon API –∏ –∫–ª—é—á–∞');
      console.log(`üîë API Key —Å—Ç–∞—Ç—É—Å: ${BLOCKDAEMON_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ' + BLOCKDAEMON_API_KEY.length + ')' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù!'}`);
      
      res.json({
        api_key_status: !!BLOCKDAEMON_API_KEY,
        key_length: BLOCKDAEMON_API_KEY ? BLOCKDAEMON_API_KEY.length : 0,
        environment: process.env.NODE_ENV || 'unknown'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ BlockDaemon API:', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  });

  // –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  app.get('/api/debug/test-eth-transaction', async (req, res) => {
    try {
      console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π");
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      const fromAddress = req.query.from as string || "0x742d35Cc6634C0532925a3b844Bc454e4438f44e";
      const toAddress = req.query.to as string || "0x19dE91Af973F404EDF5B4c093983a7c6E3EC8ccE";
      const amount = parseFloat(req.query.amount as string || "0.001");
      
      console.log(`üîÑ [TEST ETH] –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} ETH —Å ${fromAddress} –Ω–∞ ${toAddress}`);
      console.log(`üîë [TEST ETH] API Key —Å—Ç–∞—Ç—É—Å: ${BLOCKDAEMON_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ' + BLOCKDAEMON_API_KEY.length + ')' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù!'}`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ETH –≤ Wei –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const valueInWei = BigInt(Math.floor(amount * 1e18)).toString();
      console.log(`üí± [TEST ETH] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${amount} ETH = ${valueInWei} Wei`);
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Ethereum
      const transactionData = {
        from: fromAddress,
        to: toAddress,
        value: valueInWei,
        gas: 21000 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–∞–∑ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      };
      
      console.log(`üì§ [TEST ETH] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BlockDaemon API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
      console.log(JSON.stringify(transactionData, null, 2));
      
      const txURL = `https://svc.blockdaemon.com/ethereum/mainnet/tx/send`;
      console.log(`üåê [TEST ETH] URL –∑–∞–ø—Ä–æ—Å–∞: ${txURL}`);
      
      try {
        const txResponse = await axios.post(
          txURL,
          transactionData,
          {
            headers: {
              'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            timeout: 20000 // 20 —Å–µ–∫—É–Ω–¥
          }
        );
        
        console.log(`üì• [TEST ETH] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: ${txResponse.status}`);
        console.log(`üìä [TEST ETH] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, txResponse.data);
        
        const txId = txResponse.data?.transaction_hash || txResponse.data?.txid || txResponse.data?.txhash || txResponse.data?.tx_hash;
        
        if (txId) {
          console.log(`‚úÖ [TEST ETH] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TxID: ${txId}`);
          res.json({ 
            success: true, 
            message: '–¢–µ—Å—Ç–æ–≤–∞—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', 
            txId,
            response: txResponse.data 
          });
        } else {
          console.error(`‚ùå [TEST ETH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TxID –∏–∑ –æ—Ç–≤–µ—Ç–∞ API:`);
          console.error(JSON.stringify(txResponse.data));
          res.status(500).json({ 
            success: false, 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
            error: '–ù–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ API',
            response: txResponse.data
          });
        }
      } catch (error: any) {
        console.error(`‚ùå [TEST ETH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API:`);
        console.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ:`, error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.error(`   - –°—Ç–∞—Ç—É—Å:`, error.response?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.error(`   - –î–∞–Ω–Ω—ã–µ:`, error.response?.data || {});
        
        res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
          error: error.message,
          errorDetails: {
            status: error.response?.status,
            data: error.response?.data
          }
        });
      }
    } catch (error: any) {
      console.error(`‚ùå [TEST ETH] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
      res.status(500).json({ 
        success: false, 
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
        error: error.message 
      });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π –≤ BlockDaemon API
  app.get('/api/debug/blockdaemon-networks', async (req, res) => {
    try {
      if (!BLOCKDAEMON_API_KEY) {
        return res.status(400).json({ 
          success: false, 
          message: 'BlockDaemon API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
        });
      }
      
      const networksURL = 'https://svc.blockdaemon.com/universal/v1/networks';
      console.log(`üåê –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π: ${networksURL}`);
      
      const response = await axios.get(networksURL, {
        headers: {
          'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
          'Accept': 'application/json'
        }
      });
      
      res.json({
        success: true,
        networks: response.data
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π:', error.message);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π',
        error: error.message,
        details: error.response?.data
      });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ BlockDaemon API –¥–ª—è Ethereum
  app.get('/api/debug/ethereum-endpoints', async (req, res) => {
    try {
      if (!BLOCKDAEMON_API_KEY) {
        return res.status(400).json({ 
          success: false, 
          message: 'BlockDaemon API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
        });
      }
      
      // –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const endpointsToCheck = [
        'https://svc.blockdaemon.com/ethereum/mainnet/tx/send',
        'https://svc.blockdaemon.com/ethereum/mainnet/account',
        'https://svc.blockdaemon.com/universal/v1/ethereum/mainnet/tx',
        'https://svc.blockdaemon.com/universal/v1/ethereum/mainnet/account'
      ];
      
      console.log(`üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Ethereum –¥–ª—è –≤–∞—à–µ–≥–æ API –∫–ª—é—á–∞`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è HTTP OPTIONS
      const results = await Promise.all(
        endpointsToCheck.map(async url => {
          try {
            const response = await axios({
              method: 'options',
              url,
              headers: {
                'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
                'Accept': 'application/json'
              }
            });
            
            return {
              url,
              status: response.status,
              available: true,
              methods: response.headers['allow'] || 'Unknown'
            };
          } catch (error: any) {
            return {
              url,
              status: error.response?.status || 0,
              available: false,
              error: error.message,
              details: error.response?.data
            };
          }
        })
      );
      
      res.json({
        success: true,
        endpoints: results
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ethereum —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:', error.message);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ethereum —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
        error: error.message
      });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ Ethereum
  app.get('/api/debug/ethereum-protocols', async (req, res) => {
    try {
      if (!BLOCKDAEMON_API_KEY) {
        return res.status(400).json({ 
          success: false, 
          message: 'BlockDaemon API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
        });
      }
      
      const protocolsURL = 'https://svc.blockdaemon.com/ethereum/mainnet/protocols';
      console.log(`üåê –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ Ethereum: ${protocolsURL}`);
      
      const response = await axios.get(protocolsURL, {
        headers: {
          'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
          'Accept': 'application/json'
        }
      });
      
      res.json({
        success: true,
        protocols: response.data
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ Ethereum:', error.message);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ Ethereum',
        error: error.message,
        details: error.response?.data
      });
    }
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  app.get('/api/debug/ethereum-send-methods', async (req, res) => {
    try {
      if (!BLOCKDAEMON_API_KEY) {
        return res.status(400).json({ 
          success: false, 
          message: 'BlockDaemon API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
        });
      }
      
      const endpointURL = 'https://svc.blockdaemon.com/ethereum/mainnet/tx/send';
      console.log(`üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è URL: ${endpointURL}`);
      
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        const headResponse = await axios({
          method: 'head',
          url: endpointURL,
          headers: {
            'Authorization': `Bearer ${BLOCKDAEMON_API_KEY}`,
            'Accept': 'application/json'
          }
        });
        
        res.json({
          success: true,
          url: endpointURL,
          available: true,
          status: headResponse.status,
          headers: headResponse.headers
        });
      } catch (headError: any) {
        // –ï—Å–ª–∏ HEAD –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –æ—à–∏–±–∫—É
        console.log(`‚ö†Ô∏è HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª: ${headError.message}`);
        
        res.json({
          success: false,
          url: endpointURL,
          available: false,
          error: headError.message,
          status: headError.response?.status,
          data: headError.response?.data
        });
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH:', error.message);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH',
        error: error.message
      });
    }
  });
  
  console.log('‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}
// –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ TypeScript —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
import { spawn } from 'child_process';
import path from 'path';

console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ TypeScript —Å–µ—Ä–≤–µ—Ä–∞...');

const tryCommands = [
  'node --loader=ts-node/esm server/index.ts',
  'node --loader=@babel/register server/index.ts', 
  'npx ts-node server/index.ts',
  './node_modules/.bin/tsx server/index.ts'
];

async function tryStart() {
  for (const cmd of tryCommands) {
    try {
      console.log(`–ü—Ä–æ–±—É–µ–º: ${cmd}`);
      const [command, ...args] = cmd.split(' ');
      const child = spawn(command, args, { 
        stdio: 'inherit',
        env: { ...process.env, NODE_ENV: 'development' }
      });
      
      child.on('error', (error) => {
        console.log(`–û—à–∏–±–∫–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ${cmd}:`, error.message);
      });
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      if (!child.killed) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å: ${cmd}`);
        return child;
      }
    } catch (error) {
      console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å: ${cmd}`, error.message);
    }
  }
  
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
  return null;
}

tryStart();
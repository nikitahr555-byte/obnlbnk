/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –í–∫–ª—é—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è NFT Mutant Ape
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
const CLIENT_IMAGE_UTILS_PATH = path.join(process.cwd(), 'client', 'src', 'lib', 'image-utils.ts');

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è Mutant Ape
 */
function updateClientImageUtils() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(CLIENT_IMAGE_UTILS_PATH)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${CLIENT_IMAGE_UTILS_PATH}`);
    return false;
  }
  
  // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  const originalContent = fs.readFileSync(CLIENT_IMAGE_UTILS_PATH, 'utf8');
  
  // –í–∫–ª—é—á–∞–µ–º DEBUG_MODE –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  let updatedContent = originalContent.replace(/const DEBUG_MODE = (false|true);/g, 'const DEBUG_MODE = true;');
  
  if (updatedContent === originalContent) {
    console.log('‚ö†Ô∏è DEBUG_MODE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ, –ª–∏–±–æ —É–∂–µ –≤–∫–ª—é—á–µ–Ω');
  } else {
    console.log('‚úÖ DEBUG_MODE –≤–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Mutant Ape –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  let needsMutantApeUpdate = true;
  
  if (updatedContent.includes('nft_assets/mutant_ape')) {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–µ–π nft_assets/mutant_ape —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    needsMutantApeUpdate = false;
  }
  
  if (updatedContent.includes('mutant_ape_nft')) {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–µ–π mutant_ape_nft —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    needsMutantApeUpdate = false;
  }
  
  if (updatedContent.includes('mutant_ape_official')) {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–µ–π mutant_ape_official —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    needsMutantApeUpdate = false;
  }
  
  if (needsMutantApeUpdate) {
    // –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const detectCollectionTypeRegex = /function detectCollectionType\(imagePath: string\): NFTCollectionType \{[\s\S]*?\}/;
    const detectCollectionTypeMatch = updatedContent.match(detectCollectionTypeRegex);
    
    if (detectCollectionTypeMatch) {
      const oldDetectFunction = detectCollectionTypeMatch[0];
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ Mutant Ape
      const newDetectFunction = `function detectCollectionType(imagePath: string): NFTCollectionType {
  if (!imagePath) return NFTCollectionType.OTHER;
  
  if (imagePath.includes('mutant_ape_official')) {
    return NFTCollectionType.MUTANT_APE_OFFICIAL;
  } else if (imagePath.includes('mutant_ape_nft') || imagePath.includes('nft_assets/mutant_ape') || imagePath.includes('mutant_ape')) {
    return NFTCollectionType.MUTANT_APE;
  } else if (imagePath.includes('bored_ape_nft') || imagePath.includes('bayc_official')) {
    return NFTCollectionType.BORED_APE;
  }
  
  return NFTCollectionType.OTHER;
}`;
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
      updatedContent = updatedContent.replace(oldDetectFunction, newDetectFunction);
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ Mutant Ape');
    }
    
    // –ò—â–µ–º –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Mutant Ape –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    const mutantApeHandlingRegex = /case NFTCollectionType\.MUTANT_APE[\s\S]*?break;/;
    const mutantApeHandlingMatch = updatedContent.match(mutantApeHandlingRegex);
    
    if (mutantApeHandlingMatch) {
      const oldMutantApeHandling = mutantApeHandlingMatch[0];
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–æ–∫
      const newMutantApeHandling = `case NFTCollectionType.MUTANT_APE:
    case NFTCollectionType.MUTANT_APE_OFFICIAL: {
      const nftNumber = extractNFTNumber(imagePath);
      const isOfficial = collectionType === NFTCollectionType.MUTANT_APE_OFFICIAL;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Mutant Ape NFT
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∏ —Ç–∏–ø–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      let imageDir = 'mutant_ape_nft';
      if (isOfficial) {
        imageDir = 'mutant_ape_official';
      } else if (imagePath.includes('nft_assets/mutant_ape')) {
        imageDir = 'nft_assets/mutant_ape';
      }
      
      const enhancedPath = \`/nft-proxy\${imagePath}?v=\${timestamp}&r=\${random}&collection=\${isOfficial ? 'official' : 'mutant'}&nocache=true&mutant=true&n=\${nftNumber}&force=true&dir=\${imageDir}\`;
      
      if (DEBUG_MODE) {
        console.log(\`\${isOfficial ? 'üîµ' : 'üü¢'} MUTANT APE \${isOfficial ? '(OFFICIAL)' : ''} #\${nftNumber}: \${imagePath} -> \${enhancedPath}, dir=\${imageDir}\`);
      }
      
      return enhancedPath;
    }
    break;`;
      
      // –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫
      updatedContent = updatedContent.replace(oldMutantApeHandling, newMutantApeHandling);
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Mutant Ape —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π');
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã
  if (updatedContent !== originalContent) {
    fs.writeFileSync(CLIENT_IMAGE_UTILS_PATH, updatedContent, 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${CLIENT_IMAGE_UTILS_PATH} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return true;
  } else {
    console.log(`‚ÑπÔ∏è –§–∞–π–ª ${CLIENT_IMAGE_UTILS_PATH} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
 */
function main() {
  updateClientImageUtils();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
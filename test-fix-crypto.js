#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑–µ –Ω–∞ Vercel
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-fix-crypto.js <–≤–∞—à-–¥–æ–º–µ–Ω-vercel>

import https from 'https';
import http from 'http';

const domain = process.argv[2];

if (!domain) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω Vercel!');
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-fix-crypto.js your-app.vercel.app');
  process.exit(1);
}

const url = `https://${domain}/api/admin/fix-crypto-addresses`;

console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...`);
console.log(`üåê –ê–¥—Ä–µ—Å: ${url}`);

const postData = JSON.stringify({
  adminKey: 'fix_crypto_2024'
});

const options = {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

const req = https.request(url, options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    try {
      const result = JSON.parse(data);
      
      if (result.success) {
        console.log(`‚úÖ –£–°–ü–ï–•! ${result.message}`);
        console.log(`üìà –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç: ${result.fixed || 0}/${result.total || 0}`);
        
        if (result.results && result.results.length > 0) {
          console.log('\nüìã –î–µ—Ç–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:');
          result.results.forEach((card, index) => {
            if (card.status === 'fixed') {
              console.log(`  ${index + 1}. –ö–∞—Ä—Ç–∞ ${card.cardId} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${card.userId})`);
              console.log(`     ü™ô BTC: ${card.btcAddress}`);
              console.log(`     üíé ETH: ${card.ethAddress}`);
            } else if (card.status === 'error') {
              console.log(`  ${index + 1}. ‚ùå –ö–∞—Ä—Ç–∞ ${card.cardId}: ${card.error}`);
            }
          });
        }
      } else {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: ${result.message}`);
      }
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', e.message);
      console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
    }
  });
});

req.on('error', (e) => {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}`);
  console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
  console.log('  1. –ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º–µ–Ω Vercel');
  console.log('  2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–æ');
  console.log('  3. –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('  4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
});

req.write(postData);
req.end();

console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
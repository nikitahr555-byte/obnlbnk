/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */

import { db } from './server/db.ts';
import { cards, users } from './shared/schema.ts';
import { eq } from 'drizzle-orm';
import { validateCryptoAddress } from './server/utils/crypto.ts';

async function checkNewUserAddresses() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç—ã
    const cryptoCards = await db
      .select()
      .from(cards)
      .where(eq(cards.type, 'crypto'))
      .limit(10);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ–∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    for (const card of cryptoCards) {
      const user = await db
        .select()
        .from(users)
        .where(eq(users.id, card.userId))
        .limit(1);
      
      const username = user.length > 0 ? user[0].username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
      
      console.log(`–ö–∞—Ä—Ç–∞ #${card.id} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username})`);
      console.log(`–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${card.number}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC –∞–¥—Ä–µ—Å
      const btcAddress = card.btcAddress;
      const isBtcValid = btcAddress ? validateCryptoAddress(btcAddress, 'btc') : false;
      console.log(`BTC –∞–¥—Ä–µ—Å: ${btcAddress || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`BTC –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isBtcValid ? '‚úÖ –í–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}`);
      console.log(`BTC –∞–¥—Ä–µ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '11': ${btcAddress?.startsWith('11') ? '–î–∞' : '–ù–µ—Ç'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ETH –∞–¥—Ä–µ—Å
      const ethAddress = card.ethAddress;
      const isEthValid = ethAddress ? validateCryptoAddress(ethAddress, 'eth') : false;
      console.log(`ETH –∞–¥—Ä–µ—Å: ${ethAddress || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`ETH –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isEthValid ? '‚úÖ –í–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}`);
      
      console.log('----------------------------');
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkNewUserAddresses();
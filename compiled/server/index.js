import express from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic } from "./vite";
import { scheduleBackups } from "./database/backup";
import { startBot } from "./telegram-bot";
import { setupDebugRoutes } from "./debug";
import { setupGlobalErrorHandlers, logError, errorHandler, notFoundHandler } from "./utils/error-handler";
import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';
// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏ –∫ NFT-—Å–µ—Ä–≤–µ—Ä—É
const __dirname = path.dirname(fileURLToPath(import.meta.url));
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ NFT —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
function startNFTFallbackServer(port = 8082) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ NFT Fallback Server –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ—Ä—Ç–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
    try {
        fs.writeFileSync('./nft-fallback-port.txt', port.toString(), 'utf8');
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ NFT Fallback —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${port}`);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        global.nftFallbackPort = port;
        console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è nftFallbackPort —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${port}`);
    }
    catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞ NFT Fallback:', err);
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try {
        const fallbackServerPath = path.join(process.cwd(), 'nft-fallback-server.js');
        console.log(`üìÅ –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É NFT Fallback —Å–µ—Ä–≤–µ—Ä–∞: ${fallbackServerPath}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
        if (!fs.existsSync(fallbackServerPath)) {
            console.error(`‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ NFT Fallback —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fallbackServerPath}`);
            return null;
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        const nftFallbackServer = spawn('node', [fallbackServerPath]);
        nftFallbackServer.stdout.on('data', (data) => {
            console.log(`[NFT Fallback Server] ${data}`);
        });
        nftFallbackServer.stderr.on('data', (data) => {
            console.error(`[NFT Fallback Server ERROR] ${data}`);
        });
        nftFallbackServer.on('close', (code) => {
            console.log(`NFT Fallback Server exited with code ${code}`);
        });
        return nftFallbackServer;
    }
    catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ NFT Fallback Server:', err);
        return null;
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ—Ä—Ç–æ–º
function startNFTImageServer(port = 8081) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ NFT Image Server –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ—Ä—Ç–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
    try {
        fs.writeFileSync('./nft-server-port.txt', port.toString(), 'utf8');
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${port}`);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        global.nftServerPort = port;
        console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è nftServerPort —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${port}`);
    }
    catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞ NFT:', err);
    }
    // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try {
        const nftImageServerPath = path.join(process.cwd(), 'run-nft-server.js');
        console.log(`üìÅ –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É NFT —Å–µ—Ä–≤–µ—Ä–∞: ${nftImageServerPath}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
        if (!fs.existsSync(nftImageServerPath)) {
            console.error(`‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${nftImageServerPath}`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ server/nft-image-server.js –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const fallbackPath = path.join(process.cwd(), 'server', 'nft-image-server.js');
            console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏: ${fallbackPath}`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å
            if (fs.existsSync(fallbackPath)) {
                const nftImageServer = spawn('node', [fallbackPath]);
                nftImageServer.stdout.on('data', (data) => {
                    console.log(`[NFT Image Server] ${data}`);
                });
                nftImageServer.stderr.on('data', (data) => {
                    console.error(`[NFT Image Server ERROR] ${data}`);
                });
                nftImageServer.on('close', (code) => {
                    console.log(`NFT Image Server exited with code ${code}`);
                    console.log(`üîÑ NFT —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...`);
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π
                    if (code !== 0) {
                        startNFTFallbackServer();
                    }
                });
                return nftImageServer;
            }
            else {
                console.error(`‚ùå –ó–∞–ø–∞—Å–Ω–æ–π —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ NFT —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fallbackPath}`);
                console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π NFT —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ...`);
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                return startNFTFallbackServer();
            }
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
        const nftImageServer = spawn('node', [nftImageServerPath]);
        nftImageServer.stdout.on('data', (data) => {
            console.log(`[NFT Image Server] ${data}`);
        });
        nftImageServer.stderr.on('data', (data) => {
            console.error(`[NFT Image Server ERROR] ${data}`);
        });
        nftImageServer.on('close', (code) => {
            console.log(`NFT Image Server exited with code ${code}`);
            console.log(`üîÑ NFT —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...`);
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π
            if (code !== 0) {
                startNFTFallbackServer();
            }
        });
        return nftImageServer;
    }
    catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ NFT Image Server:', err);
        console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π NFT —Å–µ—Ä–≤–µ—Ä –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...`);
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É
        return startNFTFallbackServer();
    }
}
// –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –≤ createServer
let nftImageServer = null;
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
setupGlobalErrorHandlers();
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('uncaughtException', (error) => {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (uncaughtException):', error);
    logError(error);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
});
process.on('unhandledRejection', (reason, promise) => {
    console.error('üö® –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô PROMISE (unhandledRejection):', reason);
    logError(reason instanceof Error ? reason : new Error(String(reason)));
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
});
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
});
process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
});
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
const app = express();
// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è free tier
app.use(express.json({ limit: '128kb' }));
app.use(express.urlencoded({ extended: false, limit: '128kb' }));
// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–¥–∞—á—É —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public
// –í–ê–ñ–ù–û: –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –î–û –¥—Ä—É–≥–∏—Ö middleware –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use(express.static('public', {
    index: false, // –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å index.html
    etag: true, // –í–∫–ª—é—á–∏—Ç—å ETag –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    lastModified: true, // –í–∫–ª—é—á–∏—Ç—å Last-Modified –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    setHeaders: (res, path) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ mime-—Ç–∏–ø—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (path.endsWith('.png')) {
            res.setHeader('Content-Type', 'image/png');
        }
        else if (path.endsWith('.jpg') || path.endsWith('.jpeg')) {
            res.setHeader('Content-Type', 'image/jpeg');
        }
        else if (path.endsWith('.avif')) {
            res.setHeader('Content-Type', 'image/avif');
        }
    }
}));
// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è BAYC NFT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/bayc_official', (req, res, next) => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ NFT —Å–µ—Ä–≤–µ—Ä–∞
    console.log(`BAYC request: ${req.path}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ NFT –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);
    res.redirect(`/nft-proxy/bayc_official${req.path}`);
});
app.use('/nft_assets', express.static(path.join(__dirname, '../nft_assets')));
// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CORS –¥–ª—è Replit
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    if (req.method === 'OPTIONS')
        return res.sendStatus(200);
    next();
});
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export async function createServer(options) {
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (options?.environment) {
            process.env.NODE_ENV = options.environment;
            console.log(`üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${options.environment}`);
        }
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (options?.logLevel) {
            console.log(`üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${options.logLevel}`);
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º NFT —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ
        if (!nftImageServer) {
            const nftServerPort = options?.nftServerPort || 8081;
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ NFT —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${nftServerPort}...`);
            nftImageServer = startNFTImageServer(nftServerPort);
        }
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if (options?.forcePostgres) {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        console.log('Initializing database tables...');
        console.log('Database initialized successfully');
        console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞...');
        const server = await registerRoutes(app);
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
        setupDebugRoutes(app);
        console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...');
        scheduleBackups();
        console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
        await startBot();
        console.log('üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏...');
        if (process.env.NODE_ENV !== 'production') {
            await setupVite(app, server);
        }
        else {
            serveStatic(app);
        }
        console.log('üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–ø—É—Å–∫—É...');
        // –í–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vite
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 404 –æ—à–∏–±–æ–∫ (–º–∞—Ä—à—Ä—É—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
        app.use(notFoundHandler);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.use(errorHandler);
        // –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è development
        if (process.env.NODE_ENV !== 'production') {
            app.use((req, res, next) => {
                res.header('Access-Control-Allow-Origin', '*');
                res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
                res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
                if (req.method === 'OPTIONS') {
                    return res.sendStatus(200);
                }
                next();
            });
        }
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5000 –¥–ª—è Replit
        const PORT = options?.port || 5000;
        const HOST = options?.host || "0.0.0.0";
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –ø–æ—Ä—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if (server.listening) {
            console.log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
            server.close();
        }
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
        console.log(`‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} (${HOST})...`);
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è Replit
        if (process.env.REPL_ID) {
            console.log('üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ä–µ–¥–∞ Replit, –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ä—Ç 5000...');
        }
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∑–∞–Ω–∏–º–∞—é—â–∏–µ –Ω—É–∂–Ω—ã–π –ø–æ—Ä—Ç
        try {
            import('node:net').then(netModule => {
                const netServer = netModule.createServer();
                netServer.once('error', (err) => {
                    if (err.code === 'EADDRINUSE') {
                        console.log(`üö® –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º...`);
                    }
                });
                netServer.once('listening', () => {
                    netServer.close();
                });
                netServer.listen(PORT, HOST);
            });
        }
        catch (e) {
            console.log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
        }
        // –ù–∞–∫–æ–Ω–µ—Ü, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
        server.listen(PORT, HOST, () => {
            console.log(`\n\nüöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üì° –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: http://${HOST}:${PORT}`);
            console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV}`);
            console.log('üåê WebSocket —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n');
        }).on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}:`, error);
            if (error.code === 'EADDRINUSE') {
                console.log(`üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç ${PORT}...`);
                server.close();
                setTimeout(() => {
                    server.listen(PORT, HOST);
                }, 1000);
            }
            else {
                process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
            }
        });
        return server;
    }
    catch (error) {
        console.error('Startup error:', error);
        process.exit(1);
    }
}
// –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å (–∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é), —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
if (import.meta.url === `file://${process.argv[1]}`) {
    console.log('üåü –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ index.ts');
    createServer();
}

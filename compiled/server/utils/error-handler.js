/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –í–∫–ª—é—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π,
 * —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
import * as fs from 'fs';
import * as path from 'path';
// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
export class AppError extends Error {
    statusCode;
    isOperational;
    errorCode;
    details;
    constructor(message, statusCode = 500, isOperational = true, errorCode, details) {
        super(message);
        this.statusCode = statusCode;
        this.isOperational = isOperational;
        this.errorCode = errorCode;
        this.details = details;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π stack trace
        Error.captureStackTrace(this, this.constructor);
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        Object.setPrototypeOf(this, AppError.prototype);
    }
}
// –¢–∏–ø—ã –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
export class ValidationError extends AppError {
    constructor(message, details) {
        super(message, 400, true, 'VALIDATION_ERROR', details);
        this.name = 'ValidationError';
    }
}
export class AuthenticationError extends AppError {
    constructor(message) {
        super(message, 401, true, 'AUTHENTICATION_ERROR');
        this.name = 'AuthenticationError';
    }
}
export class NotFoundError extends AppError {
    constructor(message) {
        super(message, 404, true, 'NOT_FOUND_ERROR');
        this.name = 'NotFoundError';
    }
}
export class DatabaseError extends AppError {
    constructor(message, details) {
        super(message, 500, true, 'DATABASE_ERROR', details);
        this.name = 'DatabaseError';
    }
}
export class BlockchainError extends AppError {
    constructor(message, details) {
        super(message, 502, true, 'BLOCKCHAIN_ERROR', details);
        this.name = 'BlockchainError';
    }
}
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
 * –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
 */
const formatError = (err, req) => {
    const isProduction = process.env.NODE_ENV === 'production';
    if (err instanceof AppError) {
        return {
            status: 'error',
            code: err.errorCode || 'INTERNAL_ERROR',
            message: err.message,
            ...(isProduction ? {} : {
                path: req.path,
                timestamp: new Date().toISOString(),
                details: err.details,
                stack: err.stack
            })
        };
    }
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return {
        status: 'error',
        code: 'INTERNAL_ERROR',
        message: isProduction ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' : err.message,
        ...(isProduction ? {} : {
            path: req.path,
            timestamp: new Date().toISOString(),
            stack: err.stack
        })
    };
};
/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π console.error
 */
export const logError = (err, req) => {
    const timestamp = new Date().toISOString();
    const errorDetails = {
        timestamp,
        message: err.message,
        stack: err.stack,
        ...(err.details || {}),
        ...(req ? {
            method: req.method,
            url: req.originalUrl,
            ip: req.ip,
            userAgent: req.get('user-agent'),
            headers: req.headers,
            query: req.query,
            body: req.body
        } : {})
    };
    console.error('üî¥ Error details:', JSON.stringify(errorDetails, null, 2));
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
    try {
        const logDir = path.join(process.cwd(), 'logs');
        if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir, { recursive: true });
        }
        const logFile = path.join(logDir, `error-${new Date().toISOString().split('T')[0]}.log`);
        const logEntry = `${timestamp} - ${JSON.stringify(errorDetails)}\n`;
        fs.appendFileSync(logFile, logEntry);
    }
    catch (logError) {
        console.error('Error writing to log file:', logError);
    }
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    // sendErrorToMonitoring(errorDetails);
};
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è Express
 */
export const errorHandler = (err, req, res, next) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logError(err, req);
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ AppError –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞
    const appError = err instanceof AppError
        ? err
        : new AppError(err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.status(appError.statusCode || 500).json(formatError(appError, req));
};
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ MongoDB
 */
export const handleDatabaseError = (err) => {
    if (err.code === 11000) {
        // Duplicate key error
        return new ValidationError('–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', {
            field: Object.keys(err.keyValue)[0],
            value: Object.values(err.keyValue)[0]
        });
    }
    return new DatabaseError(err.message, {
        code: err.code,
        name: err.name
    });
};
/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 */
export const setupGlobalErrorHandlers = () => {
    // –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–∏—Å–∞—Ö
    process.on('unhandledRejection', (reason) => {
        console.error('üî¥ Unhandled Rejection:', reason);
        logError(reason);
        // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    });
    // –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    process.on('uncaughtException', (error) => {
        console.error('üî¥ Uncaught Exception:', error);
        logError(error);
        // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        // –ù–æ –∏–∑-–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Replit, –º—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        // process.exit(1);
    });
};
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫
 */
export const notFoundHandler = (req, res, next) => {
    next(new NotFoundError(`Route not found: ${req.originalUrl}`));
};
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –≤ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
export const registerErrorHandlers = (app) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupGlobalErrorHandlers();
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
    app.use(notFoundHandler);
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.use(errorHandler);
};
export default {
    AppError,
    ValidationError,
    AuthenticationError,
    NotFoundError,
    DatabaseError,
    BlockchainError,
    errorHandler,
    notFoundHandler,
    registerErrorHandlers,
    logError,
    setupGlobalErrorHandlers,
    handleDatabaseError
};

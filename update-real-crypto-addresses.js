/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –†–ï–ê–õ–¨–ù–´–ï, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∞–¥—Ä–µ—Å–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç bitcoinjs-lib –∏ ethers.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–ê–°–¢–û–Ø–©–ò–• –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤
 */
import { db } from './server/db.ts';
import { cards } from './shared/schema.ts';
import { eq } from 'drizzle-orm';
import { ethers } from 'ethers';
import * as bitcoin from 'bitcoinjs-lib';
import * as ecc from 'tiny-secp256k1';
import * as crypto from 'crypto';
import ECPairFactory from 'ecpair';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bitcoinjs —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
bitcoin.initEccLib(ecc);

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π Bitcoin-–∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∏—Ä–∂–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ crypto.ts, –≤—ã–∑—ã–≤–∞—è server code
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
 * @returns {string} –†–∞–±–æ—á–∏–π Bitcoin-–∞–¥—Ä–µ—Å
 */
function generateRealBitcoinAddress(userId) {
  try {
    // –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é
    // —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ ECPair.makeRandom
    
    // –°–æ–∑–¥–∞–µ–º ECPair —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tiny-secp256k1
    const ECPair = ECPairFactory(ecc);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π
    const keyPair = ECPair.makeRandom();
    
    // –°–æ–∑–¥–∞–µ–º P2PKH –∞–¥—Ä–µ—Å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 1)
    const { address } = bitcoin.payments.p2pkh({ 
      pubkey: keyPair.publicKey,
      network: bitcoin.networks.bitcoin
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –†–ï–ê–õ–¨–ù–´–ô Bitcoin –∞–¥—Ä–µ—Å: ${address} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return address;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BTC –∞–¥—Ä–µ—Å–∞:`, error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–¥–∏–º —Ö–æ—Ç—è –±—ã –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å
    // Base58 —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã
    const VALID_CHARS = '0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    function generateValidString(length) {
      let result = '';
      const bytes = crypto.randomBytes(length);
      
      for (let i = 0; i < length; i++) {
        const randomIndex = bytes[i] % VALID_CHARS.length;
        result += VALID_CHARS.charAt(randomIndex);
      }
      
      return result;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π P2PKH –∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '1')
    const addressLength = 28; // –í —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 
    const address = `1${generateValidString(addressLength)}`;
    
    console.log(`‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π Bitcoin –∞–¥—Ä–µ—Å: ${address} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return address;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π Ethereum-–∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∏—Ä–∂–∞–º–∏
 * @returns {string} –†–∞–±–æ—á–∏–π Ethereum-–∞–¥—Ä–µ—Å
 */
function generateRealEthereumAddress() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π Ethereum –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ ethers.js
    const wallet = ethers.Wallet.createRandom();
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –†–ï–ê–õ–¨–ù–´–ô Ethereum –∞–¥—Ä–µ—Å: ${wallet.address}`);
    return wallet.address;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ETH –∞–¥—Ä–µ—Å–∞:`, error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function updateAllCryptoAddresses() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–°–ï–• –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –†–ï–ê–õ–¨–ù–´–ï —Ä–∞–±–æ—á–∏–µ –∞–¥—Ä–µ—Å–∞...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const cryptoCards = await db
      .select()
      .from(cards)
      .where(eq(cards.type, 'crypto'));
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${cryptoCards.length} –∫—Ä–∏–ø—Ç–æ-–∫–∞—Ä—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
    let successCount = 0;
    let errorCount = 0;
    
    for (const card of cryptoCards) {
      try {
        console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –†–ï–ê–õ–¨–ù–´–ï –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å–∞
        const btcAddress = generateRealBitcoinAddress(card.userId);
        const ethAddress = generateRealEthereumAddress();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db
          .update(cards)
          .set({
            btcAddress: btcAddress,
            ethAddress: ethAddress
          })
          .where(eq(cards.id, card.id));
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã #${card.id}:`);
        console.log(`  –°—Ç–∞—Ä—ã–π BTC: ${card.btcAddress}`);
        console.log(`  –ù–æ–≤—ã–π BTC: ${btcAddress}`);
        console.log(`  –°—Ç–∞—Ä—ã–π ETH: ${card.ethAddress}`);
        console.log(`  –ù–æ–≤—ã–π ETH: ${ethAddress}`);
        
        successCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã #${card.id}:`, error);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount} –∫–∞—Ä—Ç`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const updatedCards = await db
      .select()
      .from(cards)
      .where(eq(cards.type, 'crypto'));
    
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:`);
    updatedCards.forEach(card => {
      console.log(`\n–ö–∞—Ä—Ç–∞ #${card.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${card.userId}:`);
      console.log(`- BTC: ${card.btcAddress}`);
      console.log(`- ETH: ${card.ethAddress}`);
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
updateAllCryptoAddresses()
  .then(() => console.log('\n‚úÖ –í—Å–µ –∞–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –†–ï–ê–õ–¨–ù–´–ï'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error));
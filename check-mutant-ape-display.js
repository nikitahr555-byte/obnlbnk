/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Mutant Ape NFT
 * –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import axios from 'axios';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º NFT
const MUTANT_APE_DIR = path.join(process.cwd(), 'mutant_ape_nft');
const CACHE_DIR = path.join(process.cwd(), '.image_cache');

// –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ç NFT-—Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞
function getNFTServerPort() {
  try {
    const portFilePath = path.join(process.cwd(), 'nft-server-port.txt');
    if (fs.existsSync(portFilePath)) {
      const port = fs.readFileSync(portFilePath, 'utf8').trim();
      return parseInt(port, 10);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞ NFT-—Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
  return 8080; // –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NFT-—Å–µ—Ä–≤–µ—Ä–∞
async function checkNFTServerAvailability() {
  const nftServerPort = getNFTServerPort();
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${nftServerPort}...`);
  
  try {
    const response = await axios.get(`http://localhost:${nftServerPort}/status`);
    console.log('‚úÖ NFT-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
    return nftServerPort;
  } catch (error) {
    console.log('‚ùå NFT-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç...');
    
    try {
      const altPort = nftServerPort === 8080 ? 8081 : 8080;
      const altResponse = await axios.get(`http://localhost:${altPort}/status`);
      console.log(`‚úÖ NFT-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ—Ä—Ç—É ${altPort}:`, altResponse.data);
      return altPort;
    } catch (altError) {
      console.error('‚ùå NFT-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –æ–±–æ–∏—Ö –ø–æ—Ä—Ç–∞—Ö:', altError.message);
      return null;
    }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape
function getMutantApeImages() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape...');
  
  if (!fs.existsSync(MUTANT_APE_DIR)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${MUTANT_APE_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    return [];
  }
  
  const files = fs.readdirSync(MUTANT_APE_DIR)
    .filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.avif'));
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape`);
  return files;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ NFT-—Å–µ—Ä–≤–µ—Ä
async function checkImagesAvailability(port, files) {
  if (!port || files.length === 0) {
    console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    return;
  }
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ NFT-—Å–µ—Ä–≤–µ—Ä...');
  
  const sampleSize = Math.min(10, files.length);
  const samples = files.slice(0, sampleSize);
  
  console.log(`üîç –í—ã–±–æ—Ä–∫–∞ –∏–∑ ${sampleSize} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
  
  for (let i = 0; i < samples.length; i++) {
    const file = samples[i];
    const imageUrl = `http://localhost:${port}/mutant_ape_nft/${file}`;
    
    try {
      console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i+1}/${sampleSize}: ${file}`);
      const response = await axios.head(imageUrl);
      
      if (response.status === 200) {
        console.log(`   ‚úÖ [${i+1}/${sampleSize}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: ${file}`);
      } else {
        console.log(`   ‚ùå [${i+1}/${sampleSize}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (${response.status}): ${file}`);
      }
    } catch (error) {
      console.error(`   ‚ùå [${i+1}/${sampleSize}] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ${file}:`, error.message);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFT
async function checkNFTAPI() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFT...');
  
  try {
    const response = await axios.get('http://localhost:5000/api/nft/collections');
    console.log('‚úÖ API –∫–æ–ª–ª–µ–∫—Ü–∏–π NFT –¥–æ—Å—Ç—É–ø–Ω–æ:', response.data.length, '–∫–æ–ª–ª–µ–∫—Ü–∏–π');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Mutant Ape –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const mutantApeCollection = response.data.find(c => 
      c.name.toLowerCase().includes('mutant') && c.name.toLowerCase().includes('ape'));
    
    if (mutantApeCollection) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è Mutant Ape:', mutantApeCollection.name, `(ID: ${mutantApeCollection.id})`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ NFT –∏–∑ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      try {
        const nftResponse = await axios.get(`http://localhost:5000/api/nft/collection/${mutantApeCollection.id}`);
        const nfts = nftResponse.data;
        
        if (nfts && nfts.length > 0) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${nfts.length} NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape`);
          
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
          console.log('üìä –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º NFT:');
          const imagePaths = {};
          
          nfts.slice(0, 5).forEach((nft, index) => {
            console.log(`   NFT #${index+1}:`, nft.name);
            console.log(`   - ID: ${nft.id}, TokenID: ${nft.token_id}`);
            console.log(`   - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ${nft.image_url}`);
            
            const pathPrefix = nft.image_url.split('/').slice(0, -1).join('/');
            imagePaths[pathPrefix] = (imagePaths[pathPrefix] || 0) + 1;
          });
          
          console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –ø—É—Ç–µ–π:');
          Object.entries(imagePaths).forEach(([prefix, count]) => {
            console.log(`   ${prefix}: ${count} NFT`);
          });
        } else {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape');
        }
      } catch (nftError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape:', nftError.message);
      }
    } else {
      console.log('‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è Mutant Ape –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ API NFT:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function checkImageCache() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  if (!fs.existsSync(CACHE_DIR)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  const indexPath = path.join(CACHE_DIR, 'index.json');
  
  if (fs.existsSync(indexPath)) {
    try {
      const index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${index.lastUpdated}`);
      console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   - Mutant Ape: ${index.stats.mutantApe} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      console.log(`   - Bored Ape: ${index.stats.boredApe} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      console.log(`   - Mutant Ape Official: ${index.stats.mutantApeOfficial} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –∫—ç—à–∞:', error);
    }
  } else {
    console.log('‚ùå –ò–Ω–¥–µ–∫—Å –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const cacheFiles = fs.readdirSync(CACHE_DIR)
    .filter(file => file.endsWith('.json') && file !== 'index.json');
  
  if (cacheFiles.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cacheFiles.length} —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ`);
    
    const sampleSize = Math.min(5, cacheFiles.length);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${sampleSize} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:`);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const samples = cacheFiles
      .sort(() => 0.5 - Math.random())
      .slice(0, sampleSize);
    
    samples.forEach((file, index) => {
      try {
        const metadata = JSON.parse(fs.readFileSync(path.join(CACHE_DIR, file), 'utf8'));
        console.log(`   ‚úÖ [${index+1}/${sampleSize}] ${file}:`);
        console.log(`      –ü—É—Ç—å: ${metadata.path}`);
        console.log(`      –¢–∏–ø: ${metadata.type}`);
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: ${metadata.lastIndexed}`);
      } catch (error) {
        console.error(`   ‚ùå [${index+1}/${sampleSize}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${file}:`, error);
      }
    });
  } else {
    console.log('‚ùå –§–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Mutant Ape NFT...');
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å NFT-—Å–µ—Ä–≤–µ—Ä
  const nftServerPort = await checkNFTServerAvailability();
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const mutantApeImages = getMutantApeImages();
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ NFT-—Å–µ—Ä–≤–µ—Ä
  await checkImagesAvailability(nftServerPort, mutantApeImages);
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFT
  await checkNFTAPI();
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  checkImageCache();
  
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

main().catch(console.error);
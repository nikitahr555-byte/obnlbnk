/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º Mutant Ape NFT
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –¥–∏—Å–∫–µ.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Pool } from 'pg';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const MUTANT_APE_DIR = path.join(process.cwd(), 'mutant_ape_nft');
const TEMP_LOG_FILE = path.join(process.cwd(), 'mutant_ape_fixes.log');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
 */
function log(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `${timestamp} - ${message}`;
  console.log(logMessage);
  
  // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
  fs.appendFileSync(TEMP_LOG_FILE, logMessage + '\n');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape
 */
async function getMutantApeCollection() {
  log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape...');
  
  try {
    const result = await pool.query(`
      SELECT * FROM collections 
      WHERE name ILIKE '%mutant%' AND name ILIKE '%ape%'
    `);
    
    if (result.rows.length > 0) {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è Mutant Ape: ${result.rows[0].name} (ID: ${result.rows[0].id})`);
      return result.rows[0];
    } else {
      log('‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è Mutant Ape –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return null;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape: ${error.message}`);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape
 */
async function getMutantApeNFTs(collectionId) {
  log(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape (ID: ${collectionId})...`);
  
  try {
    const result = await pool.query(`
      SELECT * FROM nfts 
      WHERE collection_id = $1
    `, [collectionId]);
    
    log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${result.rows.length} NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape`);
    return result.rows;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT: ${error.message}`);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Mutant Ape
 */
function getMutantApeImages() {
  log(`üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape: ${MUTANT_APE_DIR}`);
  
  if (!fs.existsSync(MUTANT_APE_DIR)) {
    log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${MUTANT_APE_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    return [];
  }
  
  const files = fs.readdirSync(MUTANT_APE_DIR)
    .filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.avif'));
  
  log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape`);
  return files;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–∞–ø–∏—Å–µ–π NFT
 */
function matchImagesAndNFTs(images, nfts) {
  log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–∞–ø–∏—Å–µ–π NFT...');
  
  const matches = [];
  const mismatches = [];
  
  // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const imageMap = {};
  images.forEach(image => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const tokenIdMatch = image.match(/mutant_ape_(\d+)\.png/i);
    if (tokenIdMatch) {
      const tokenId = parseInt(tokenIdMatch[1], 10);
      imageMap[tokenId] = image;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π NFT
  nfts.forEach(nft => {
    const correctPath = `/mutant_ape_nft/mutant_ape_${nft.token_id.toString().padStart(4, '0')}.png`;
    const currentPath = nft.image_url;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω ID –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const expectedFileName = `mutant_ape_${nft.token_id.toString().padStart(4, '0')}.png`;
    
    if (currentPath !== correctPath) {
      mismatches.push({
        nft,
        currentPath,
        correctPath,
        expectedFileName,
        fileExists: imageMap[nft.token_id] !== undefined
      });
    } else {
      matches.push({
        nft,
        currentPath
      });
    }
  });
  
  log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
  log(`   - ${matches.length} NFT —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º`);
  log(`   - ${mismatches.length} NFT —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π`);
  
  return { matches, mismatches };
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function fixImagePaths(mismatches) {
  if (mismatches.length === 0) {
    log('‚úÖ –í—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    return;
  }
  
  log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è ${mismatches.length} NFT...`);
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ NFT –ø–æ 50 –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const batchSize = 50;
  const batches = [];
  
  for (let i = 0; i < mismatches.length; i += batchSize) {
    batches.push(mismatches.slice(i, i + batchSize));
  }
  
  log(`üîß –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${batches.length} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ ~${batchSize} NFT`);
  
  for (let i = 0; i < batches.length; i++) {
    const batch = batches[i];
    log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${i+1}/${batches.length} (${batch.length} NFT)...`);
    
    for (const mismatch of batch) {
      try {
        await pool.query(`
          UPDATE nfts 
          SET image_url = $1
          WHERE id = $2
        `, [mismatch.correctPath, mismatch.nft.id]);
        
        log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ NFT ID ${mismatch.nft.id}, Token ID ${mismatch.nft.token_id}:`);
        log(`      ${mismatch.currentPath} -> ${mismatch.correctPath}`);
      } catch (error) {
        log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ NFT ID ${mismatch.nft.id}: ${error.message}`);
      }
    }
    
    log(`‚úÖ –ü–∞–∫–µ—Ç ${i+1}/${batches.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function validateFixes(collectionId) {
  log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
  
  try {
    const result = await pool.query(`
      SELECT image_url, COUNT(*) as count
      FROM nfts
      WHERE collection_id = $1
      GROUP BY image_url
    `, [collectionId]);
    
    log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    result.rows.forEach(row => {
      log(`   ${row.image_url}: ${row.count} NFT`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—É—Ç–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /mutant_ape_nft/
    const correctPathsCount = result.rows
      .filter(row => row.image_url.startsWith('/mutant_ape_nft/'))
      .reduce((sum, row) => sum + parseInt(row.count), 0);
    
    const totalNFTs = result.rows
      .reduce((sum, row) => sum + parseInt(row.count), 0);
    
    log(`üìä ${correctPathsCount} –∏–∑ ${totalNFTs} NFT (${(correctPathsCount/totalNFTs*100).toFixed(2)}%) –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—É—Ç–∏`);
    
    if (correctPathsCount === totalNFTs) {
      log('‚úÖ –í—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      log('‚ö†Ô∏è –ù–µ –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
 */
async function backupMutantApeCollection(collectionId) {
  log('üîÑ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Mutant Ape –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const nftsResult = await pool.query(`
      SELECT * FROM nfts 
      WHERE collection_id = $1
    `, [collectionId]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
    const backupData = {
      timestamp: new Date().toISOString(),
      collection_id: collectionId,
      nfts: nftsResult.rows
    };
    
    const backupDir = path.join(process.cwd(), 'backup');
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    const backupPath = path.join(backupDir, `mutant_ape_nfts_backup_${Date.now()}.json`);
    fs.writeFileSync(backupPath, JSON.stringify(backupData, null, 2));
    
    log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
    return backupPath;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
    return null;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º Mutant Ape NFT...');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
    fs.writeFileSync(TEMP_LOG_FILE, `=== –õ–æ–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Mutant Ape ${new Date().toISOString()} ===\n`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const mutantApeCollection = await getMutantApeCollection();
    if (!mutantApeCollection) {
      log('‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è Mutant Ape –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const backupPath = await backupMutantApeCollection(mutantApeCollection.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT
    const mutantApeNFTs = await getMutantApeNFTs(mutantApeCollection.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const mutantApeImages = getMutantApeImages();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const { matches, mismatches } = matchImagesAndNFTs(mutantApeImages, mutantApeNFTs);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    await fixImagePaths(mismatches);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await validateFixes(mutantApeCollection.id);
    
    log(`‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${TEMP_LOG_FILE}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await pool.end();
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    try {
      await pool.end();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
  process.exit(1);
});
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ NFT –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 */
import pg from 'pg';
const { Pool } = pg;
import fs from 'fs';
import path from 'path';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ NFT –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö NFT
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö NFT –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const allNftsResult = await pool.query('SELECT * FROM nfts ORDER BY id');
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${allNftsResult.rows.length} NFT –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const initialCount = allNftsResult.rows.length;
    console.log(`–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT: ${initialCount}`);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ NFT –ø–æ collection_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const collections = {};
    allNftsResult.rows.forEach(nft => {
      const collectionId = nft.collection_id || 'undefined';
      if (!collections[collectionId]) {
        collections[collectionId] = 0;
      }
      collections[collectionId]++;
    });

    console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ NFT –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:');
    Object.keys(collections).forEach(collection => {
      console.log(`- ${collection}: ${collections[collection]} NFT`);
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ token_id
    console.log('2Ô∏è‚É£ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ token_id...');
    const tokenIds = {};
    const duplicates = [];

    allNftsResult.rows.forEach(nft => {
      if (!nft.token_id) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º NFT –±–µ–∑ token_id

      if (!tokenIds[nft.token_id]) {
        tokenIds[nft.token_id] = [nft.id];
      } else {
        tokenIds[nft.token_id].push(nft.id);
        if (tokenIds[nft.token_id].length === 2) {
          duplicates.push(nft.token_id);
        }
      }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${duplicates.length} token_id —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏.`);

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å –∫–∞–∂–¥—ã–º token_id
    console.log('3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    let deletedCount = 0;
    
    for (const tokenId of duplicates) {
      const nftIds = tokenIds[tokenId];
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π ID, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
      const keepId = nftIds[0];
      const deleteIds = nftIds.slice(1);
      
      console.log(`–î–ª—è token_id ${tokenId} –æ—Å—Ç–∞–≤–ª—è–µ–º NFT —Å ID ${keepId}, —É–¥–∞–ª—è–µ–º: ${deleteIds.join(', ')}`);
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ nft_transfers
      for (const deleteId of deleteIds) {
        await pool.query('DELETE FROM nft_transfers WHERE nft_id = $1', [deleteId]);
      }
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ NFT
      const deleteResult = await pool.query(
        'DELETE FROM nft WHERE id = ANY($1::int[])', 
        [deleteIds]
      );
      
      deletedCount += deleteResult.rowCount;
    }
    
    console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö NFT.`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º Mutant Ape
    console.log('4Ô∏è‚É£ –ü–æ–∏—Å–∫ NFT —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏...');
    
    const wrongImagePathsResult = await pool.query(`
      SELECT n.id, c.name as collection_name, n.image_path
      FROM nfts n
      JOIN nft_collections c ON n.collection_id = c.id
      WHERE c.name LIKE '%Mutant%' AND (n.image_path NOT LIKE '%mutant%' OR n.image_path IS NULL)
    `);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${wrongImagePathsResult.rows.length} Mutant Ape NFT —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º Mutant Ape
    console.log('5Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º Mutant Ape...');
    
    const mutantApeDirectory = path.join(process.cwd(), 'mutant_ape_nft');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape
    let mutantApeImages = [];
    if (fs.existsSync(mutantApeDirectory)) {
      mutantApeImages = fs.readdirSync(mutantApeDirectory)
        .filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg'))
        .map(file => path.join('/mutant_ape_nft', file));
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${mutantApeImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape –¥–ª—è –∑–∞–º–µ–Ω—ã.`);
    } else {
      console.log(`–ö–∞—Ç–∞–ª–æ–≥ Mutant Ape –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mutantApeDirectory}`);
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Mutant Ape NFT —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
    let fixedPaths = 0;
    
    for (const nft of wrongImagePathsResult.rows) {
      if (mutantApeImages.length > 0) {
        // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ Mutant Ape
        const randomIndex = Math.floor(Math.random() * mutantApeImages.length);
        const newImageUrl = mutantApeImages[randomIndex];
        
        await pool.query(
          'UPDATE nfts SET image_path = $1 WHERE id = $2',
          [newImageUrl, nft.id]
        );
        
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è NFT #${nft.id}: ${nft.image_path || '–Ω–µ—Ç –ø—É—Ç–∏'} -> ${newImageUrl}`);
        fixedPaths++;
      }
    }
    
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedPaths} –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º Mutant Ape.`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const finalNftsResult = await pool.query('SELECT COUNT(*) FROM nfts');
    const finalCount = parseInt(finalNftsResult.rows[0].count);
    
    console.log(`–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT: ${finalCount} (–±—ã–ª–æ: ${initialCount}, —É–¥–∞–ª–µ–Ω–æ: ${deletedCount}, —Ä–∞–∑–Ω–∏—Ü–∞: ${initialCount - finalCount})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collectionCountsResult = await pool.query(`
      SELECT c.name as collection_name, COUNT(*) 
      FROM nfts n 
      JOIN nft_collections c ON n.collection_id = c.id
      GROUP BY c.name
    `);
    
    console.log('–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ NFT –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:');
    collectionCountsResult.rows.forEach(row => {
      console.log(`- ${row.collection_name}: ${row.count} NFT`);
    });

    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await pool.end();
  }
}

main();
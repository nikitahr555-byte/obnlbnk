/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Mutant Ape NFT
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import child_process from 'child_process';
import crypto from 'crypto';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const MUTANT_APE_DIR = path.join(process.cwd(), 'mutant_ape_nft');
const BORED_APE_DIR = path.join(process.cwd(), 'bored_ape_nft');
const MUTANT_APE_OFFICIAL_DIR = path.join(process.cwd(), 'mutant_ape_official');

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞
const CACHE_DIR = path.join(process.cwd(), '.image_cache');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
 */
function generateFileHash(filePath) {
  try {
    const fileBuffer = fs.readFileSync(filePath);
    const hashSum = crypto.createHash('sha256');
    hashSum.update(fileBuffer);
    return hashSum.digest('hex');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞ –¥–ª—è ${filePath}:`, error);
    return '';
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function createImageCache() {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
  }
  
  // –ö—ç—à–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Mutant Ape
  if (fs.existsSync(MUTANT_APE_DIR)) {
    const files = fs.readdirSync(MUTANT_APE_DIR)
      .filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.avif'));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Mutant Ape –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    files.forEach((file, index) => {
      const filePath = path.join(MUTANT_APE_DIR, file);
      const fileHash = generateFileHash(filePath);
      const stats = fs.statSync(filePath);
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const metadata = {
        path: `/mutant_ape_nft/${file}`,
        hash: fileHash,
        size: stats.size,
        type: 'mutant',
        lastIndexed: new Date().toISOString()
      };
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ
      const cacheFileName = file.replace(/\.[^/.]+$/, '') + '.json';
      const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
      
      fs.writeFileSync(cacheFilePath, JSON.stringify(metadata, null, 2));
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å
      if (index % 50 === 0) {
        console.log(`   üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${index} –∏–∑ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
      }
    });
    
    console.log(`‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Mutant Ape –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  }
  
  // –ö—ç—à–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Bored Ape
  if (fs.existsSync(BORED_APE_DIR)) {
    const files = fs.readdirSync(BORED_APE_DIR)
      .filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.avif'));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Bored Ape –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
    console.log(`üîÑ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ Bored Ape –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
    const cacheManifestPath = path.join(CACHE_DIR, 'bored_ape_manifest.json');
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è Bored Ape (–±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
    const manifest = {
      count: files.length,
      type: 'bored',
      lastIndexed: new Date().toISOString(),
      basePath: '/bored_ape_nft/'
    };
    
    fs.writeFileSync(cacheManifestPath, JSON.stringify(manifest, null, 2));
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Bored Ape`);
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞
  const indexPath = path.join(CACHE_DIR, 'index.json');
  const index = {
    lastUpdated: new Date().toISOString(),
    stats: {
      mutantApe: fs.existsSync(MUTANT_APE_DIR) ? fs.readdirSync(MUTANT_APE_DIR).filter(f => f.endsWith('.png')).length : 0,
      boredApe: fs.existsSync(BORED_APE_DIR) ? fs.readdirSync(BORED_APE_DIR).filter(f => f.endsWith('.png')).length : 0,
      mutantApeOfficial: fs.existsSync(MUTANT_APE_OFFICIAL_DIR) ? fs.readdirSync(MUTANT_APE_OFFICIAL_DIR).filter(f => f.endsWith('.png')).length : 0
    }
  };
  
  fs.writeFileSync(indexPath, JSON.stringify(index, null, 2));
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞');
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
function restartServer() {
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    const signalPath = path.join(process.cwd(), '.restart_signal');
    fs.writeFileSync(signalPath, new Date().toISOString());
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞
 */
function clearTempFiles() {
  console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');
  
  // –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞
  const tempDirs = [
    path.join(process.cwd(), 'tmp'),
    path.join(process.cwd(), '.cache')
  ];
  
  for (const dir of tempDirs) {
    if (fs.existsSync(dir)) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}...`);
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã .cache-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const cacheFiles = [];
        
        function scanDir(directory) {
          const items = fs.readdirSync(directory);
          
          for (const item of items) {
            const itemPath = path.join(directory, item);
            const stats = fs.statSync(itemPath);
            
            if (stats.isDirectory()) {
              scanDir(itemPath);
            } else if (stats.isFile() && item.endsWith('.cache')) {
              cacheFiles.push(itemPath);
            }
          }
        }
        
        scanDir(dir);
        
        if (cacheFiles.length > 0) {
          console.log(`üßπ –£–¥–∞–ª—è–µ–º ${cacheFiles.length} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞ –∏–∑ ${dir}...`);
          
          for (const file of cacheFiles) {
            fs.unlinkSync(file);
          }
          
          console.log(`‚úÖ –ö—ç—à-—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ ${dir}`);
        } else {
          console.log(`‚úÖ –ö—ç—à-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ${dir}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error);
      }
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π NFT...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    createImageCache();
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à
    clearTempFiles();
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    restartServer();
    
    console.log('‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);
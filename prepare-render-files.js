/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render.com
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ render-deployment
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
const deploymentDir = path.join(__dirname, 'render-deployment');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(deploymentDir)) {
  fs.mkdirSync(deploymentDir, { recursive: true });
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const mainFiles = [
  'package.json',
  'render.yaml',
  'build.sh',
  'start.sh',
  'drizzle.config.ts',
  'vite.config.ts',
  'tsconfig.json',
  'postcss.config.js',
  'tailwind.config.ts',
  'RENDER_DEPLOYMENT_GUIDE.md',
  'DATABASE_BACKUP_RESTORE.md'
];

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const dirsToProcess = [
  { source: 'data', includeSubdirs: true },
  { source: 'scripts', include: ['prepare-data-directory.js', 'prepare-for-render.js'] },
  { source: 'server', includeSubdirs: true },
  { source: 'client/src', dest: 'client/src', includeSubdirs: true },
  { source: 'shared', includeSubdirs: true }
];

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('–ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã...');
for (const file of mainFiles) {
  try {
    const srcPath = path.join(__dirname, file);
    const destPath = path.join(deploymentDir, file);
    
    if (fs.existsSync(srcPath)) {
      fs.copyFileSync(srcPath, destPath);
      console.log(`‚úÖ –§–∞–π–ª ${file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function copyDir(src, dest, include = null) {
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ —ç—Ç–æ —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    if (include && entry.isFile() && !include.includes(entry.name)) {
      continue;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫–æ–ø–∏—Ä—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } 
    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, –∫–æ–ø–∏—Ä—É–µ–º
    else if (entry.isFile()) {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
console.log('\n–ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...');
for (const dir of dirsToProcess) {
  try {
    const srcPath = path.join(__dirname, dir.source);
    const destPath = path.join(deploymentDir, dir.dest || dir.source);
    
    if (fs.existsSync(srcPath)) {
      if (dir.include) {
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (!fs.existsSync(destPath)) {
          fs.mkdirSync(destPath, { recursive: true });
        }
        
        for (const file of dir.include) {
          const srcFilePath = path.join(srcPath, file);
          const destFilePath = path.join(destPath, file);
          if (fs.existsSync(srcFilePath)) {
            fs.copyFileSync(srcFilePath, destFilePath);
            console.log(`‚úÖ –§–∞–π–ª ${dir.source}/${file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);
          } else {
            console.log(`‚ö†Ô∏è –§–∞–π–ª ${dir.source}/${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
        }
      } else {
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        copyDir(srcPath, destPath);
        console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir.source} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${destPath}`);
      }
    } else {
      console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir.source} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir.source}:`, error.message);
  }
}

console.log('\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Render.com –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log(`üìÅ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${deploymentDir}`);
console.log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ "Files" –ø–∞–Ω–µ–ª—å –≤ Replit.');
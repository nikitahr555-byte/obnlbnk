/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∞–¥—Ä–µ—Å–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "11", –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
 * - –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Bitcoin-–∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
 */

import crypto from 'crypto';

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ BTC-–∞–¥—Ä–µ—Å–∞ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
function validateBtcAddressFrontend(address) {
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è Legacy –∏ P2SH, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏—Ñ—Ä—ã)
  const legacyRegex = /^[13][a-km-zA-HJ-NP-Z0-9]{24,33}$/;
  // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è SegWit –∞–¥—Ä–µ—Å–æ–≤ (bc1...)
  const bech32Regex = /^bc1[a-zA-HJ-NP-Z0-9]{39,59}$/;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ—Ç—Å–µ—á—å —è–≤–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
  const hasInvalidPattern = address.includes('BTC') || 
                           address.includes('btc') || 
                           /^1[0-9]{6,}$/.test(address); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤–∏–¥–∞ 1000000...
  
  return (legacyRegex.test(address) || bech32Regex.test(address)) && !hasInvalidPattern;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö BTC-–∞–¥—Ä–µ—Å–æ–≤
function generateValidBtcAddress() {
  // Base58 —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã
  const VALID_CHARS = '0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  function generateValidString(length) {
    let result = '';
    const bytes = crypto.randomBytes(length);
    
    for (let i = 0; i < length; i++) {
      const randomIndex = bytes[i] % VALID_CHARS.length;
      result += VALID_CHARS.charAt(randomIndex);
    }
    
    return result;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ P2PKH, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  const prefixChar = '1';
  const addressLength = 28; // –í —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  let addressBody = generateValidString(addressLength);
  while (
    addressBody.includes('BTC') || 
    addressBody.includes('btc') || 
    /^[0-9]+$/.test(addressBody) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
  ) {
    addressBody = generateValidString(addressLength);
  }
  
  return `${prefixChar}${addressBody}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å "11"
function generateSpecialTestAddress() {
  // Base58 —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã
  const VALID_CHARS = '0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  function generateValidString(length) {
    let result = '';
    const bytes = crypto.randomBytes(length);
    
    for (let i = 0; i < length; i++) {
      const randomIndex = bytes[i] % VALID_CHARS.length;
      result += VALID_CHARS.charAt(randomIndex);
    }
    
    return result;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "11"
  const addressLength = 27; // –û–±—â–∞—è –¥–ª–∏–Ω–∞ –±—É–¥–µ—Ç 29 —Å–∏–º–≤–æ–ª–æ–≤ (11 + 27 —Å–∏–º–≤–æ–ª–æ–≤)
  const addressBody = generateValidString(addressLength);
  return `11${addressBody}`;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
const testAddresses = [
  // –°—Ç–∞—Ä—ã–µ –∞–¥—Ä–µ—Å–∞
  "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa", // –ü–µ—Ä–≤—ã–π –±–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å (Genesis block)
  "3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy", // –ü—Ä–∏–º–µ—Ä P2SH –∞–¥—Ä–µ—Å–∞
  "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq", // –ü—Ä–∏–º–µ—Ä Bech32 –∞–¥—Ä–µ—Å–∞
  
  // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
  "11QAZXSWedcvfr4322WSXZxsw", // –ê–¥—Ä–µ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "11"
  "1100000000000000000000000", // –ê–¥—Ä–µ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "11" –∏ —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π)
  "1BTCadressshouldnotpass123", // –ê–¥—Ä–µ—Å —Å "BTC" (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π)
  
  // –ù–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
  generateValidBtcAddress(),
  generateValidBtcAddress(),
  generateSpecialTestAddress(),
  generateSpecialTestAddress()
];

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏\n");

testAddresses.forEach(address => {
  const isValid = validateBtcAddressFrontend(address);
  console.log(`–ê–¥—Ä–µ—Å: ${address}`);
  console.log(`–î–ª–∏–Ω–∞: ${address.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log(`–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValid ? '‚úÖ –ü—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é' : '‚ùå –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
  const legacyRegex = /^[13][a-km-zA-HJ-NP-Z0-9]{24,33}$/;
  const bech32Regex = /^bc1[a-zA-HJ-NP-Z0-9]{39,59}$/;
  const hasInvalidPattern = address.includes('BTC') || address.includes('btc') || /^1[0-9]{6,}$/.test(address);
  
  console.log(`- Legacy Regex: ${legacyRegex.test(address) ? '‚úì' : '‚úó'}`);
  console.log(`- Bech32 Regex: ${bech32Regex.test(address) ? '‚úì' : '‚úó'}`);
  console.log(`- –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: ${hasInvalidPattern ? '‚úì (–Ω–∞–π–¥–µ–Ω)' : '‚úó (–Ω–µ –Ω–∞–π–¥–µ–Ω)'}`);
  console.log("----------------------------");
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –∞–¥—Ä–µ—Å–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "11"
console.log("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –∞–¥—Ä–µ—Å–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å '11':\n");

const specialTestCount = 5;
for (let i = 0; i < specialTestCount; i++) {
  const specialAddress = generateSpecialTestAddress();
  const isValid = validateBtcAddressFrontend(specialAddress);
  console.log(`–¢–µ—Å—Ç #${i+1}: ${specialAddress} - ${isValid ? '‚úÖ –ü—Ä–æ—Ö–æ–¥–∏—Ç' : '‚ùå –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç'}`);
}

console.log("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
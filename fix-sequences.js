#!/usr/bin/env node

import { client } from './server/db.ts';

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º–∏ ID
 * –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */

async function fixSequences() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL...');

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
    const [maxUserId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM users`;
    const nextUserSeq = maxUserId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('users', 'id'), ${nextUserSeq}, false)`;
    console.log(`‚úÖ Users sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextUserSeq}`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cards
    const [maxCardId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM cards`;
    const nextCardSeq = maxCardId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('cards', 'id'), ${nextCardSeq}, false)`;
    console.log(`‚úÖ Cards sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextCardSeq}`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions
    const [maxTransactionId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM transactions`;
    const nextTransactionSeq = maxTransactionId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('transactions', 'id'), ${nextTransactionSeq}, false)`;
    console.log(`‚úÖ Transactions sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextTransactionSeq}`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã exchange_rates
    const [maxRateId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM exchange_rates`;
    const nextRateSeq = maxRateId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('exchange_rates', 'id'), ${nextRateSeq}, false)`;
    console.log(`‚úÖ Exchange rates sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextRateSeq}`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã nft_collections
    const [maxNftCollectionId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM nft_collections`;
    const nextNftCollectionSeq = maxNftCollectionId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('nft_collections', 'id'), ${nextNftCollectionSeq}, false)`;
    console.log(`‚úÖ NFT Collections sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextNftCollectionSeq}`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã nfts
    const [maxNftId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM nfts`;
    const nextNftSeq = maxNftId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('nfts', 'id'), ${nextNftSeq}, false)`;
    console.log(`‚úÖ NFTs sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextNftSeq}`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã nft_transfers
    const [maxNftTransferId] = await client`SELECT COALESCE(MAX(id), 0) as max_id FROM nft_transfers`;
    const nextNftTransferSeq = maxNftTransferId.max_id + 1;
    await client`SELECT setval(pg_get_serial_sequence('nft_transfers', 'id'), ${nextNftTransferSeq}, false)`;
    console.log(`‚úÖ NFT Transfers sequence —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nextNftTransferSeq}`);

    console.log('');
    console.log('üéâ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:', error);
    process.exit(1);
  } finally {
    try {
      await client.end();
    } catch (err) {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixSequences();